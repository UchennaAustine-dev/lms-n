
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Branch
 * 
 */
export type Branch = $Result.DefaultSelection<Prisma.$BranchPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model LoanType
 * 
 */
export type LoanType = $Result.DefaultSelection<Prisma.$LoanTypePayload>
/**
 * Model Loan
 * 
 */
export type Loan = $Result.DefaultSelection<Prisma.$LoanPayload>
/**
 * Model RepaymentScheduleItem
 * 
 */
export type RepaymentScheduleItem = $Result.DefaultSelection<Prisma.$RepaymentScheduleItemPayload>
/**
 * Model Repayment
 * 
 */
export type Repayment = $Result.DefaultSelection<Prisma.$RepaymentPayload>
/**
 * Model RepaymentAllocation
 * 
 */
export type RepaymentAllocation = $Result.DefaultSelection<Prisma.$RepaymentAllocationPayload>
/**
 * Model LoanAssignmentHistory
 * 
 */
export type LoanAssignmentHistory = $Result.DefaultSelection<Prisma.$LoanAssignmentHistoryPayload>
/**
 * Model CustomerReassignment
 * 
 */
export type CustomerReassignment = $Result.DefaultSelection<Prisma.$CustomerReassignmentPayload>
/**
 * Model DocumentType
 * 
 */
export type DocumentType = $Result.DefaultSelection<Prisma.$DocumentTypePayload>
/**
 * Model CustomerDocument
 * 
 */
export type CustomerDocument = $Result.DefaultSelection<Prisma.$CustomerDocumentPayload>
/**
 * Model LoanDocument
 * 
 */
export type LoanDocument = $Result.DefaultSelection<Prisma.$LoanDocumentPayload>
/**
 * Model StaffSession
 * 
 */
export type StaffSession = $Result.DefaultSelection<Prisma.$StaffSessionPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  BRANCH_MANAGER: 'BRANCH_MANAGER',
  CREDIT_OFFICER: 'CREDIT_OFFICER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const LoanStatus: {
  DRAFT: 'DRAFT',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  APPROVED: 'APPROVED',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  DEFAULTED: 'DEFAULTED',
  WRITTEN_OFF: 'WRITTEN_OFF',
  CANCELED: 'CANCELED'
};

export type LoanStatus = (typeof LoanStatus)[keyof typeof LoanStatus]


export const TermUnit: {
  DAY: 'DAY',
  WEEK: 'WEEK',
  MONTH: 'MONTH'
};

export type TermUnit = (typeof TermUnit)[keyof typeof TermUnit]


export const ScheduleStatus: {
  PENDING: 'PENDING',
  PARTIAL: 'PARTIAL',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE'
};

export type ScheduleStatus = (typeof ScheduleStatus)[keyof typeof ScheduleStatus]


export const RepaymentMethod: {
  CASH: 'CASH',
  TRANSFER: 'TRANSFER',
  POS: 'POS',
  MOBILE: 'MOBILE',
  USSD: 'USSD',
  OTHER: 'OTHER'
};

export type RepaymentMethod = (typeof RepaymentMethod)[keyof typeof RepaymentMethod]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type LoanStatus = $Enums.LoanStatus

export const LoanStatus: typeof $Enums.LoanStatus

export type TermUnit = $Enums.TermUnit

export const TermUnit: typeof $Enums.TermUnit

export type ScheduleStatus = $Enums.ScheduleStatus

export const ScheduleStatus: typeof $Enums.ScheduleStatus

export type RepaymentMethod = $Enums.RepaymentMethod

export const RepaymentMethod: typeof $Enums.RepaymentMethod

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Branches
 * const branches = await prisma.branch.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Branches
   * const branches = await prisma.branch.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.branch`: Exposes CRUD operations for the **Branch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Branches
    * const branches = await prisma.branch.findMany()
    * ```
    */
  get branch(): Prisma.BranchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.loanType`: Exposes CRUD operations for the **LoanType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LoanTypes
    * const loanTypes = await prisma.loanType.findMany()
    * ```
    */
  get loanType(): Prisma.LoanTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.loan`: Exposes CRUD operations for the **Loan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Loans
    * const loans = await prisma.loan.findMany()
    * ```
    */
  get loan(): Prisma.LoanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.repaymentScheduleItem`: Exposes CRUD operations for the **RepaymentScheduleItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RepaymentScheduleItems
    * const repaymentScheduleItems = await prisma.repaymentScheduleItem.findMany()
    * ```
    */
  get repaymentScheduleItem(): Prisma.RepaymentScheduleItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.repayment`: Exposes CRUD operations for the **Repayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Repayments
    * const repayments = await prisma.repayment.findMany()
    * ```
    */
  get repayment(): Prisma.RepaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.repaymentAllocation`: Exposes CRUD operations for the **RepaymentAllocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RepaymentAllocations
    * const repaymentAllocations = await prisma.repaymentAllocation.findMany()
    * ```
    */
  get repaymentAllocation(): Prisma.RepaymentAllocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.loanAssignmentHistory`: Exposes CRUD operations for the **LoanAssignmentHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LoanAssignmentHistories
    * const loanAssignmentHistories = await prisma.loanAssignmentHistory.findMany()
    * ```
    */
  get loanAssignmentHistory(): Prisma.LoanAssignmentHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerReassignment`: Exposes CRUD operations for the **CustomerReassignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerReassignments
    * const customerReassignments = await prisma.customerReassignment.findMany()
    * ```
    */
  get customerReassignment(): Prisma.CustomerReassignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documentType`: Exposes CRUD operations for the **DocumentType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentTypes
    * const documentTypes = await prisma.documentType.findMany()
    * ```
    */
  get documentType(): Prisma.DocumentTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerDocument`: Exposes CRUD operations for the **CustomerDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerDocuments
    * const customerDocuments = await prisma.customerDocument.findMany()
    * ```
    */
  get customerDocument(): Prisma.CustomerDocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.loanDocument`: Exposes CRUD operations for the **LoanDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LoanDocuments
    * const loanDocuments = await prisma.loanDocument.findMany()
    * ```
    */
  get loanDocument(): Prisma.LoanDocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staffSession`: Exposes CRUD operations for the **StaffSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaffSessions
    * const staffSessions = await prisma.staffSession.findMany()
    * ```
    */
  get staffSession(): Prisma.StaffSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Branch: 'Branch',
    User: 'User',
    Customer: 'Customer',
    LoanType: 'LoanType',
    Loan: 'Loan',
    RepaymentScheduleItem: 'RepaymentScheduleItem',
    Repayment: 'Repayment',
    RepaymentAllocation: 'RepaymentAllocation',
    LoanAssignmentHistory: 'LoanAssignmentHistory',
    CustomerReassignment: 'CustomerReassignment',
    DocumentType: 'DocumentType',
    CustomerDocument: 'CustomerDocument',
    LoanDocument: 'LoanDocument',
    StaffSession: 'StaffSession',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "branch" | "user" | "customer" | "loanType" | "loan" | "repaymentScheduleItem" | "repayment" | "repaymentAllocation" | "loanAssignmentHistory" | "customerReassignment" | "documentType" | "customerDocument" | "loanDocument" | "staffSession" | "auditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Branch: {
        payload: Prisma.$BranchPayload<ExtArgs>
        fields: Prisma.BranchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BranchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BranchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          findFirst: {
            args: Prisma.BranchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BranchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          findMany: {
            args: Prisma.BranchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>[]
          }
          create: {
            args: Prisma.BranchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          createMany: {
            args: Prisma.BranchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BranchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>[]
          }
          delete: {
            args: Prisma.BranchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          update: {
            args: Prisma.BranchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          deleteMany: {
            args: Prisma.BranchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BranchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BranchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>[]
          }
          upsert: {
            args: Prisma.BranchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          aggregate: {
            args: Prisma.BranchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBranch>
          }
          groupBy: {
            args: Prisma.BranchGroupByArgs<ExtArgs>
            result: $Utils.Optional<BranchGroupByOutputType>[]
          }
          count: {
            args: Prisma.BranchCountArgs<ExtArgs>
            result: $Utils.Optional<BranchCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      LoanType: {
        payload: Prisma.$LoanTypePayload<ExtArgs>
        fields: Prisma.LoanTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoanTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoanTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanTypePayload>
          }
          findFirst: {
            args: Prisma.LoanTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoanTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanTypePayload>
          }
          findMany: {
            args: Prisma.LoanTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanTypePayload>[]
          }
          create: {
            args: Prisma.LoanTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanTypePayload>
          }
          createMany: {
            args: Prisma.LoanTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LoanTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanTypePayload>[]
          }
          delete: {
            args: Prisma.LoanTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanTypePayload>
          }
          update: {
            args: Prisma.LoanTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanTypePayload>
          }
          deleteMany: {
            args: Prisma.LoanTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LoanTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LoanTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanTypePayload>[]
          }
          upsert: {
            args: Prisma.LoanTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanTypePayload>
          }
          aggregate: {
            args: Prisma.LoanTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLoanType>
          }
          groupBy: {
            args: Prisma.LoanTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<LoanTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoanTypeCountArgs<ExtArgs>
            result: $Utils.Optional<LoanTypeCountAggregateOutputType> | number
          }
        }
      }
      Loan: {
        payload: Prisma.$LoanPayload<ExtArgs>
        fields: Prisma.LoanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          findFirst: {
            args: Prisma.LoanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          findMany: {
            args: Prisma.LoanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>[]
          }
          create: {
            args: Prisma.LoanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          createMany: {
            args: Prisma.LoanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LoanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>[]
          }
          delete: {
            args: Prisma.LoanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          update: {
            args: Prisma.LoanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          deleteMany: {
            args: Prisma.LoanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LoanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LoanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>[]
          }
          upsert: {
            args: Prisma.LoanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          aggregate: {
            args: Prisma.LoanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLoan>
          }
          groupBy: {
            args: Prisma.LoanGroupByArgs<ExtArgs>
            result: $Utils.Optional<LoanGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoanCountArgs<ExtArgs>
            result: $Utils.Optional<LoanCountAggregateOutputType> | number
          }
        }
      }
      RepaymentScheduleItem: {
        payload: Prisma.$RepaymentScheduleItemPayload<ExtArgs>
        fields: Prisma.RepaymentScheduleItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RepaymentScheduleItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentScheduleItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RepaymentScheduleItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentScheduleItemPayload>
          }
          findFirst: {
            args: Prisma.RepaymentScheduleItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentScheduleItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RepaymentScheduleItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentScheduleItemPayload>
          }
          findMany: {
            args: Prisma.RepaymentScheduleItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentScheduleItemPayload>[]
          }
          create: {
            args: Prisma.RepaymentScheduleItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentScheduleItemPayload>
          }
          createMany: {
            args: Prisma.RepaymentScheduleItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RepaymentScheduleItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentScheduleItemPayload>[]
          }
          delete: {
            args: Prisma.RepaymentScheduleItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentScheduleItemPayload>
          }
          update: {
            args: Prisma.RepaymentScheduleItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentScheduleItemPayload>
          }
          deleteMany: {
            args: Prisma.RepaymentScheduleItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RepaymentScheduleItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RepaymentScheduleItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentScheduleItemPayload>[]
          }
          upsert: {
            args: Prisma.RepaymentScheduleItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentScheduleItemPayload>
          }
          aggregate: {
            args: Prisma.RepaymentScheduleItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRepaymentScheduleItem>
          }
          groupBy: {
            args: Prisma.RepaymentScheduleItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<RepaymentScheduleItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.RepaymentScheduleItemCountArgs<ExtArgs>
            result: $Utils.Optional<RepaymentScheduleItemCountAggregateOutputType> | number
          }
        }
      }
      Repayment: {
        payload: Prisma.$RepaymentPayload<ExtArgs>
        fields: Prisma.RepaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RepaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RepaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentPayload>
          }
          findFirst: {
            args: Prisma.RepaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RepaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentPayload>
          }
          findMany: {
            args: Prisma.RepaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentPayload>[]
          }
          create: {
            args: Prisma.RepaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentPayload>
          }
          createMany: {
            args: Prisma.RepaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RepaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentPayload>[]
          }
          delete: {
            args: Prisma.RepaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentPayload>
          }
          update: {
            args: Prisma.RepaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentPayload>
          }
          deleteMany: {
            args: Prisma.RepaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RepaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RepaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentPayload>[]
          }
          upsert: {
            args: Prisma.RepaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentPayload>
          }
          aggregate: {
            args: Prisma.RepaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRepayment>
          }
          groupBy: {
            args: Prisma.RepaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<RepaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.RepaymentCountArgs<ExtArgs>
            result: $Utils.Optional<RepaymentCountAggregateOutputType> | number
          }
        }
      }
      RepaymentAllocation: {
        payload: Prisma.$RepaymentAllocationPayload<ExtArgs>
        fields: Prisma.RepaymentAllocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RepaymentAllocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentAllocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RepaymentAllocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentAllocationPayload>
          }
          findFirst: {
            args: Prisma.RepaymentAllocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentAllocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RepaymentAllocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentAllocationPayload>
          }
          findMany: {
            args: Prisma.RepaymentAllocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentAllocationPayload>[]
          }
          create: {
            args: Prisma.RepaymentAllocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentAllocationPayload>
          }
          createMany: {
            args: Prisma.RepaymentAllocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RepaymentAllocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentAllocationPayload>[]
          }
          delete: {
            args: Prisma.RepaymentAllocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentAllocationPayload>
          }
          update: {
            args: Prisma.RepaymentAllocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentAllocationPayload>
          }
          deleteMany: {
            args: Prisma.RepaymentAllocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RepaymentAllocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RepaymentAllocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentAllocationPayload>[]
          }
          upsert: {
            args: Prisma.RepaymentAllocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepaymentAllocationPayload>
          }
          aggregate: {
            args: Prisma.RepaymentAllocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRepaymentAllocation>
          }
          groupBy: {
            args: Prisma.RepaymentAllocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<RepaymentAllocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.RepaymentAllocationCountArgs<ExtArgs>
            result: $Utils.Optional<RepaymentAllocationCountAggregateOutputType> | number
          }
        }
      }
      LoanAssignmentHistory: {
        payload: Prisma.$LoanAssignmentHistoryPayload<ExtArgs>
        fields: Prisma.LoanAssignmentHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoanAssignmentHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanAssignmentHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoanAssignmentHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanAssignmentHistoryPayload>
          }
          findFirst: {
            args: Prisma.LoanAssignmentHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanAssignmentHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoanAssignmentHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanAssignmentHistoryPayload>
          }
          findMany: {
            args: Prisma.LoanAssignmentHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanAssignmentHistoryPayload>[]
          }
          create: {
            args: Prisma.LoanAssignmentHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanAssignmentHistoryPayload>
          }
          createMany: {
            args: Prisma.LoanAssignmentHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LoanAssignmentHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanAssignmentHistoryPayload>[]
          }
          delete: {
            args: Prisma.LoanAssignmentHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanAssignmentHistoryPayload>
          }
          update: {
            args: Prisma.LoanAssignmentHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanAssignmentHistoryPayload>
          }
          deleteMany: {
            args: Prisma.LoanAssignmentHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LoanAssignmentHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LoanAssignmentHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanAssignmentHistoryPayload>[]
          }
          upsert: {
            args: Prisma.LoanAssignmentHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanAssignmentHistoryPayload>
          }
          aggregate: {
            args: Prisma.LoanAssignmentHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLoanAssignmentHistory>
          }
          groupBy: {
            args: Prisma.LoanAssignmentHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<LoanAssignmentHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoanAssignmentHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<LoanAssignmentHistoryCountAggregateOutputType> | number
          }
        }
      }
      CustomerReassignment: {
        payload: Prisma.$CustomerReassignmentPayload<ExtArgs>
        fields: Prisma.CustomerReassignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerReassignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerReassignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerReassignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerReassignmentPayload>
          }
          findFirst: {
            args: Prisma.CustomerReassignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerReassignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerReassignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerReassignmentPayload>
          }
          findMany: {
            args: Prisma.CustomerReassignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerReassignmentPayload>[]
          }
          create: {
            args: Prisma.CustomerReassignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerReassignmentPayload>
          }
          createMany: {
            args: Prisma.CustomerReassignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerReassignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerReassignmentPayload>[]
          }
          delete: {
            args: Prisma.CustomerReassignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerReassignmentPayload>
          }
          update: {
            args: Prisma.CustomerReassignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerReassignmentPayload>
          }
          deleteMany: {
            args: Prisma.CustomerReassignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerReassignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerReassignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerReassignmentPayload>[]
          }
          upsert: {
            args: Prisma.CustomerReassignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerReassignmentPayload>
          }
          aggregate: {
            args: Prisma.CustomerReassignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerReassignment>
          }
          groupBy: {
            args: Prisma.CustomerReassignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerReassignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerReassignmentCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerReassignmentCountAggregateOutputType> | number
          }
        }
      }
      DocumentType: {
        payload: Prisma.$DocumentTypePayload<ExtArgs>
        fields: Prisma.DocumentTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          findFirst: {
            args: Prisma.DocumentTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          findMany: {
            args: Prisma.DocumentTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>[]
          }
          create: {
            args: Prisma.DocumentTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          createMany: {
            args: Prisma.DocumentTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>[]
          }
          delete: {
            args: Prisma.DocumentTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          update: {
            args: Prisma.DocumentTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          deleteMany: {
            args: Prisma.DocumentTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>[]
          }
          upsert: {
            args: Prisma.DocumentTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          aggregate: {
            args: Prisma.DocumentTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentType>
          }
          groupBy: {
            args: Prisma.DocumentTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentTypeCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentTypeCountAggregateOutputType> | number
          }
        }
      }
      CustomerDocument: {
        payload: Prisma.$CustomerDocumentPayload<ExtArgs>
        fields: Prisma.CustomerDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDocumentPayload>
          }
          findFirst: {
            args: Prisma.CustomerDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDocumentPayload>
          }
          findMany: {
            args: Prisma.CustomerDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDocumentPayload>[]
          }
          create: {
            args: Prisma.CustomerDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDocumentPayload>
          }
          createMany: {
            args: Prisma.CustomerDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDocumentPayload>[]
          }
          delete: {
            args: Prisma.CustomerDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDocumentPayload>
          }
          update: {
            args: Prisma.CustomerDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDocumentPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerDocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDocumentPayload>[]
          }
          upsert: {
            args: Prisma.CustomerDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDocumentPayload>
          }
          aggregate: {
            args: Prisma.CustomerDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerDocument>
          }
          groupBy: {
            args: Prisma.CustomerDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerDocumentCountAggregateOutputType> | number
          }
        }
      }
      LoanDocument: {
        payload: Prisma.$LoanDocumentPayload<ExtArgs>
        fields: Prisma.LoanDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoanDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoanDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanDocumentPayload>
          }
          findFirst: {
            args: Prisma.LoanDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoanDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanDocumentPayload>
          }
          findMany: {
            args: Prisma.LoanDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanDocumentPayload>[]
          }
          create: {
            args: Prisma.LoanDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanDocumentPayload>
          }
          createMany: {
            args: Prisma.LoanDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LoanDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanDocumentPayload>[]
          }
          delete: {
            args: Prisma.LoanDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanDocumentPayload>
          }
          update: {
            args: Prisma.LoanDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanDocumentPayload>
          }
          deleteMany: {
            args: Prisma.LoanDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LoanDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LoanDocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanDocumentPayload>[]
          }
          upsert: {
            args: Prisma.LoanDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanDocumentPayload>
          }
          aggregate: {
            args: Prisma.LoanDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLoanDocument>
          }
          groupBy: {
            args: Prisma.LoanDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<LoanDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoanDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<LoanDocumentCountAggregateOutputType> | number
          }
        }
      }
      StaffSession: {
        payload: Prisma.$StaffSessionPayload<ExtArgs>
        fields: Prisma.StaffSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSessionPayload>
          }
          findFirst: {
            args: Prisma.StaffSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSessionPayload>
          }
          findMany: {
            args: Prisma.StaffSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSessionPayload>[]
          }
          create: {
            args: Prisma.StaffSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSessionPayload>
          }
          createMany: {
            args: Prisma.StaffSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSessionPayload>[]
          }
          delete: {
            args: Prisma.StaffSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSessionPayload>
          }
          update: {
            args: Prisma.StaffSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSessionPayload>
          }
          deleteMany: {
            args: Prisma.StaffSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StaffSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSessionPayload>[]
          }
          upsert: {
            args: Prisma.StaffSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSessionPayload>
          }
          aggregate: {
            args: Prisma.StaffSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaffSession>
          }
          groupBy: {
            args: Prisma.StaffSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffSessionCountArgs<ExtArgs>
            result: $Utils.Optional<StaffSessionCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    branch?: BranchOmit
    user?: UserOmit
    customer?: CustomerOmit
    loanType?: LoanTypeOmit
    loan?: LoanOmit
    repaymentScheduleItem?: RepaymentScheduleItemOmit
    repayment?: RepaymentOmit
    repaymentAllocation?: RepaymentAllocationOmit
    loanAssignmentHistory?: LoanAssignmentHistoryOmit
    customerReassignment?: CustomerReassignmentOmit
    documentType?: DocumentTypeOmit
    customerDocument?: CustomerDocumentOmit
    loanDocument?: LoanDocumentOmit
    staffSession?: StaffSessionOmit
    auditLog?: AuditLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BranchCountOutputType
   */

  export type BranchCountOutputType = {
    users: number
    customers: number
    loans: number
    oldLoanBranches: number
    newLoanBranches: number
    oldCustomerBranches: number
    newCustomerBranches: number
  }

  export type BranchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | BranchCountOutputTypeCountUsersArgs
    customers?: boolean | BranchCountOutputTypeCountCustomersArgs
    loans?: boolean | BranchCountOutputTypeCountLoansArgs
    oldLoanBranches?: boolean | BranchCountOutputTypeCountOldLoanBranchesArgs
    newLoanBranches?: boolean | BranchCountOutputTypeCountNewLoanBranchesArgs
    oldCustomerBranches?: boolean | BranchCountOutputTypeCountOldCustomerBranchesArgs
    newCustomerBranches?: boolean | BranchCountOutputTypeCountNewCustomerBranchesArgs
  }

  // Custom InputTypes
  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchCountOutputType
     */
    select?: BranchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountCustomersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountOldLoanBranchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanAssignmentHistoryWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountNewLoanBranchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanAssignmentHistoryWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountOldCustomerBranchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerReassignmentWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountNewCustomerBranchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerReassignmentWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdLoans: number
    assignedLoans: number
    currentCustomers: number
    repayments: number
    sessions: number
    auditLogs: number
    uploadedCustDocs: number
    uploadedLoanDocs: number
    oldLoanAssignments: number
    newLoanAssignments: number
    changedLoanAssignments: number
    oldCustomerAssignments: number
    newCustomerAssignments: number
    changedCustomerAssignments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdLoans?: boolean | UserCountOutputTypeCountCreatedLoansArgs
    assignedLoans?: boolean | UserCountOutputTypeCountAssignedLoansArgs
    currentCustomers?: boolean | UserCountOutputTypeCountCurrentCustomersArgs
    repayments?: boolean | UserCountOutputTypeCountRepaymentsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    uploadedCustDocs?: boolean | UserCountOutputTypeCountUploadedCustDocsArgs
    uploadedLoanDocs?: boolean | UserCountOutputTypeCountUploadedLoanDocsArgs
    oldLoanAssignments?: boolean | UserCountOutputTypeCountOldLoanAssignmentsArgs
    newLoanAssignments?: boolean | UserCountOutputTypeCountNewLoanAssignmentsArgs
    changedLoanAssignments?: boolean | UserCountOutputTypeCountChangedLoanAssignmentsArgs
    oldCustomerAssignments?: boolean | UserCountOutputTypeCountOldCustomerAssignmentsArgs
    newCustomerAssignments?: boolean | UserCountOutputTypeCountNewCustomerAssignmentsArgs
    changedCustomerAssignments?: boolean | UserCountOutputTypeCountChangedCustomerAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCurrentCustomersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRepaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepaymentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUploadedCustDocsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerDocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUploadedLoanDocsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanDocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOldLoanAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanAssignmentHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNewLoanAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanAssignmentHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChangedLoanAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanAssignmentHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOldCustomerAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerReassignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNewCustomerAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerReassignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChangedCustomerAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerReassignmentWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    documents: number
    loans: number
    reassignments: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | CustomerCountOutputTypeCountDocumentsArgs
    loans?: boolean | CustomerCountOutputTypeCountLoansArgs
    reassignments?: boolean | CustomerCountOutputTypeCountReassignmentsArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerDocumentWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountReassignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerReassignmentWhereInput
  }


  /**
   * Count Type LoanTypeCountOutputType
   */

  export type LoanTypeCountOutputType = {
    loans: number
  }

  export type LoanTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loans?: boolean | LoanTypeCountOutputTypeCountLoansArgs
  }

  // Custom InputTypes
  /**
   * LoanTypeCountOutputType without action
   */
  export type LoanTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanTypeCountOutputType
     */
    select?: LoanTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LoanTypeCountOutputType without action
   */
  export type LoanTypeCountOutputTypeCountLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanWhereInput
  }


  /**
   * Count Type LoanCountOutputType
   */

  export type LoanCountOutputType = {
    scheduleItems: number
    repayments: number
    documents: number
    assignmentHistory: number
  }

  export type LoanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scheduleItems?: boolean | LoanCountOutputTypeCountScheduleItemsArgs
    repayments?: boolean | LoanCountOutputTypeCountRepaymentsArgs
    documents?: boolean | LoanCountOutputTypeCountDocumentsArgs
    assignmentHistory?: boolean | LoanCountOutputTypeCountAssignmentHistoryArgs
  }

  // Custom InputTypes
  /**
   * LoanCountOutputType without action
   */
  export type LoanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanCountOutputType
     */
    select?: LoanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LoanCountOutputType without action
   */
  export type LoanCountOutputTypeCountScheduleItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepaymentScheduleItemWhereInput
  }

  /**
   * LoanCountOutputType without action
   */
  export type LoanCountOutputTypeCountRepaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepaymentWhereInput
  }

  /**
   * LoanCountOutputType without action
   */
  export type LoanCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanDocumentWhereInput
  }

  /**
   * LoanCountOutputType without action
   */
  export type LoanCountOutputTypeCountAssignmentHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanAssignmentHistoryWhereInput
  }


  /**
   * Count Type RepaymentScheduleItemCountOutputType
   */

  export type RepaymentScheduleItemCountOutputType = {
    allocations: number
  }

  export type RepaymentScheduleItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    allocations?: boolean | RepaymentScheduleItemCountOutputTypeCountAllocationsArgs
  }

  // Custom InputTypes
  /**
   * RepaymentScheduleItemCountOutputType without action
   */
  export type RepaymentScheduleItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentScheduleItemCountOutputType
     */
    select?: RepaymentScheduleItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RepaymentScheduleItemCountOutputType without action
   */
  export type RepaymentScheduleItemCountOutputTypeCountAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepaymentAllocationWhereInput
  }


  /**
   * Count Type RepaymentCountOutputType
   */

  export type RepaymentCountOutputType = {
    allocations: number
  }

  export type RepaymentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    allocations?: boolean | RepaymentCountOutputTypeCountAllocationsArgs
  }

  // Custom InputTypes
  /**
   * RepaymentCountOutputType without action
   */
  export type RepaymentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentCountOutputType
     */
    select?: RepaymentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RepaymentCountOutputType without action
   */
  export type RepaymentCountOutputTypeCountAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepaymentAllocationWhereInput
  }


  /**
   * Count Type DocumentTypeCountOutputType
   */

  export type DocumentTypeCountOutputType = {
    customerDocs: number
    loanDocs: number
  }

  export type DocumentTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customerDocs?: boolean | DocumentTypeCountOutputTypeCountCustomerDocsArgs
    loanDocs?: boolean | DocumentTypeCountOutputTypeCountLoanDocsArgs
  }

  // Custom InputTypes
  /**
   * DocumentTypeCountOutputType without action
   */
  export type DocumentTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTypeCountOutputType
     */
    select?: DocumentTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentTypeCountOutputType without action
   */
  export type DocumentTypeCountOutputTypeCountCustomerDocsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerDocumentWhereInput
  }

  /**
   * DocumentTypeCountOutputType without action
   */
  export type DocumentTypeCountOutputTypeCountLoanDocsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanDocumentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Branch
   */

  export type AggregateBranch = {
    _count: BranchCountAggregateOutputType | null
    _min: BranchMinAggregateOutputType | null
    _max: BranchMaxAggregateOutputType | null
  }

  export type BranchMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    managerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type BranchMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    managerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type BranchCountAggregateOutputType = {
    id: number
    name: number
    code: number
    managerId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type BranchMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    managerId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type BranchMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    managerId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type BranchCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    managerId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type BranchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Branch to aggregate.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Branches
    **/
    _count?: true | BranchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BranchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BranchMaxAggregateInputType
  }

  export type GetBranchAggregateType<T extends BranchAggregateArgs> = {
        [P in keyof T & keyof AggregateBranch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBranch[P]>
      : GetScalarType<T[P], AggregateBranch[P]>
  }




  export type BranchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BranchWhereInput
    orderBy?: BranchOrderByWithAggregationInput | BranchOrderByWithAggregationInput[]
    by: BranchScalarFieldEnum[] | BranchScalarFieldEnum
    having?: BranchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BranchCountAggregateInputType | true
    _min?: BranchMinAggregateInputType
    _max?: BranchMaxAggregateInputType
  }

  export type BranchGroupByOutputType = {
    id: string
    name: string
    code: string
    managerId: string | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: BranchCountAggregateOutputType | null
    _min: BranchMinAggregateOutputType | null
    _max: BranchMaxAggregateOutputType | null
  }

  type GetBranchGroupByPayload<T extends BranchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BranchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BranchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BranchGroupByOutputType[P]>
            : GetScalarType<T[P], BranchGroupByOutputType[P]>
        }
      >
    >


  export type BranchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    managerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    manager?: boolean | Branch$managerArgs<ExtArgs>
    users?: boolean | Branch$usersArgs<ExtArgs>
    customers?: boolean | Branch$customersArgs<ExtArgs>
    loans?: boolean | Branch$loansArgs<ExtArgs>
    oldLoanBranches?: boolean | Branch$oldLoanBranchesArgs<ExtArgs>
    newLoanBranches?: boolean | Branch$newLoanBranchesArgs<ExtArgs>
    oldCustomerBranches?: boolean | Branch$oldCustomerBranchesArgs<ExtArgs>
    newCustomerBranches?: boolean | Branch$newCustomerBranchesArgs<ExtArgs>
    _count?: boolean | BranchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["branch"]>

  export type BranchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    managerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    manager?: boolean | Branch$managerArgs<ExtArgs>
  }, ExtArgs["result"]["branch"]>

  export type BranchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    managerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    manager?: boolean | Branch$managerArgs<ExtArgs>
  }, ExtArgs["result"]["branch"]>

  export type BranchSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    managerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type BranchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "managerId" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["branch"]>
  export type BranchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manager?: boolean | Branch$managerArgs<ExtArgs>
    users?: boolean | Branch$usersArgs<ExtArgs>
    customers?: boolean | Branch$customersArgs<ExtArgs>
    loans?: boolean | Branch$loansArgs<ExtArgs>
    oldLoanBranches?: boolean | Branch$oldLoanBranchesArgs<ExtArgs>
    newLoanBranches?: boolean | Branch$newLoanBranchesArgs<ExtArgs>
    oldCustomerBranches?: boolean | Branch$oldCustomerBranchesArgs<ExtArgs>
    newCustomerBranches?: boolean | Branch$newCustomerBranchesArgs<ExtArgs>
    _count?: boolean | BranchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BranchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manager?: boolean | Branch$managerArgs<ExtArgs>
  }
  export type BranchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manager?: boolean | Branch$managerArgs<ExtArgs>
  }

  export type $BranchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Branch"
    objects: {
      manager: Prisma.$UserPayload<ExtArgs> | null
      users: Prisma.$UserPayload<ExtArgs>[]
      customers: Prisma.$CustomerPayload<ExtArgs>[]
      loans: Prisma.$LoanPayload<ExtArgs>[]
      oldLoanBranches: Prisma.$LoanAssignmentHistoryPayload<ExtArgs>[]
      newLoanBranches: Prisma.$LoanAssignmentHistoryPayload<ExtArgs>[]
      oldCustomerBranches: Prisma.$CustomerReassignmentPayload<ExtArgs>[]
      newCustomerBranches: Prisma.$CustomerReassignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      managerId: string | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["branch"]>
    composites: {}
  }

  type BranchGetPayload<S extends boolean | null | undefined | BranchDefaultArgs> = $Result.GetResult<Prisma.$BranchPayload, S>

  type BranchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BranchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BranchCountAggregateInputType | true
    }

  export interface BranchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Branch'], meta: { name: 'Branch' } }
    /**
     * Find zero or one Branch that matches the filter.
     * @param {BranchFindUniqueArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BranchFindUniqueArgs>(args: SelectSubset<T, BranchFindUniqueArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Branch that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BranchFindUniqueOrThrowArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BranchFindUniqueOrThrowArgs>(args: SelectSubset<T, BranchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Branch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindFirstArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BranchFindFirstArgs>(args?: SelectSubset<T, BranchFindFirstArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Branch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindFirstOrThrowArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BranchFindFirstOrThrowArgs>(args?: SelectSubset<T, BranchFindFirstOrThrowArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Branches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Branches
     * const branches = await prisma.branch.findMany()
     * 
     * // Get first 10 Branches
     * const branches = await prisma.branch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const branchWithIdOnly = await prisma.branch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BranchFindManyArgs>(args?: SelectSubset<T, BranchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Branch.
     * @param {BranchCreateArgs} args - Arguments to create a Branch.
     * @example
     * // Create one Branch
     * const Branch = await prisma.branch.create({
     *   data: {
     *     // ... data to create a Branch
     *   }
     * })
     * 
     */
    create<T extends BranchCreateArgs>(args: SelectSubset<T, BranchCreateArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Branches.
     * @param {BranchCreateManyArgs} args - Arguments to create many Branches.
     * @example
     * // Create many Branches
     * const branch = await prisma.branch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BranchCreateManyArgs>(args?: SelectSubset<T, BranchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Branches and returns the data saved in the database.
     * @param {BranchCreateManyAndReturnArgs} args - Arguments to create many Branches.
     * @example
     * // Create many Branches
     * const branch = await prisma.branch.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Branches and only return the `id`
     * const branchWithIdOnly = await prisma.branch.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BranchCreateManyAndReturnArgs>(args?: SelectSubset<T, BranchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Branch.
     * @param {BranchDeleteArgs} args - Arguments to delete one Branch.
     * @example
     * // Delete one Branch
     * const Branch = await prisma.branch.delete({
     *   where: {
     *     // ... filter to delete one Branch
     *   }
     * })
     * 
     */
    delete<T extends BranchDeleteArgs>(args: SelectSubset<T, BranchDeleteArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Branch.
     * @param {BranchUpdateArgs} args - Arguments to update one Branch.
     * @example
     * // Update one Branch
     * const branch = await prisma.branch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BranchUpdateArgs>(args: SelectSubset<T, BranchUpdateArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Branches.
     * @param {BranchDeleteManyArgs} args - Arguments to filter Branches to delete.
     * @example
     * // Delete a few Branches
     * const { count } = await prisma.branch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BranchDeleteManyArgs>(args?: SelectSubset<T, BranchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Branches
     * const branch = await prisma.branch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BranchUpdateManyArgs>(args: SelectSubset<T, BranchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Branches and returns the data updated in the database.
     * @param {BranchUpdateManyAndReturnArgs} args - Arguments to update many Branches.
     * @example
     * // Update many Branches
     * const branch = await prisma.branch.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Branches and only return the `id`
     * const branchWithIdOnly = await prisma.branch.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BranchUpdateManyAndReturnArgs>(args: SelectSubset<T, BranchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Branch.
     * @param {BranchUpsertArgs} args - Arguments to update or create a Branch.
     * @example
     * // Update or create a Branch
     * const branch = await prisma.branch.upsert({
     *   create: {
     *     // ... data to create a Branch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Branch we want to update
     *   }
     * })
     */
    upsert<T extends BranchUpsertArgs>(args: SelectSubset<T, BranchUpsertArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchCountArgs} args - Arguments to filter Branches to count.
     * @example
     * // Count the number of Branches
     * const count = await prisma.branch.count({
     *   where: {
     *     // ... the filter for the Branches we want to count
     *   }
     * })
    **/
    count<T extends BranchCountArgs>(
      args?: Subset<T, BranchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BranchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Branch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BranchAggregateArgs>(args: Subset<T, BranchAggregateArgs>): Prisma.PrismaPromise<GetBranchAggregateType<T>>

    /**
     * Group by Branch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BranchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BranchGroupByArgs['orderBy'] }
        : { orderBy?: BranchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BranchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBranchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Branch model
   */
  readonly fields: BranchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Branch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BranchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    manager<T extends Branch$managerArgs<ExtArgs> = {}>(args?: Subset<T, Branch$managerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    users<T extends Branch$usersArgs<ExtArgs> = {}>(args?: Subset<T, Branch$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    customers<T extends Branch$customersArgs<ExtArgs> = {}>(args?: Subset<T, Branch$customersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    loans<T extends Branch$loansArgs<ExtArgs> = {}>(args?: Subset<T, Branch$loansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    oldLoanBranches<T extends Branch$oldLoanBranchesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$oldLoanBranchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    newLoanBranches<T extends Branch$newLoanBranchesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$newLoanBranchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    oldCustomerBranches<T extends Branch$oldCustomerBranchesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$oldCustomerBranchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    newCustomerBranches<T extends Branch$newCustomerBranchesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$newCustomerBranchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Branch model
   */
  interface BranchFieldRefs {
    readonly id: FieldRef<"Branch", 'String'>
    readonly name: FieldRef<"Branch", 'String'>
    readonly code: FieldRef<"Branch", 'String'>
    readonly managerId: FieldRef<"Branch", 'String'>
    readonly createdAt: FieldRef<"Branch", 'DateTime'>
    readonly updatedAt: FieldRef<"Branch", 'DateTime'>
    readonly deletedAt: FieldRef<"Branch", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Branch findUnique
   */
  export type BranchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch findUniqueOrThrow
   */
  export type BranchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch findFirst
   */
  export type BranchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Branches.
     */
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch findFirstOrThrow
   */
  export type BranchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Branches.
     */
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch findMany
   */
  export type BranchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branches to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch create
   */
  export type BranchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The data needed to create a Branch.
     */
    data: XOR<BranchCreateInput, BranchUncheckedCreateInput>
  }

  /**
   * Branch createMany
   */
  export type BranchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Branches.
     */
    data: BranchCreateManyInput | BranchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Branch createManyAndReturn
   */
  export type BranchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * The data used to create many Branches.
     */
    data: BranchCreateManyInput | BranchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Branch update
   */
  export type BranchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The data needed to update a Branch.
     */
    data: XOR<BranchUpdateInput, BranchUncheckedUpdateInput>
    /**
     * Choose, which Branch to update.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch updateMany
   */
  export type BranchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Branches.
     */
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyInput>
    /**
     * Filter which Branches to update
     */
    where?: BranchWhereInput
    /**
     * Limit how many Branches to update.
     */
    limit?: number
  }

  /**
   * Branch updateManyAndReturn
   */
  export type BranchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * The data used to update Branches.
     */
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyInput>
    /**
     * Filter which Branches to update
     */
    where?: BranchWhereInput
    /**
     * Limit how many Branches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Branch upsert
   */
  export type BranchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The filter to search for the Branch to update in case it exists.
     */
    where: BranchWhereUniqueInput
    /**
     * In case the Branch found by the `where` argument doesn't exist, create a new Branch with this data.
     */
    create: XOR<BranchCreateInput, BranchUncheckedCreateInput>
    /**
     * In case the Branch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BranchUpdateInput, BranchUncheckedUpdateInput>
  }

  /**
   * Branch delete
   */
  export type BranchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter which Branch to delete.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch deleteMany
   */
  export type BranchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Branches to delete
     */
    where?: BranchWhereInput
    /**
     * Limit how many Branches to delete.
     */
    limit?: number
  }

  /**
   * Branch.manager
   */
  export type Branch$managerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Branch.users
   */
  export type Branch$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Branch.customers
   */
  export type Branch$customersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Branch.loans
   */
  export type Branch$loansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    where?: LoanWhereInput
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    cursor?: LoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * Branch.oldLoanBranches
   */
  export type Branch$oldLoanBranchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    where?: LoanAssignmentHistoryWhereInput
    orderBy?: LoanAssignmentHistoryOrderByWithRelationInput | LoanAssignmentHistoryOrderByWithRelationInput[]
    cursor?: LoanAssignmentHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanAssignmentHistoryScalarFieldEnum | LoanAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * Branch.newLoanBranches
   */
  export type Branch$newLoanBranchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    where?: LoanAssignmentHistoryWhereInput
    orderBy?: LoanAssignmentHistoryOrderByWithRelationInput | LoanAssignmentHistoryOrderByWithRelationInput[]
    cursor?: LoanAssignmentHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanAssignmentHistoryScalarFieldEnum | LoanAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * Branch.oldCustomerBranches
   */
  export type Branch$oldCustomerBranchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    where?: CustomerReassignmentWhereInput
    orderBy?: CustomerReassignmentOrderByWithRelationInput | CustomerReassignmentOrderByWithRelationInput[]
    cursor?: CustomerReassignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerReassignmentScalarFieldEnum | CustomerReassignmentScalarFieldEnum[]
  }

  /**
   * Branch.newCustomerBranches
   */
  export type Branch$newCustomerBranchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    where?: CustomerReassignmentWhereInput
    orderBy?: CustomerReassignmentOrderByWithRelationInput | CustomerReassignmentOrderByWithRelationInput[]
    cursor?: CustomerReassignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerReassignmentScalarFieldEnum | CustomerReassignmentScalarFieldEnum[]
  }

  /**
   * Branch without action
   */
  export type BranchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    branchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    branchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    role: number
    isActive: number
    branchId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    branchId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    branchId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    branchId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive: boolean
    branchId: string | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    branchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    branch?: boolean | User$branchArgs<ExtArgs>
    managedBranch?: boolean | User$managedBranchArgs<ExtArgs>
    createdLoans?: boolean | User$createdLoansArgs<ExtArgs>
    assignedLoans?: boolean | User$assignedLoansArgs<ExtArgs>
    currentCustomers?: boolean | User$currentCustomersArgs<ExtArgs>
    repayments?: boolean | User$repaymentsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    uploadedCustDocs?: boolean | User$uploadedCustDocsArgs<ExtArgs>
    uploadedLoanDocs?: boolean | User$uploadedLoanDocsArgs<ExtArgs>
    oldLoanAssignments?: boolean | User$oldLoanAssignmentsArgs<ExtArgs>
    newLoanAssignments?: boolean | User$newLoanAssignmentsArgs<ExtArgs>
    changedLoanAssignments?: boolean | User$changedLoanAssignmentsArgs<ExtArgs>
    oldCustomerAssignments?: boolean | User$oldCustomerAssignmentsArgs<ExtArgs>
    newCustomerAssignments?: boolean | User$newCustomerAssignmentsArgs<ExtArgs>
    changedCustomerAssignments?: boolean | User$changedCustomerAssignmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    branchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    branch?: boolean | User$branchArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    branchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    branch?: boolean | User$branchArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    branchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "passwordHash" | "role" | "isActive" | "branchId" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | User$branchArgs<ExtArgs>
    managedBranch?: boolean | User$managedBranchArgs<ExtArgs>
    createdLoans?: boolean | User$createdLoansArgs<ExtArgs>
    assignedLoans?: boolean | User$assignedLoansArgs<ExtArgs>
    currentCustomers?: boolean | User$currentCustomersArgs<ExtArgs>
    repayments?: boolean | User$repaymentsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    uploadedCustDocs?: boolean | User$uploadedCustDocsArgs<ExtArgs>
    uploadedLoanDocs?: boolean | User$uploadedLoanDocsArgs<ExtArgs>
    oldLoanAssignments?: boolean | User$oldLoanAssignmentsArgs<ExtArgs>
    newLoanAssignments?: boolean | User$newLoanAssignmentsArgs<ExtArgs>
    changedLoanAssignments?: boolean | User$changedLoanAssignmentsArgs<ExtArgs>
    oldCustomerAssignments?: boolean | User$oldCustomerAssignmentsArgs<ExtArgs>
    newCustomerAssignments?: boolean | User$newCustomerAssignmentsArgs<ExtArgs>
    changedCustomerAssignments?: boolean | User$changedCustomerAssignmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | User$branchArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | User$branchArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs> | null
      managedBranch: Prisma.$BranchPayload<ExtArgs> | null
      createdLoans: Prisma.$LoanPayload<ExtArgs>[]
      assignedLoans: Prisma.$LoanPayload<ExtArgs>[]
      currentCustomers: Prisma.$CustomerPayload<ExtArgs>[]
      repayments: Prisma.$RepaymentPayload<ExtArgs>[]
      sessions: Prisma.$StaffSessionPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      uploadedCustDocs: Prisma.$CustomerDocumentPayload<ExtArgs>[]
      uploadedLoanDocs: Prisma.$LoanDocumentPayload<ExtArgs>[]
      oldLoanAssignments: Prisma.$LoanAssignmentHistoryPayload<ExtArgs>[]
      newLoanAssignments: Prisma.$LoanAssignmentHistoryPayload<ExtArgs>[]
      changedLoanAssignments: Prisma.$LoanAssignmentHistoryPayload<ExtArgs>[]
      oldCustomerAssignments: Prisma.$CustomerReassignmentPayload<ExtArgs>[]
      newCustomerAssignments: Prisma.$CustomerReassignmentPayload<ExtArgs>[]
      changedCustomerAssignments: Prisma.$CustomerReassignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      role: $Enums.Role
      isActive: boolean
      branchId: string | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends User$branchArgs<ExtArgs> = {}>(args?: Subset<T, User$branchArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    managedBranch<T extends User$managedBranchArgs<ExtArgs> = {}>(args?: Subset<T, User$managedBranchArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdLoans<T extends User$createdLoansArgs<ExtArgs> = {}>(args?: Subset<T, User$createdLoansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedLoans<T extends User$assignedLoansArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedLoansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    currentCustomers<T extends User$currentCustomersArgs<ExtArgs> = {}>(args?: Subset<T, User$currentCustomersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    repayments<T extends User$repaymentsArgs<ExtArgs> = {}>(args?: Subset<T, User$repaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    uploadedCustDocs<T extends User$uploadedCustDocsArgs<ExtArgs> = {}>(args?: Subset<T, User$uploadedCustDocsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    uploadedLoanDocs<T extends User$uploadedLoanDocsArgs<ExtArgs> = {}>(args?: Subset<T, User$uploadedLoanDocsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    oldLoanAssignments<T extends User$oldLoanAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$oldLoanAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    newLoanAssignments<T extends User$newLoanAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$newLoanAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    changedLoanAssignments<T extends User$changedLoanAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$changedLoanAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    oldCustomerAssignments<T extends User$oldCustomerAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$oldCustomerAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    newCustomerAssignments<T extends User$newCustomerAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$newCustomerAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    changedCustomerAssignments<T extends User$changedCustomerAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$changedCustomerAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly branchId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly deletedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.branch
   */
  export type User$branchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
  }

  /**
   * User.managedBranch
   */
  export type User$managedBranchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
  }

  /**
   * User.createdLoans
   */
  export type User$createdLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    where?: LoanWhereInput
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    cursor?: LoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * User.assignedLoans
   */
  export type User$assignedLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    where?: LoanWhereInput
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    cursor?: LoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * User.currentCustomers
   */
  export type User$currentCustomersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * User.repayments
   */
  export type User$repaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repayment
     */
    select?: RepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repayment
     */
    omit?: RepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentInclude<ExtArgs> | null
    where?: RepaymentWhereInput
    orderBy?: RepaymentOrderByWithRelationInput | RepaymentOrderByWithRelationInput[]
    cursor?: RepaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepaymentScalarFieldEnum | RepaymentScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSession
     */
    select?: StaffSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSession
     */
    omit?: StaffSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffSessionInclude<ExtArgs> | null
    where?: StaffSessionWhereInput
    orderBy?: StaffSessionOrderByWithRelationInput | StaffSessionOrderByWithRelationInput[]
    cursor?: StaffSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffSessionScalarFieldEnum | StaffSessionScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.uploadedCustDocs
   */
  export type User$uploadedCustDocsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentInclude<ExtArgs> | null
    where?: CustomerDocumentWhereInput
    orderBy?: CustomerDocumentOrderByWithRelationInput | CustomerDocumentOrderByWithRelationInput[]
    cursor?: CustomerDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerDocumentScalarFieldEnum | CustomerDocumentScalarFieldEnum[]
  }

  /**
   * User.uploadedLoanDocs
   */
  export type User$uploadedLoanDocsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentInclude<ExtArgs> | null
    where?: LoanDocumentWhereInput
    orderBy?: LoanDocumentOrderByWithRelationInput | LoanDocumentOrderByWithRelationInput[]
    cursor?: LoanDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanDocumentScalarFieldEnum | LoanDocumentScalarFieldEnum[]
  }

  /**
   * User.oldLoanAssignments
   */
  export type User$oldLoanAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    where?: LoanAssignmentHistoryWhereInput
    orderBy?: LoanAssignmentHistoryOrderByWithRelationInput | LoanAssignmentHistoryOrderByWithRelationInput[]
    cursor?: LoanAssignmentHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanAssignmentHistoryScalarFieldEnum | LoanAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * User.newLoanAssignments
   */
  export type User$newLoanAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    where?: LoanAssignmentHistoryWhereInput
    orderBy?: LoanAssignmentHistoryOrderByWithRelationInput | LoanAssignmentHistoryOrderByWithRelationInput[]
    cursor?: LoanAssignmentHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanAssignmentHistoryScalarFieldEnum | LoanAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * User.changedLoanAssignments
   */
  export type User$changedLoanAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    where?: LoanAssignmentHistoryWhereInput
    orderBy?: LoanAssignmentHistoryOrderByWithRelationInput | LoanAssignmentHistoryOrderByWithRelationInput[]
    cursor?: LoanAssignmentHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanAssignmentHistoryScalarFieldEnum | LoanAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * User.oldCustomerAssignments
   */
  export type User$oldCustomerAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    where?: CustomerReassignmentWhereInput
    orderBy?: CustomerReassignmentOrderByWithRelationInput | CustomerReassignmentOrderByWithRelationInput[]
    cursor?: CustomerReassignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerReassignmentScalarFieldEnum | CustomerReassignmentScalarFieldEnum[]
  }

  /**
   * User.newCustomerAssignments
   */
  export type User$newCustomerAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    where?: CustomerReassignmentWhereInput
    orderBy?: CustomerReassignmentOrderByWithRelationInput | CustomerReassignmentOrderByWithRelationInput[]
    cursor?: CustomerReassignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerReassignmentScalarFieldEnum | CustomerReassignmentScalarFieldEnum[]
  }

  /**
   * User.changedCustomerAssignments
   */
  export type User$changedCustomerAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    where?: CustomerReassignmentWhereInput
    orderBy?: CustomerReassignmentOrderByWithRelationInput | CustomerReassignmentOrderByWithRelationInput[]
    cursor?: CustomerReassignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerReassignmentScalarFieldEnum | CustomerReassignmentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerMinAggregateOutputType = {
    id: string | null
    code: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    email: string | null
    address: string | null
    branchId: string | null
    currentOfficerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: string | null
    code: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    email: string | null
    address: string | null
    branchId: string | null
    currentOfficerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    code: number
    firstName: number
    lastName: number
    phone: number
    email: number
    address: number
    branchId: number
    currentOfficerId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type CustomerMinAggregateInputType = {
    id?: true
    code?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    address?: true
    branchId?: true
    currentOfficerId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    code?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    address?: true
    branchId?: true
    currentOfficerId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    code?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    address?: true
    branchId?: true
    currentOfficerId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: string
    code: string | null
    firstName: string
    lastName: string
    phone: string | null
    email: string | null
    address: string | null
    branchId: string
    currentOfficerId: string | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: CustomerCountAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
    branchId?: boolean
    currentOfficerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    currentOfficer?: boolean | Customer$currentOfficerArgs<ExtArgs>
    documents?: boolean | Customer$documentsArgs<ExtArgs>
    loans?: boolean | Customer$loansArgs<ExtArgs>
    reassignments?: boolean | Customer$reassignmentsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
    branchId?: boolean
    currentOfficerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    currentOfficer?: boolean | Customer$currentOfficerArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
    branchId?: boolean
    currentOfficerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    currentOfficer?: boolean | Customer$currentOfficerArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    code?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
    branchId?: boolean
    currentOfficerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "firstName" | "lastName" | "phone" | "email" | "address" | "branchId" | "currentOfficerId" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["customer"]>
  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    currentOfficer?: boolean | Customer$currentOfficerArgs<ExtArgs>
    documents?: boolean | Customer$documentsArgs<ExtArgs>
    loans?: boolean | Customer$loansArgs<ExtArgs>
    reassignments?: boolean | Customer$reassignmentsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    currentOfficer?: boolean | Customer$currentOfficerArgs<ExtArgs>
  }
  export type CustomerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    currentOfficer?: boolean | Customer$currentOfficerArgs<ExtArgs>
  }

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs>
      currentOfficer: Prisma.$UserPayload<ExtArgs> | null
      documents: Prisma.$CustomerDocumentPayload<ExtArgs>[]
      loans: Prisma.$LoanPayload<ExtArgs>[]
      reassignments: Prisma.$CustomerReassignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string | null
      firstName: string
      lastName: string
      phone: string | null
      email: string | null
      address: string | null
      branchId: string
      currentOfficerId: string | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    currentOfficer<T extends Customer$currentOfficerArgs<ExtArgs> = {}>(args?: Subset<T, Customer$currentOfficerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    documents<T extends Customer$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    loans<T extends Customer$loansArgs<ExtArgs> = {}>(args?: Subset<T, Customer$loansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reassignments<T extends Customer$reassignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$reassignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'String'>
    readonly code: FieldRef<"Customer", 'String'>
    readonly firstName: FieldRef<"Customer", 'String'>
    readonly lastName: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly address: FieldRef<"Customer", 'String'>
    readonly branchId: FieldRef<"Customer", 'String'>
    readonly currentOfficerId: FieldRef<"Customer", 'String'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
    readonly deletedAt: FieldRef<"Customer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer updateManyAndReturn
   */
  export type CustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer.currentOfficer
   */
  export type Customer$currentOfficerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Customer.documents
   */
  export type Customer$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentInclude<ExtArgs> | null
    where?: CustomerDocumentWhereInput
    orderBy?: CustomerDocumentOrderByWithRelationInput | CustomerDocumentOrderByWithRelationInput[]
    cursor?: CustomerDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerDocumentScalarFieldEnum | CustomerDocumentScalarFieldEnum[]
  }

  /**
   * Customer.loans
   */
  export type Customer$loansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    where?: LoanWhereInput
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    cursor?: LoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * Customer.reassignments
   */
  export type Customer$reassignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    where?: CustomerReassignmentWhereInput
    orderBy?: CustomerReassignmentOrderByWithRelationInput | CustomerReassignmentOrderByWithRelationInput[]
    cursor?: CustomerReassignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerReassignmentScalarFieldEnum | CustomerReassignmentScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model LoanType
   */

  export type AggregateLoanType = {
    _count: LoanTypeCountAggregateOutputType | null
    _avg: LoanTypeAvgAggregateOutputType | null
    _sum: LoanTypeSumAggregateOutputType | null
    _min: LoanTypeMinAggregateOutputType | null
    _max: LoanTypeMaxAggregateOutputType | null
  }

  export type LoanTypeAvgAggregateOutputType = {
    minAmount: Decimal | null
    maxAmount: Decimal | null
  }

  export type LoanTypeSumAggregateOutputType = {
    minAmount: Decimal | null
    maxAmount: Decimal | null
  }

  export type LoanTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    minAmount: Decimal | null
    maxAmount: Decimal | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type LoanTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    minAmount: Decimal | null
    maxAmount: Decimal | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type LoanTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    minAmount: number
    maxAmount: number
    isActive: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type LoanTypeAvgAggregateInputType = {
    minAmount?: true
    maxAmount?: true
  }

  export type LoanTypeSumAggregateInputType = {
    minAmount?: true
    maxAmount?: true
  }

  export type LoanTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    minAmount?: true
    maxAmount?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LoanTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    minAmount?: true
    maxAmount?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LoanTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    minAmount?: true
    maxAmount?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type LoanTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoanType to aggregate.
     */
    where?: LoanTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanTypes to fetch.
     */
    orderBy?: LoanTypeOrderByWithRelationInput | LoanTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoanTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LoanTypes
    **/
    _count?: true | LoanTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoanTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoanTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoanTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoanTypeMaxAggregateInputType
  }

  export type GetLoanTypeAggregateType<T extends LoanTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateLoanType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoanType[P]>
      : GetScalarType<T[P], AggregateLoanType[P]>
  }




  export type LoanTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanTypeWhereInput
    orderBy?: LoanTypeOrderByWithAggregationInput | LoanTypeOrderByWithAggregationInput[]
    by: LoanTypeScalarFieldEnum[] | LoanTypeScalarFieldEnum
    having?: LoanTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoanTypeCountAggregateInputType | true
    _avg?: LoanTypeAvgAggregateInputType
    _sum?: LoanTypeSumAggregateInputType
    _min?: LoanTypeMinAggregateInputType
    _max?: LoanTypeMaxAggregateInputType
  }

  export type LoanTypeGroupByOutputType = {
    id: string
    name: string
    description: string | null
    minAmount: Decimal
    maxAmount: Decimal
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: LoanTypeCountAggregateOutputType | null
    _avg: LoanTypeAvgAggregateOutputType | null
    _sum: LoanTypeSumAggregateOutputType | null
    _min: LoanTypeMinAggregateOutputType | null
    _max: LoanTypeMaxAggregateOutputType | null
  }

  type GetLoanTypeGroupByPayload<T extends LoanTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoanTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoanTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoanTypeGroupByOutputType[P]>
            : GetScalarType<T[P], LoanTypeGroupByOutputType[P]>
        }
      >
    >


  export type LoanTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    minAmount?: boolean
    maxAmount?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    loans?: boolean | LoanType$loansArgs<ExtArgs>
    _count?: boolean | LoanTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loanType"]>

  export type LoanTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    minAmount?: boolean
    maxAmount?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["loanType"]>

  export type LoanTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    minAmount?: boolean
    maxAmount?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["loanType"]>

  export type LoanTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    minAmount?: boolean
    maxAmount?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type LoanTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "minAmount" | "maxAmount" | "isActive" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["loanType"]>
  export type LoanTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loans?: boolean | LoanType$loansArgs<ExtArgs>
    _count?: boolean | LoanTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LoanTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LoanTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LoanTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LoanType"
    objects: {
      loans: Prisma.$LoanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      minAmount: Prisma.Decimal
      maxAmount: Prisma.Decimal
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["loanType"]>
    composites: {}
  }

  type LoanTypeGetPayload<S extends boolean | null | undefined | LoanTypeDefaultArgs> = $Result.GetResult<Prisma.$LoanTypePayload, S>

  type LoanTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LoanTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LoanTypeCountAggregateInputType | true
    }

  export interface LoanTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LoanType'], meta: { name: 'LoanType' } }
    /**
     * Find zero or one LoanType that matches the filter.
     * @param {LoanTypeFindUniqueArgs} args - Arguments to find a LoanType
     * @example
     * // Get one LoanType
     * const loanType = await prisma.loanType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LoanTypeFindUniqueArgs>(args: SelectSubset<T, LoanTypeFindUniqueArgs<ExtArgs>>): Prisma__LoanTypeClient<$Result.GetResult<Prisma.$LoanTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LoanType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LoanTypeFindUniqueOrThrowArgs} args - Arguments to find a LoanType
     * @example
     * // Get one LoanType
     * const loanType = await prisma.loanType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LoanTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, LoanTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LoanTypeClient<$Result.GetResult<Prisma.$LoanTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LoanType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanTypeFindFirstArgs} args - Arguments to find a LoanType
     * @example
     * // Get one LoanType
     * const loanType = await prisma.loanType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LoanTypeFindFirstArgs>(args?: SelectSubset<T, LoanTypeFindFirstArgs<ExtArgs>>): Prisma__LoanTypeClient<$Result.GetResult<Prisma.$LoanTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LoanType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanTypeFindFirstOrThrowArgs} args - Arguments to find a LoanType
     * @example
     * // Get one LoanType
     * const loanType = await prisma.loanType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LoanTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, LoanTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__LoanTypeClient<$Result.GetResult<Prisma.$LoanTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LoanTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LoanTypes
     * const loanTypes = await prisma.loanType.findMany()
     * 
     * // Get first 10 LoanTypes
     * const loanTypes = await prisma.loanType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loanTypeWithIdOnly = await prisma.loanType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LoanTypeFindManyArgs>(args?: SelectSubset<T, LoanTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LoanType.
     * @param {LoanTypeCreateArgs} args - Arguments to create a LoanType.
     * @example
     * // Create one LoanType
     * const LoanType = await prisma.loanType.create({
     *   data: {
     *     // ... data to create a LoanType
     *   }
     * })
     * 
     */
    create<T extends LoanTypeCreateArgs>(args: SelectSubset<T, LoanTypeCreateArgs<ExtArgs>>): Prisma__LoanTypeClient<$Result.GetResult<Prisma.$LoanTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LoanTypes.
     * @param {LoanTypeCreateManyArgs} args - Arguments to create many LoanTypes.
     * @example
     * // Create many LoanTypes
     * const loanType = await prisma.loanType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LoanTypeCreateManyArgs>(args?: SelectSubset<T, LoanTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LoanTypes and returns the data saved in the database.
     * @param {LoanTypeCreateManyAndReturnArgs} args - Arguments to create many LoanTypes.
     * @example
     * // Create many LoanTypes
     * const loanType = await prisma.loanType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LoanTypes and only return the `id`
     * const loanTypeWithIdOnly = await prisma.loanType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LoanTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, LoanTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LoanType.
     * @param {LoanTypeDeleteArgs} args - Arguments to delete one LoanType.
     * @example
     * // Delete one LoanType
     * const LoanType = await prisma.loanType.delete({
     *   where: {
     *     // ... filter to delete one LoanType
     *   }
     * })
     * 
     */
    delete<T extends LoanTypeDeleteArgs>(args: SelectSubset<T, LoanTypeDeleteArgs<ExtArgs>>): Prisma__LoanTypeClient<$Result.GetResult<Prisma.$LoanTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LoanType.
     * @param {LoanTypeUpdateArgs} args - Arguments to update one LoanType.
     * @example
     * // Update one LoanType
     * const loanType = await prisma.loanType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LoanTypeUpdateArgs>(args: SelectSubset<T, LoanTypeUpdateArgs<ExtArgs>>): Prisma__LoanTypeClient<$Result.GetResult<Prisma.$LoanTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LoanTypes.
     * @param {LoanTypeDeleteManyArgs} args - Arguments to filter LoanTypes to delete.
     * @example
     * // Delete a few LoanTypes
     * const { count } = await prisma.loanType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LoanTypeDeleteManyArgs>(args?: SelectSubset<T, LoanTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoanTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LoanTypes
     * const loanType = await prisma.loanType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LoanTypeUpdateManyArgs>(args: SelectSubset<T, LoanTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoanTypes and returns the data updated in the database.
     * @param {LoanTypeUpdateManyAndReturnArgs} args - Arguments to update many LoanTypes.
     * @example
     * // Update many LoanTypes
     * const loanType = await prisma.loanType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LoanTypes and only return the `id`
     * const loanTypeWithIdOnly = await prisma.loanType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LoanTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, LoanTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LoanType.
     * @param {LoanTypeUpsertArgs} args - Arguments to update or create a LoanType.
     * @example
     * // Update or create a LoanType
     * const loanType = await prisma.loanType.upsert({
     *   create: {
     *     // ... data to create a LoanType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LoanType we want to update
     *   }
     * })
     */
    upsert<T extends LoanTypeUpsertArgs>(args: SelectSubset<T, LoanTypeUpsertArgs<ExtArgs>>): Prisma__LoanTypeClient<$Result.GetResult<Prisma.$LoanTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LoanTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanTypeCountArgs} args - Arguments to filter LoanTypes to count.
     * @example
     * // Count the number of LoanTypes
     * const count = await prisma.loanType.count({
     *   where: {
     *     // ... the filter for the LoanTypes we want to count
     *   }
     * })
    **/
    count<T extends LoanTypeCountArgs>(
      args?: Subset<T, LoanTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoanTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LoanType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoanTypeAggregateArgs>(args: Subset<T, LoanTypeAggregateArgs>): Prisma.PrismaPromise<GetLoanTypeAggregateType<T>>

    /**
     * Group by LoanType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoanTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoanTypeGroupByArgs['orderBy'] }
        : { orderBy?: LoanTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoanTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoanTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LoanType model
   */
  readonly fields: LoanTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LoanType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoanTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    loans<T extends LoanType$loansArgs<ExtArgs> = {}>(args?: Subset<T, LoanType$loansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LoanType model
   */
  interface LoanTypeFieldRefs {
    readonly id: FieldRef<"LoanType", 'String'>
    readonly name: FieldRef<"LoanType", 'String'>
    readonly description: FieldRef<"LoanType", 'String'>
    readonly minAmount: FieldRef<"LoanType", 'Decimal'>
    readonly maxAmount: FieldRef<"LoanType", 'Decimal'>
    readonly isActive: FieldRef<"LoanType", 'Boolean'>
    readonly createdAt: FieldRef<"LoanType", 'DateTime'>
    readonly updatedAt: FieldRef<"LoanType", 'DateTime'>
    readonly deletedAt: FieldRef<"LoanType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LoanType findUnique
   */
  export type LoanTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanType
     */
    omit?: LoanTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanTypeInclude<ExtArgs> | null
    /**
     * Filter, which LoanType to fetch.
     */
    where: LoanTypeWhereUniqueInput
  }

  /**
   * LoanType findUniqueOrThrow
   */
  export type LoanTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanType
     */
    omit?: LoanTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanTypeInclude<ExtArgs> | null
    /**
     * Filter, which LoanType to fetch.
     */
    where: LoanTypeWhereUniqueInput
  }

  /**
   * LoanType findFirst
   */
  export type LoanTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanType
     */
    omit?: LoanTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanTypeInclude<ExtArgs> | null
    /**
     * Filter, which LoanType to fetch.
     */
    where?: LoanTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanTypes to fetch.
     */
    orderBy?: LoanTypeOrderByWithRelationInput | LoanTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoanTypes.
     */
    cursor?: LoanTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoanTypes.
     */
    distinct?: LoanTypeScalarFieldEnum | LoanTypeScalarFieldEnum[]
  }

  /**
   * LoanType findFirstOrThrow
   */
  export type LoanTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanType
     */
    omit?: LoanTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanTypeInclude<ExtArgs> | null
    /**
     * Filter, which LoanType to fetch.
     */
    where?: LoanTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanTypes to fetch.
     */
    orderBy?: LoanTypeOrderByWithRelationInput | LoanTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoanTypes.
     */
    cursor?: LoanTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoanTypes.
     */
    distinct?: LoanTypeScalarFieldEnum | LoanTypeScalarFieldEnum[]
  }

  /**
   * LoanType findMany
   */
  export type LoanTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanType
     */
    omit?: LoanTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanTypeInclude<ExtArgs> | null
    /**
     * Filter, which LoanTypes to fetch.
     */
    where?: LoanTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanTypes to fetch.
     */
    orderBy?: LoanTypeOrderByWithRelationInput | LoanTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LoanTypes.
     */
    cursor?: LoanTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanTypes.
     */
    skip?: number
    distinct?: LoanTypeScalarFieldEnum | LoanTypeScalarFieldEnum[]
  }

  /**
   * LoanType create
   */
  export type LoanTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanType
     */
    omit?: LoanTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a LoanType.
     */
    data: XOR<LoanTypeCreateInput, LoanTypeUncheckedCreateInput>
  }

  /**
   * LoanType createMany
   */
  export type LoanTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LoanTypes.
     */
    data: LoanTypeCreateManyInput | LoanTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LoanType createManyAndReturn
   */
  export type LoanTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LoanType
     */
    omit?: LoanTypeOmit<ExtArgs> | null
    /**
     * The data used to create many LoanTypes.
     */
    data: LoanTypeCreateManyInput | LoanTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LoanType update
   */
  export type LoanTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanType
     */
    omit?: LoanTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a LoanType.
     */
    data: XOR<LoanTypeUpdateInput, LoanTypeUncheckedUpdateInput>
    /**
     * Choose, which LoanType to update.
     */
    where: LoanTypeWhereUniqueInput
  }

  /**
   * LoanType updateMany
   */
  export type LoanTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LoanTypes.
     */
    data: XOR<LoanTypeUpdateManyMutationInput, LoanTypeUncheckedUpdateManyInput>
    /**
     * Filter which LoanTypes to update
     */
    where?: LoanTypeWhereInput
    /**
     * Limit how many LoanTypes to update.
     */
    limit?: number
  }

  /**
   * LoanType updateManyAndReturn
   */
  export type LoanTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LoanType
     */
    omit?: LoanTypeOmit<ExtArgs> | null
    /**
     * The data used to update LoanTypes.
     */
    data: XOR<LoanTypeUpdateManyMutationInput, LoanTypeUncheckedUpdateManyInput>
    /**
     * Filter which LoanTypes to update
     */
    where?: LoanTypeWhereInput
    /**
     * Limit how many LoanTypes to update.
     */
    limit?: number
  }

  /**
   * LoanType upsert
   */
  export type LoanTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanType
     */
    omit?: LoanTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the LoanType to update in case it exists.
     */
    where: LoanTypeWhereUniqueInput
    /**
     * In case the LoanType found by the `where` argument doesn't exist, create a new LoanType with this data.
     */
    create: XOR<LoanTypeCreateInput, LoanTypeUncheckedCreateInput>
    /**
     * In case the LoanType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoanTypeUpdateInput, LoanTypeUncheckedUpdateInput>
  }

  /**
   * LoanType delete
   */
  export type LoanTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanType
     */
    omit?: LoanTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanTypeInclude<ExtArgs> | null
    /**
     * Filter which LoanType to delete.
     */
    where: LoanTypeWhereUniqueInput
  }

  /**
   * LoanType deleteMany
   */
  export type LoanTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoanTypes to delete
     */
    where?: LoanTypeWhereInput
    /**
     * Limit how many LoanTypes to delete.
     */
    limit?: number
  }

  /**
   * LoanType.loans
   */
  export type LoanType$loansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    where?: LoanWhereInput
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    cursor?: LoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * LoanType without action
   */
  export type LoanTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanType
     */
    omit?: LoanTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanTypeInclude<ExtArgs> | null
  }


  /**
   * Model Loan
   */

  export type AggregateLoan = {
    _count: LoanCountAggregateOutputType | null
    _avg: LoanAvgAggregateOutputType | null
    _sum: LoanSumAggregateOutputType | null
    _min: LoanMinAggregateOutputType | null
    _max: LoanMaxAggregateOutputType | null
  }

  export type LoanAvgAggregateOutputType = {
    principalAmount: Decimal | null
    termCount: number | null
    processingFeeAmount: Decimal | null
    penaltyFeePerDayAmount: Decimal | null
  }

  export type LoanSumAggregateOutputType = {
    principalAmount: Decimal | null
    termCount: number | null
    processingFeeAmount: Decimal | null
    penaltyFeePerDayAmount: Decimal | null
  }

  export type LoanMinAggregateOutputType = {
    id: string | null
    loanNumber: string | null
    customerId: string | null
    branchId: string | null
    loanTypeId: string | null
    principalAmount: Decimal | null
    currencyCode: string | null
    termCount: number | null
    termUnit: $Enums.TermUnit | null
    startDate: Date | null
    endDate: Date | null
    processingFeeAmount: Decimal | null
    processingFeeCollected: boolean | null
    penaltyFeePerDayAmount: Decimal | null
    status: $Enums.LoanStatus | null
    createdByUserId: string | null
    assignedOfficerId: string | null
    disbursedAt: Date | null
    closedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type LoanMaxAggregateOutputType = {
    id: string | null
    loanNumber: string | null
    customerId: string | null
    branchId: string | null
    loanTypeId: string | null
    principalAmount: Decimal | null
    currencyCode: string | null
    termCount: number | null
    termUnit: $Enums.TermUnit | null
    startDate: Date | null
    endDate: Date | null
    processingFeeAmount: Decimal | null
    processingFeeCollected: boolean | null
    penaltyFeePerDayAmount: Decimal | null
    status: $Enums.LoanStatus | null
    createdByUserId: string | null
    assignedOfficerId: string | null
    disbursedAt: Date | null
    closedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type LoanCountAggregateOutputType = {
    id: number
    loanNumber: number
    customerId: number
    branchId: number
    loanTypeId: number
    principalAmount: number
    currencyCode: number
    termCount: number
    termUnit: number
    startDate: number
    endDate: number
    processingFeeAmount: number
    processingFeeCollected: number
    penaltyFeePerDayAmount: number
    status: number
    createdByUserId: number
    assignedOfficerId: number
    disbursedAt: number
    closedAt: number
    notes: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type LoanAvgAggregateInputType = {
    principalAmount?: true
    termCount?: true
    processingFeeAmount?: true
    penaltyFeePerDayAmount?: true
  }

  export type LoanSumAggregateInputType = {
    principalAmount?: true
    termCount?: true
    processingFeeAmount?: true
    penaltyFeePerDayAmount?: true
  }

  export type LoanMinAggregateInputType = {
    id?: true
    loanNumber?: true
    customerId?: true
    branchId?: true
    loanTypeId?: true
    principalAmount?: true
    currencyCode?: true
    termCount?: true
    termUnit?: true
    startDate?: true
    endDate?: true
    processingFeeAmount?: true
    processingFeeCollected?: true
    penaltyFeePerDayAmount?: true
    status?: true
    createdByUserId?: true
    assignedOfficerId?: true
    disbursedAt?: true
    closedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LoanMaxAggregateInputType = {
    id?: true
    loanNumber?: true
    customerId?: true
    branchId?: true
    loanTypeId?: true
    principalAmount?: true
    currencyCode?: true
    termCount?: true
    termUnit?: true
    startDate?: true
    endDate?: true
    processingFeeAmount?: true
    processingFeeCollected?: true
    penaltyFeePerDayAmount?: true
    status?: true
    createdByUserId?: true
    assignedOfficerId?: true
    disbursedAt?: true
    closedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LoanCountAggregateInputType = {
    id?: true
    loanNumber?: true
    customerId?: true
    branchId?: true
    loanTypeId?: true
    principalAmount?: true
    currencyCode?: true
    termCount?: true
    termUnit?: true
    startDate?: true
    endDate?: true
    processingFeeAmount?: true
    processingFeeCollected?: true
    penaltyFeePerDayAmount?: true
    status?: true
    createdByUserId?: true
    assignedOfficerId?: true
    disbursedAt?: true
    closedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type LoanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Loan to aggregate.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Loans
    **/
    _count?: true | LoanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoanMaxAggregateInputType
  }

  export type GetLoanAggregateType<T extends LoanAggregateArgs> = {
        [P in keyof T & keyof AggregateLoan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoan[P]>
      : GetScalarType<T[P], AggregateLoan[P]>
  }




  export type LoanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanWhereInput
    orderBy?: LoanOrderByWithAggregationInput | LoanOrderByWithAggregationInput[]
    by: LoanScalarFieldEnum[] | LoanScalarFieldEnum
    having?: LoanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoanCountAggregateInputType | true
    _avg?: LoanAvgAggregateInputType
    _sum?: LoanSumAggregateInputType
    _min?: LoanMinAggregateInputType
    _max?: LoanMaxAggregateInputType
  }

  export type LoanGroupByOutputType = {
    id: string
    loanNumber: string
    customerId: string
    branchId: string
    loanTypeId: string | null
    principalAmount: Decimal
    currencyCode: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date
    endDate: Date | null
    processingFeeAmount: Decimal
    processingFeeCollected: boolean
    penaltyFeePerDayAmount: Decimal
    status: $Enums.LoanStatus
    createdByUserId: string
    assignedOfficerId: string
    disbursedAt: Date | null
    closedAt: Date | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: LoanCountAggregateOutputType | null
    _avg: LoanAvgAggregateOutputType | null
    _sum: LoanSumAggregateOutputType | null
    _min: LoanMinAggregateOutputType | null
    _max: LoanMaxAggregateOutputType | null
  }

  type GetLoanGroupByPayload<T extends LoanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoanGroupByOutputType[P]>
            : GetScalarType<T[P], LoanGroupByOutputType[P]>
        }
      >
    >


  export type LoanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanNumber?: boolean
    customerId?: boolean
    branchId?: boolean
    loanTypeId?: boolean
    principalAmount?: boolean
    currencyCode?: boolean
    termCount?: boolean
    termUnit?: boolean
    startDate?: boolean
    endDate?: boolean
    processingFeeAmount?: boolean
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount?: boolean
    status?: boolean
    createdByUserId?: boolean
    assignedOfficerId?: boolean
    disbursedAt?: boolean
    closedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    loanType?: boolean | Loan$loanTypeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedOfficer?: boolean | UserDefaultArgs<ExtArgs>
    scheduleItems?: boolean | Loan$scheduleItemsArgs<ExtArgs>
    repayments?: boolean | Loan$repaymentsArgs<ExtArgs>
    documents?: boolean | Loan$documentsArgs<ExtArgs>
    assignmentHistory?: boolean | Loan$assignmentHistoryArgs<ExtArgs>
    _count?: boolean | LoanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loan"]>

  export type LoanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanNumber?: boolean
    customerId?: boolean
    branchId?: boolean
    loanTypeId?: boolean
    principalAmount?: boolean
    currencyCode?: boolean
    termCount?: boolean
    termUnit?: boolean
    startDate?: boolean
    endDate?: boolean
    processingFeeAmount?: boolean
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount?: boolean
    status?: boolean
    createdByUserId?: boolean
    assignedOfficerId?: boolean
    disbursedAt?: boolean
    closedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    loanType?: boolean | Loan$loanTypeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedOfficer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loan"]>

  export type LoanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanNumber?: boolean
    customerId?: boolean
    branchId?: boolean
    loanTypeId?: boolean
    principalAmount?: boolean
    currencyCode?: boolean
    termCount?: boolean
    termUnit?: boolean
    startDate?: boolean
    endDate?: boolean
    processingFeeAmount?: boolean
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount?: boolean
    status?: boolean
    createdByUserId?: boolean
    assignedOfficerId?: boolean
    disbursedAt?: boolean
    closedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    loanType?: boolean | Loan$loanTypeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedOfficer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loan"]>

  export type LoanSelectScalar = {
    id?: boolean
    loanNumber?: boolean
    customerId?: boolean
    branchId?: boolean
    loanTypeId?: boolean
    principalAmount?: boolean
    currencyCode?: boolean
    termCount?: boolean
    termUnit?: boolean
    startDate?: boolean
    endDate?: boolean
    processingFeeAmount?: boolean
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount?: boolean
    status?: boolean
    createdByUserId?: boolean
    assignedOfficerId?: boolean
    disbursedAt?: boolean
    closedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type LoanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "loanNumber" | "customerId" | "branchId" | "loanTypeId" | "principalAmount" | "currencyCode" | "termCount" | "termUnit" | "startDate" | "endDate" | "processingFeeAmount" | "processingFeeCollected" | "penaltyFeePerDayAmount" | "status" | "createdByUserId" | "assignedOfficerId" | "disbursedAt" | "closedAt" | "notes" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["loan"]>
  export type LoanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    loanType?: boolean | Loan$loanTypeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedOfficer?: boolean | UserDefaultArgs<ExtArgs>
    scheduleItems?: boolean | Loan$scheduleItemsArgs<ExtArgs>
    repayments?: boolean | Loan$repaymentsArgs<ExtArgs>
    documents?: boolean | Loan$documentsArgs<ExtArgs>
    assignmentHistory?: boolean | Loan$assignmentHistoryArgs<ExtArgs>
    _count?: boolean | LoanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LoanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    loanType?: boolean | Loan$loanTypeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedOfficer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LoanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    loanType?: boolean | Loan$loanTypeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedOfficer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LoanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Loan"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      branch: Prisma.$BranchPayload<ExtArgs>
      loanType: Prisma.$LoanTypePayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs>
      assignedOfficer: Prisma.$UserPayload<ExtArgs>
      scheduleItems: Prisma.$RepaymentScheduleItemPayload<ExtArgs>[]
      repayments: Prisma.$RepaymentPayload<ExtArgs>[]
      documents: Prisma.$LoanDocumentPayload<ExtArgs>[]
      assignmentHistory: Prisma.$LoanAssignmentHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      loanNumber: string
      customerId: string
      branchId: string
      loanTypeId: string | null
      principalAmount: Prisma.Decimal
      currencyCode: string
      termCount: number
      termUnit: $Enums.TermUnit
      startDate: Date
      endDate: Date | null
      processingFeeAmount: Prisma.Decimal
      processingFeeCollected: boolean
      penaltyFeePerDayAmount: Prisma.Decimal
      status: $Enums.LoanStatus
      createdByUserId: string
      assignedOfficerId: string
      disbursedAt: Date | null
      closedAt: Date | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["loan"]>
    composites: {}
  }

  type LoanGetPayload<S extends boolean | null | undefined | LoanDefaultArgs> = $Result.GetResult<Prisma.$LoanPayload, S>

  type LoanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LoanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LoanCountAggregateInputType | true
    }

  export interface LoanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Loan'], meta: { name: 'Loan' } }
    /**
     * Find zero or one Loan that matches the filter.
     * @param {LoanFindUniqueArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LoanFindUniqueArgs>(args: SelectSubset<T, LoanFindUniqueArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Loan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LoanFindUniqueOrThrowArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LoanFindUniqueOrThrowArgs>(args: SelectSubset<T, LoanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Loan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanFindFirstArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LoanFindFirstArgs>(args?: SelectSubset<T, LoanFindFirstArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Loan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanFindFirstOrThrowArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LoanFindFirstOrThrowArgs>(args?: SelectSubset<T, LoanFindFirstOrThrowArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Loans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Loans
     * const loans = await prisma.loan.findMany()
     * 
     * // Get first 10 Loans
     * const loans = await prisma.loan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loanWithIdOnly = await prisma.loan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LoanFindManyArgs>(args?: SelectSubset<T, LoanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Loan.
     * @param {LoanCreateArgs} args - Arguments to create a Loan.
     * @example
     * // Create one Loan
     * const Loan = await prisma.loan.create({
     *   data: {
     *     // ... data to create a Loan
     *   }
     * })
     * 
     */
    create<T extends LoanCreateArgs>(args: SelectSubset<T, LoanCreateArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Loans.
     * @param {LoanCreateManyArgs} args - Arguments to create many Loans.
     * @example
     * // Create many Loans
     * const loan = await prisma.loan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LoanCreateManyArgs>(args?: SelectSubset<T, LoanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Loans and returns the data saved in the database.
     * @param {LoanCreateManyAndReturnArgs} args - Arguments to create many Loans.
     * @example
     * // Create many Loans
     * const loan = await prisma.loan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Loans and only return the `id`
     * const loanWithIdOnly = await prisma.loan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LoanCreateManyAndReturnArgs>(args?: SelectSubset<T, LoanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Loan.
     * @param {LoanDeleteArgs} args - Arguments to delete one Loan.
     * @example
     * // Delete one Loan
     * const Loan = await prisma.loan.delete({
     *   where: {
     *     // ... filter to delete one Loan
     *   }
     * })
     * 
     */
    delete<T extends LoanDeleteArgs>(args: SelectSubset<T, LoanDeleteArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Loan.
     * @param {LoanUpdateArgs} args - Arguments to update one Loan.
     * @example
     * // Update one Loan
     * const loan = await prisma.loan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LoanUpdateArgs>(args: SelectSubset<T, LoanUpdateArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Loans.
     * @param {LoanDeleteManyArgs} args - Arguments to filter Loans to delete.
     * @example
     * // Delete a few Loans
     * const { count } = await prisma.loan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LoanDeleteManyArgs>(args?: SelectSubset<T, LoanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Loans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Loans
     * const loan = await prisma.loan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LoanUpdateManyArgs>(args: SelectSubset<T, LoanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Loans and returns the data updated in the database.
     * @param {LoanUpdateManyAndReturnArgs} args - Arguments to update many Loans.
     * @example
     * // Update many Loans
     * const loan = await prisma.loan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Loans and only return the `id`
     * const loanWithIdOnly = await prisma.loan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LoanUpdateManyAndReturnArgs>(args: SelectSubset<T, LoanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Loan.
     * @param {LoanUpsertArgs} args - Arguments to update or create a Loan.
     * @example
     * // Update or create a Loan
     * const loan = await prisma.loan.upsert({
     *   create: {
     *     // ... data to create a Loan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Loan we want to update
     *   }
     * })
     */
    upsert<T extends LoanUpsertArgs>(args: SelectSubset<T, LoanUpsertArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Loans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanCountArgs} args - Arguments to filter Loans to count.
     * @example
     * // Count the number of Loans
     * const count = await prisma.loan.count({
     *   where: {
     *     // ... the filter for the Loans we want to count
     *   }
     * })
    **/
    count<T extends LoanCountArgs>(
      args?: Subset<T, LoanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Loan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoanAggregateArgs>(args: Subset<T, LoanAggregateArgs>): Prisma.PrismaPromise<GetLoanAggregateType<T>>

    /**
     * Group by Loan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoanGroupByArgs['orderBy'] }
        : { orderBy?: LoanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Loan model
   */
  readonly fields: LoanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Loan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    loanType<T extends Loan$loanTypeArgs<ExtArgs> = {}>(args?: Subset<T, Loan$loanTypeArgs<ExtArgs>>): Prisma__LoanTypeClient<$Result.GetResult<Prisma.$LoanTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignedOfficer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    scheduleItems<T extends Loan$scheduleItemsArgs<ExtArgs> = {}>(args?: Subset<T, Loan$scheduleItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentScheduleItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    repayments<T extends Loan$repaymentsArgs<ExtArgs> = {}>(args?: Subset<T, Loan$repaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends Loan$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Loan$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignmentHistory<T extends Loan$assignmentHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Loan$assignmentHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Loan model
   */
  interface LoanFieldRefs {
    readonly id: FieldRef<"Loan", 'String'>
    readonly loanNumber: FieldRef<"Loan", 'String'>
    readonly customerId: FieldRef<"Loan", 'String'>
    readonly branchId: FieldRef<"Loan", 'String'>
    readonly loanTypeId: FieldRef<"Loan", 'String'>
    readonly principalAmount: FieldRef<"Loan", 'Decimal'>
    readonly currencyCode: FieldRef<"Loan", 'String'>
    readonly termCount: FieldRef<"Loan", 'Int'>
    readonly termUnit: FieldRef<"Loan", 'TermUnit'>
    readonly startDate: FieldRef<"Loan", 'DateTime'>
    readonly endDate: FieldRef<"Loan", 'DateTime'>
    readonly processingFeeAmount: FieldRef<"Loan", 'Decimal'>
    readonly processingFeeCollected: FieldRef<"Loan", 'Boolean'>
    readonly penaltyFeePerDayAmount: FieldRef<"Loan", 'Decimal'>
    readonly status: FieldRef<"Loan", 'LoanStatus'>
    readonly createdByUserId: FieldRef<"Loan", 'String'>
    readonly assignedOfficerId: FieldRef<"Loan", 'String'>
    readonly disbursedAt: FieldRef<"Loan", 'DateTime'>
    readonly closedAt: FieldRef<"Loan", 'DateTime'>
    readonly notes: FieldRef<"Loan", 'String'>
    readonly createdAt: FieldRef<"Loan", 'DateTime'>
    readonly updatedAt: FieldRef<"Loan", 'DateTime'>
    readonly deletedAt: FieldRef<"Loan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Loan findUnique
   */
  export type LoanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loan to fetch.
     */
    where: LoanWhereUniqueInput
  }

  /**
   * Loan findUniqueOrThrow
   */
  export type LoanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loan to fetch.
     */
    where: LoanWhereUniqueInput
  }

  /**
   * Loan findFirst
   */
  export type LoanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loan to fetch.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loans.
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Loans.
     */
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * Loan findFirstOrThrow
   */
  export type LoanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loan to fetch.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loans.
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Loans.
     */
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * Loan findMany
   */
  export type LoanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loans to fetch.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Loans.
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * Loan create
   */
  export type LoanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * The data needed to create a Loan.
     */
    data: XOR<LoanCreateInput, LoanUncheckedCreateInput>
  }

  /**
   * Loan createMany
   */
  export type LoanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Loans.
     */
    data: LoanCreateManyInput | LoanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Loan createManyAndReturn
   */
  export type LoanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * The data used to create many Loans.
     */
    data: LoanCreateManyInput | LoanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Loan update
   */
  export type LoanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * The data needed to update a Loan.
     */
    data: XOR<LoanUpdateInput, LoanUncheckedUpdateInput>
    /**
     * Choose, which Loan to update.
     */
    where: LoanWhereUniqueInput
  }

  /**
   * Loan updateMany
   */
  export type LoanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Loans.
     */
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyInput>
    /**
     * Filter which Loans to update
     */
    where?: LoanWhereInput
    /**
     * Limit how many Loans to update.
     */
    limit?: number
  }

  /**
   * Loan updateManyAndReturn
   */
  export type LoanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * The data used to update Loans.
     */
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyInput>
    /**
     * Filter which Loans to update
     */
    where?: LoanWhereInput
    /**
     * Limit how many Loans to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Loan upsert
   */
  export type LoanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * The filter to search for the Loan to update in case it exists.
     */
    where: LoanWhereUniqueInput
    /**
     * In case the Loan found by the `where` argument doesn't exist, create a new Loan with this data.
     */
    create: XOR<LoanCreateInput, LoanUncheckedCreateInput>
    /**
     * In case the Loan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoanUpdateInput, LoanUncheckedUpdateInput>
  }

  /**
   * Loan delete
   */
  export type LoanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter which Loan to delete.
     */
    where: LoanWhereUniqueInput
  }

  /**
   * Loan deleteMany
   */
  export type LoanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Loans to delete
     */
    where?: LoanWhereInput
    /**
     * Limit how many Loans to delete.
     */
    limit?: number
  }

  /**
   * Loan.loanType
   */
  export type Loan$loanTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanType
     */
    omit?: LoanTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanTypeInclude<ExtArgs> | null
    where?: LoanTypeWhereInput
  }

  /**
   * Loan.scheduleItems
   */
  export type Loan$scheduleItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentScheduleItem
     */
    select?: RepaymentScheduleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentScheduleItem
     */
    omit?: RepaymentScheduleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleItemInclude<ExtArgs> | null
    where?: RepaymentScheduleItemWhereInput
    orderBy?: RepaymentScheduleItemOrderByWithRelationInput | RepaymentScheduleItemOrderByWithRelationInput[]
    cursor?: RepaymentScheduleItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepaymentScheduleItemScalarFieldEnum | RepaymentScheduleItemScalarFieldEnum[]
  }

  /**
   * Loan.repayments
   */
  export type Loan$repaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repayment
     */
    select?: RepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repayment
     */
    omit?: RepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentInclude<ExtArgs> | null
    where?: RepaymentWhereInput
    orderBy?: RepaymentOrderByWithRelationInput | RepaymentOrderByWithRelationInput[]
    cursor?: RepaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepaymentScalarFieldEnum | RepaymentScalarFieldEnum[]
  }

  /**
   * Loan.documents
   */
  export type Loan$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentInclude<ExtArgs> | null
    where?: LoanDocumentWhereInput
    orderBy?: LoanDocumentOrderByWithRelationInput | LoanDocumentOrderByWithRelationInput[]
    cursor?: LoanDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanDocumentScalarFieldEnum | LoanDocumentScalarFieldEnum[]
  }

  /**
   * Loan.assignmentHistory
   */
  export type Loan$assignmentHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    where?: LoanAssignmentHistoryWhereInput
    orderBy?: LoanAssignmentHistoryOrderByWithRelationInput | LoanAssignmentHistoryOrderByWithRelationInput[]
    cursor?: LoanAssignmentHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanAssignmentHistoryScalarFieldEnum | LoanAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * Loan without action
   */
  export type LoanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
  }


  /**
   * Model RepaymentScheduleItem
   */

  export type AggregateRepaymentScheduleItem = {
    _count: RepaymentScheduleItemCountAggregateOutputType | null
    _avg: RepaymentScheduleItemAvgAggregateOutputType | null
    _sum: RepaymentScheduleItemSumAggregateOutputType | null
    _min: RepaymentScheduleItemMinAggregateOutputType | null
    _max: RepaymentScheduleItemMaxAggregateOutputType | null
  }

  export type RepaymentScheduleItemAvgAggregateOutputType = {
    sequence: number | null
    principalDue: Decimal | null
    interestDue: Decimal | null
    feeDue: Decimal | null
    totalDue: Decimal | null
    paidAmount: Decimal | null
  }

  export type RepaymentScheduleItemSumAggregateOutputType = {
    sequence: number | null
    principalDue: Decimal | null
    interestDue: Decimal | null
    feeDue: Decimal | null
    totalDue: Decimal | null
    paidAmount: Decimal | null
  }

  export type RepaymentScheduleItemMinAggregateOutputType = {
    id: string | null
    loanId: string | null
    sequence: number | null
    dueDate: Date | null
    principalDue: Decimal | null
    interestDue: Decimal | null
    feeDue: Decimal | null
    totalDue: Decimal | null
    paidAmount: Decimal | null
    status: $Enums.ScheduleStatus | null
    closedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type RepaymentScheduleItemMaxAggregateOutputType = {
    id: string | null
    loanId: string | null
    sequence: number | null
    dueDate: Date | null
    principalDue: Decimal | null
    interestDue: Decimal | null
    feeDue: Decimal | null
    totalDue: Decimal | null
    paidAmount: Decimal | null
    status: $Enums.ScheduleStatus | null
    closedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type RepaymentScheduleItemCountAggregateOutputType = {
    id: number
    loanId: number
    sequence: number
    dueDate: number
    principalDue: number
    interestDue: number
    feeDue: number
    totalDue: number
    paidAmount: number
    status: number
    closedAt: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type RepaymentScheduleItemAvgAggregateInputType = {
    sequence?: true
    principalDue?: true
    interestDue?: true
    feeDue?: true
    totalDue?: true
    paidAmount?: true
  }

  export type RepaymentScheduleItemSumAggregateInputType = {
    sequence?: true
    principalDue?: true
    interestDue?: true
    feeDue?: true
    totalDue?: true
    paidAmount?: true
  }

  export type RepaymentScheduleItemMinAggregateInputType = {
    id?: true
    loanId?: true
    sequence?: true
    dueDate?: true
    principalDue?: true
    interestDue?: true
    feeDue?: true
    totalDue?: true
    paidAmount?: true
    status?: true
    closedAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type RepaymentScheduleItemMaxAggregateInputType = {
    id?: true
    loanId?: true
    sequence?: true
    dueDate?: true
    principalDue?: true
    interestDue?: true
    feeDue?: true
    totalDue?: true
    paidAmount?: true
    status?: true
    closedAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type RepaymentScheduleItemCountAggregateInputType = {
    id?: true
    loanId?: true
    sequence?: true
    dueDate?: true
    principalDue?: true
    interestDue?: true
    feeDue?: true
    totalDue?: true
    paidAmount?: true
    status?: true
    closedAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type RepaymentScheduleItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RepaymentScheduleItem to aggregate.
     */
    where?: RepaymentScheduleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepaymentScheduleItems to fetch.
     */
    orderBy?: RepaymentScheduleItemOrderByWithRelationInput | RepaymentScheduleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RepaymentScheduleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepaymentScheduleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepaymentScheduleItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RepaymentScheduleItems
    **/
    _count?: true | RepaymentScheduleItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RepaymentScheduleItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RepaymentScheduleItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RepaymentScheduleItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RepaymentScheduleItemMaxAggregateInputType
  }

  export type GetRepaymentScheduleItemAggregateType<T extends RepaymentScheduleItemAggregateArgs> = {
        [P in keyof T & keyof AggregateRepaymentScheduleItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRepaymentScheduleItem[P]>
      : GetScalarType<T[P], AggregateRepaymentScheduleItem[P]>
  }




  export type RepaymentScheduleItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepaymentScheduleItemWhereInput
    orderBy?: RepaymentScheduleItemOrderByWithAggregationInput | RepaymentScheduleItemOrderByWithAggregationInput[]
    by: RepaymentScheduleItemScalarFieldEnum[] | RepaymentScheduleItemScalarFieldEnum
    having?: RepaymentScheduleItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RepaymentScheduleItemCountAggregateInputType | true
    _avg?: RepaymentScheduleItemAvgAggregateInputType
    _sum?: RepaymentScheduleItemSumAggregateInputType
    _min?: RepaymentScheduleItemMinAggregateInputType
    _max?: RepaymentScheduleItemMaxAggregateInputType
  }

  export type RepaymentScheduleItemGroupByOutputType = {
    id: string
    loanId: string
    sequence: number
    dueDate: Date
    principalDue: Decimal
    interestDue: Decimal
    feeDue: Decimal
    totalDue: Decimal
    paidAmount: Decimal
    status: $Enums.ScheduleStatus
    closedAt: Date | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: RepaymentScheduleItemCountAggregateOutputType | null
    _avg: RepaymentScheduleItemAvgAggregateOutputType | null
    _sum: RepaymentScheduleItemSumAggregateOutputType | null
    _min: RepaymentScheduleItemMinAggregateOutputType | null
    _max: RepaymentScheduleItemMaxAggregateOutputType | null
  }

  type GetRepaymentScheduleItemGroupByPayload<T extends RepaymentScheduleItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RepaymentScheduleItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RepaymentScheduleItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RepaymentScheduleItemGroupByOutputType[P]>
            : GetScalarType<T[P], RepaymentScheduleItemGroupByOutputType[P]>
        }
      >
    >


  export type RepaymentScheduleItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanId?: boolean
    sequence?: boolean
    dueDate?: boolean
    principalDue?: boolean
    interestDue?: boolean
    feeDue?: boolean
    totalDue?: boolean
    paidAmount?: boolean
    status?: boolean
    closedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    allocations?: boolean | RepaymentScheduleItem$allocationsArgs<ExtArgs>
    _count?: boolean | RepaymentScheduleItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repaymentScheduleItem"]>

  export type RepaymentScheduleItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanId?: boolean
    sequence?: boolean
    dueDate?: boolean
    principalDue?: boolean
    interestDue?: boolean
    feeDue?: boolean
    totalDue?: boolean
    paidAmount?: boolean
    status?: boolean
    closedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    loan?: boolean | LoanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repaymentScheduleItem"]>

  export type RepaymentScheduleItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanId?: boolean
    sequence?: boolean
    dueDate?: boolean
    principalDue?: boolean
    interestDue?: boolean
    feeDue?: boolean
    totalDue?: boolean
    paidAmount?: boolean
    status?: boolean
    closedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    loan?: boolean | LoanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repaymentScheduleItem"]>

  export type RepaymentScheduleItemSelectScalar = {
    id?: boolean
    loanId?: boolean
    sequence?: boolean
    dueDate?: boolean
    principalDue?: boolean
    interestDue?: boolean
    feeDue?: boolean
    totalDue?: boolean
    paidAmount?: boolean
    status?: boolean
    closedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type RepaymentScheduleItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "loanId" | "sequence" | "dueDate" | "principalDue" | "interestDue" | "feeDue" | "totalDue" | "paidAmount" | "status" | "closedAt" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["repaymentScheduleItem"]>
  export type RepaymentScheduleItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    allocations?: boolean | RepaymentScheduleItem$allocationsArgs<ExtArgs>
    _count?: boolean | RepaymentScheduleItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RepaymentScheduleItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loan?: boolean | LoanDefaultArgs<ExtArgs>
  }
  export type RepaymentScheduleItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loan?: boolean | LoanDefaultArgs<ExtArgs>
  }

  export type $RepaymentScheduleItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RepaymentScheduleItem"
    objects: {
      loan: Prisma.$LoanPayload<ExtArgs>
      allocations: Prisma.$RepaymentAllocationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      loanId: string
      sequence: number
      dueDate: Date
      principalDue: Prisma.Decimal
      interestDue: Prisma.Decimal
      feeDue: Prisma.Decimal
      totalDue: Prisma.Decimal
      paidAmount: Prisma.Decimal
      status: $Enums.ScheduleStatus
      closedAt: Date | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["repaymentScheduleItem"]>
    composites: {}
  }

  type RepaymentScheduleItemGetPayload<S extends boolean | null | undefined | RepaymentScheduleItemDefaultArgs> = $Result.GetResult<Prisma.$RepaymentScheduleItemPayload, S>

  type RepaymentScheduleItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RepaymentScheduleItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RepaymentScheduleItemCountAggregateInputType | true
    }

  export interface RepaymentScheduleItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RepaymentScheduleItem'], meta: { name: 'RepaymentScheduleItem' } }
    /**
     * Find zero or one RepaymentScheduleItem that matches the filter.
     * @param {RepaymentScheduleItemFindUniqueArgs} args - Arguments to find a RepaymentScheduleItem
     * @example
     * // Get one RepaymentScheduleItem
     * const repaymentScheduleItem = await prisma.repaymentScheduleItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RepaymentScheduleItemFindUniqueArgs>(args: SelectSubset<T, RepaymentScheduleItemFindUniqueArgs<ExtArgs>>): Prisma__RepaymentScheduleItemClient<$Result.GetResult<Prisma.$RepaymentScheduleItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RepaymentScheduleItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RepaymentScheduleItemFindUniqueOrThrowArgs} args - Arguments to find a RepaymentScheduleItem
     * @example
     * // Get one RepaymentScheduleItem
     * const repaymentScheduleItem = await prisma.repaymentScheduleItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RepaymentScheduleItemFindUniqueOrThrowArgs>(args: SelectSubset<T, RepaymentScheduleItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RepaymentScheduleItemClient<$Result.GetResult<Prisma.$RepaymentScheduleItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RepaymentScheduleItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentScheduleItemFindFirstArgs} args - Arguments to find a RepaymentScheduleItem
     * @example
     * // Get one RepaymentScheduleItem
     * const repaymentScheduleItem = await prisma.repaymentScheduleItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RepaymentScheduleItemFindFirstArgs>(args?: SelectSubset<T, RepaymentScheduleItemFindFirstArgs<ExtArgs>>): Prisma__RepaymentScheduleItemClient<$Result.GetResult<Prisma.$RepaymentScheduleItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RepaymentScheduleItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentScheduleItemFindFirstOrThrowArgs} args - Arguments to find a RepaymentScheduleItem
     * @example
     * // Get one RepaymentScheduleItem
     * const repaymentScheduleItem = await prisma.repaymentScheduleItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RepaymentScheduleItemFindFirstOrThrowArgs>(args?: SelectSubset<T, RepaymentScheduleItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__RepaymentScheduleItemClient<$Result.GetResult<Prisma.$RepaymentScheduleItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RepaymentScheduleItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentScheduleItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RepaymentScheduleItems
     * const repaymentScheduleItems = await prisma.repaymentScheduleItem.findMany()
     * 
     * // Get first 10 RepaymentScheduleItems
     * const repaymentScheduleItems = await prisma.repaymentScheduleItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const repaymentScheduleItemWithIdOnly = await prisma.repaymentScheduleItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RepaymentScheduleItemFindManyArgs>(args?: SelectSubset<T, RepaymentScheduleItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentScheduleItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RepaymentScheduleItem.
     * @param {RepaymentScheduleItemCreateArgs} args - Arguments to create a RepaymentScheduleItem.
     * @example
     * // Create one RepaymentScheduleItem
     * const RepaymentScheduleItem = await prisma.repaymentScheduleItem.create({
     *   data: {
     *     // ... data to create a RepaymentScheduleItem
     *   }
     * })
     * 
     */
    create<T extends RepaymentScheduleItemCreateArgs>(args: SelectSubset<T, RepaymentScheduleItemCreateArgs<ExtArgs>>): Prisma__RepaymentScheduleItemClient<$Result.GetResult<Prisma.$RepaymentScheduleItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RepaymentScheduleItems.
     * @param {RepaymentScheduleItemCreateManyArgs} args - Arguments to create many RepaymentScheduleItems.
     * @example
     * // Create many RepaymentScheduleItems
     * const repaymentScheduleItem = await prisma.repaymentScheduleItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RepaymentScheduleItemCreateManyArgs>(args?: SelectSubset<T, RepaymentScheduleItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RepaymentScheduleItems and returns the data saved in the database.
     * @param {RepaymentScheduleItemCreateManyAndReturnArgs} args - Arguments to create many RepaymentScheduleItems.
     * @example
     * // Create many RepaymentScheduleItems
     * const repaymentScheduleItem = await prisma.repaymentScheduleItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RepaymentScheduleItems and only return the `id`
     * const repaymentScheduleItemWithIdOnly = await prisma.repaymentScheduleItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RepaymentScheduleItemCreateManyAndReturnArgs>(args?: SelectSubset<T, RepaymentScheduleItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentScheduleItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RepaymentScheduleItem.
     * @param {RepaymentScheduleItemDeleteArgs} args - Arguments to delete one RepaymentScheduleItem.
     * @example
     * // Delete one RepaymentScheduleItem
     * const RepaymentScheduleItem = await prisma.repaymentScheduleItem.delete({
     *   where: {
     *     // ... filter to delete one RepaymentScheduleItem
     *   }
     * })
     * 
     */
    delete<T extends RepaymentScheduleItemDeleteArgs>(args: SelectSubset<T, RepaymentScheduleItemDeleteArgs<ExtArgs>>): Prisma__RepaymentScheduleItemClient<$Result.GetResult<Prisma.$RepaymentScheduleItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RepaymentScheduleItem.
     * @param {RepaymentScheduleItemUpdateArgs} args - Arguments to update one RepaymentScheduleItem.
     * @example
     * // Update one RepaymentScheduleItem
     * const repaymentScheduleItem = await prisma.repaymentScheduleItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RepaymentScheduleItemUpdateArgs>(args: SelectSubset<T, RepaymentScheduleItemUpdateArgs<ExtArgs>>): Prisma__RepaymentScheduleItemClient<$Result.GetResult<Prisma.$RepaymentScheduleItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RepaymentScheduleItems.
     * @param {RepaymentScheduleItemDeleteManyArgs} args - Arguments to filter RepaymentScheduleItems to delete.
     * @example
     * // Delete a few RepaymentScheduleItems
     * const { count } = await prisma.repaymentScheduleItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RepaymentScheduleItemDeleteManyArgs>(args?: SelectSubset<T, RepaymentScheduleItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RepaymentScheduleItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentScheduleItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RepaymentScheduleItems
     * const repaymentScheduleItem = await prisma.repaymentScheduleItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RepaymentScheduleItemUpdateManyArgs>(args: SelectSubset<T, RepaymentScheduleItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RepaymentScheduleItems and returns the data updated in the database.
     * @param {RepaymentScheduleItemUpdateManyAndReturnArgs} args - Arguments to update many RepaymentScheduleItems.
     * @example
     * // Update many RepaymentScheduleItems
     * const repaymentScheduleItem = await prisma.repaymentScheduleItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RepaymentScheduleItems and only return the `id`
     * const repaymentScheduleItemWithIdOnly = await prisma.repaymentScheduleItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RepaymentScheduleItemUpdateManyAndReturnArgs>(args: SelectSubset<T, RepaymentScheduleItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentScheduleItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RepaymentScheduleItem.
     * @param {RepaymentScheduleItemUpsertArgs} args - Arguments to update or create a RepaymentScheduleItem.
     * @example
     * // Update or create a RepaymentScheduleItem
     * const repaymentScheduleItem = await prisma.repaymentScheduleItem.upsert({
     *   create: {
     *     // ... data to create a RepaymentScheduleItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RepaymentScheduleItem we want to update
     *   }
     * })
     */
    upsert<T extends RepaymentScheduleItemUpsertArgs>(args: SelectSubset<T, RepaymentScheduleItemUpsertArgs<ExtArgs>>): Prisma__RepaymentScheduleItemClient<$Result.GetResult<Prisma.$RepaymentScheduleItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RepaymentScheduleItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentScheduleItemCountArgs} args - Arguments to filter RepaymentScheduleItems to count.
     * @example
     * // Count the number of RepaymentScheduleItems
     * const count = await prisma.repaymentScheduleItem.count({
     *   where: {
     *     // ... the filter for the RepaymentScheduleItems we want to count
     *   }
     * })
    **/
    count<T extends RepaymentScheduleItemCountArgs>(
      args?: Subset<T, RepaymentScheduleItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RepaymentScheduleItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RepaymentScheduleItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentScheduleItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RepaymentScheduleItemAggregateArgs>(args: Subset<T, RepaymentScheduleItemAggregateArgs>): Prisma.PrismaPromise<GetRepaymentScheduleItemAggregateType<T>>

    /**
     * Group by RepaymentScheduleItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentScheduleItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RepaymentScheduleItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RepaymentScheduleItemGroupByArgs['orderBy'] }
        : { orderBy?: RepaymentScheduleItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RepaymentScheduleItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRepaymentScheduleItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RepaymentScheduleItem model
   */
  readonly fields: RepaymentScheduleItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RepaymentScheduleItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RepaymentScheduleItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    loan<T extends LoanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LoanDefaultArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    allocations<T extends RepaymentScheduleItem$allocationsArgs<ExtArgs> = {}>(args?: Subset<T, RepaymentScheduleItem$allocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentAllocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RepaymentScheduleItem model
   */
  interface RepaymentScheduleItemFieldRefs {
    readonly id: FieldRef<"RepaymentScheduleItem", 'String'>
    readonly loanId: FieldRef<"RepaymentScheduleItem", 'String'>
    readonly sequence: FieldRef<"RepaymentScheduleItem", 'Int'>
    readonly dueDate: FieldRef<"RepaymentScheduleItem", 'DateTime'>
    readonly principalDue: FieldRef<"RepaymentScheduleItem", 'Decimal'>
    readonly interestDue: FieldRef<"RepaymentScheduleItem", 'Decimal'>
    readonly feeDue: FieldRef<"RepaymentScheduleItem", 'Decimal'>
    readonly totalDue: FieldRef<"RepaymentScheduleItem", 'Decimal'>
    readonly paidAmount: FieldRef<"RepaymentScheduleItem", 'Decimal'>
    readonly status: FieldRef<"RepaymentScheduleItem", 'ScheduleStatus'>
    readonly closedAt: FieldRef<"RepaymentScheduleItem", 'DateTime'>
    readonly createdAt: FieldRef<"RepaymentScheduleItem", 'DateTime'>
    readonly updatedAt: FieldRef<"RepaymentScheduleItem", 'DateTime'>
    readonly deletedAt: FieldRef<"RepaymentScheduleItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RepaymentScheduleItem findUnique
   */
  export type RepaymentScheduleItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentScheduleItem
     */
    select?: RepaymentScheduleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentScheduleItem
     */
    omit?: RepaymentScheduleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleItemInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentScheduleItem to fetch.
     */
    where: RepaymentScheduleItemWhereUniqueInput
  }

  /**
   * RepaymentScheduleItem findUniqueOrThrow
   */
  export type RepaymentScheduleItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentScheduleItem
     */
    select?: RepaymentScheduleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentScheduleItem
     */
    omit?: RepaymentScheduleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleItemInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentScheduleItem to fetch.
     */
    where: RepaymentScheduleItemWhereUniqueInput
  }

  /**
   * RepaymentScheduleItem findFirst
   */
  export type RepaymentScheduleItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentScheduleItem
     */
    select?: RepaymentScheduleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentScheduleItem
     */
    omit?: RepaymentScheduleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleItemInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentScheduleItem to fetch.
     */
    where?: RepaymentScheduleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepaymentScheduleItems to fetch.
     */
    orderBy?: RepaymentScheduleItemOrderByWithRelationInput | RepaymentScheduleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RepaymentScheduleItems.
     */
    cursor?: RepaymentScheduleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepaymentScheduleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepaymentScheduleItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RepaymentScheduleItems.
     */
    distinct?: RepaymentScheduleItemScalarFieldEnum | RepaymentScheduleItemScalarFieldEnum[]
  }

  /**
   * RepaymentScheduleItem findFirstOrThrow
   */
  export type RepaymentScheduleItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentScheduleItem
     */
    select?: RepaymentScheduleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentScheduleItem
     */
    omit?: RepaymentScheduleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleItemInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentScheduleItem to fetch.
     */
    where?: RepaymentScheduleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepaymentScheduleItems to fetch.
     */
    orderBy?: RepaymentScheduleItemOrderByWithRelationInput | RepaymentScheduleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RepaymentScheduleItems.
     */
    cursor?: RepaymentScheduleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepaymentScheduleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepaymentScheduleItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RepaymentScheduleItems.
     */
    distinct?: RepaymentScheduleItemScalarFieldEnum | RepaymentScheduleItemScalarFieldEnum[]
  }

  /**
   * RepaymentScheduleItem findMany
   */
  export type RepaymentScheduleItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentScheduleItem
     */
    select?: RepaymentScheduleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentScheduleItem
     */
    omit?: RepaymentScheduleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleItemInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentScheduleItems to fetch.
     */
    where?: RepaymentScheduleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepaymentScheduleItems to fetch.
     */
    orderBy?: RepaymentScheduleItemOrderByWithRelationInput | RepaymentScheduleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RepaymentScheduleItems.
     */
    cursor?: RepaymentScheduleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepaymentScheduleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepaymentScheduleItems.
     */
    skip?: number
    distinct?: RepaymentScheduleItemScalarFieldEnum | RepaymentScheduleItemScalarFieldEnum[]
  }

  /**
   * RepaymentScheduleItem create
   */
  export type RepaymentScheduleItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentScheduleItem
     */
    select?: RepaymentScheduleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentScheduleItem
     */
    omit?: RepaymentScheduleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleItemInclude<ExtArgs> | null
    /**
     * The data needed to create a RepaymentScheduleItem.
     */
    data: XOR<RepaymentScheduleItemCreateInput, RepaymentScheduleItemUncheckedCreateInput>
  }

  /**
   * RepaymentScheduleItem createMany
   */
  export type RepaymentScheduleItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RepaymentScheduleItems.
     */
    data: RepaymentScheduleItemCreateManyInput | RepaymentScheduleItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RepaymentScheduleItem createManyAndReturn
   */
  export type RepaymentScheduleItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentScheduleItem
     */
    select?: RepaymentScheduleItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentScheduleItem
     */
    omit?: RepaymentScheduleItemOmit<ExtArgs> | null
    /**
     * The data used to create many RepaymentScheduleItems.
     */
    data: RepaymentScheduleItemCreateManyInput | RepaymentScheduleItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RepaymentScheduleItem update
   */
  export type RepaymentScheduleItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentScheduleItem
     */
    select?: RepaymentScheduleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentScheduleItem
     */
    omit?: RepaymentScheduleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleItemInclude<ExtArgs> | null
    /**
     * The data needed to update a RepaymentScheduleItem.
     */
    data: XOR<RepaymentScheduleItemUpdateInput, RepaymentScheduleItemUncheckedUpdateInput>
    /**
     * Choose, which RepaymentScheduleItem to update.
     */
    where: RepaymentScheduleItemWhereUniqueInput
  }

  /**
   * RepaymentScheduleItem updateMany
   */
  export type RepaymentScheduleItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RepaymentScheduleItems.
     */
    data: XOR<RepaymentScheduleItemUpdateManyMutationInput, RepaymentScheduleItemUncheckedUpdateManyInput>
    /**
     * Filter which RepaymentScheduleItems to update
     */
    where?: RepaymentScheduleItemWhereInput
    /**
     * Limit how many RepaymentScheduleItems to update.
     */
    limit?: number
  }

  /**
   * RepaymentScheduleItem updateManyAndReturn
   */
  export type RepaymentScheduleItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentScheduleItem
     */
    select?: RepaymentScheduleItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentScheduleItem
     */
    omit?: RepaymentScheduleItemOmit<ExtArgs> | null
    /**
     * The data used to update RepaymentScheduleItems.
     */
    data: XOR<RepaymentScheduleItemUpdateManyMutationInput, RepaymentScheduleItemUncheckedUpdateManyInput>
    /**
     * Filter which RepaymentScheduleItems to update
     */
    where?: RepaymentScheduleItemWhereInput
    /**
     * Limit how many RepaymentScheduleItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RepaymentScheduleItem upsert
   */
  export type RepaymentScheduleItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentScheduleItem
     */
    select?: RepaymentScheduleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentScheduleItem
     */
    omit?: RepaymentScheduleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleItemInclude<ExtArgs> | null
    /**
     * The filter to search for the RepaymentScheduleItem to update in case it exists.
     */
    where: RepaymentScheduleItemWhereUniqueInput
    /**
     * In case the RepaymentScheduleItem found by the `where` argument doesn't exist, create a new RepaymentScheduleItem with this data.
     */
    create: XOR<RepaymentScheduleItemCreateInput, RepaymentScheduleItemUncheckedCreateInput>
    /**
     * In case the RepaymentScheduleItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RepaymentScheduleItemUpdateInput, RepaymentScheduleItemUncheckedUpdateInput>
  }

  /**
   * RepaymentScheduleItem delete
   */
  export type RepaymentScheduleItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentScheduleItem
     */
    select?: RepaymentScheduleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentScheduleItem
     */
    omit?: RepaymentScheduleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleItemInclude<ExtArgs> | null
    /**
     * Filter which RepaymentScheduleItem to delete.
     */
    where: RepaymentScheduleItemWhereUniqueInput
  }

  /**
   * RepaymentScheduleItem deleteMany
   */
  export type RepaymentScheduleItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RepaymentScheduleItems to delete
     */
    where?: RepaymentScheduleItemWhereInput
    /**
     * Limit how many RepaymentScheduleItems to delete.
     */
    limit?: number
  }

  /**
   * RepaymentScheduleItem.allocations
   */
  export type RepaymentScheduleItem$allocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentAllocation
     */
    select?: RepaymentAllocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentAllocation
     */
    omit?: RepaymentAllocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentAllocationInclude<ExtArgs> | null
    where?: RepaymentAllocationWhereInput
    orderBy?: RepaymentAllocationOrderByWithRelationInput | RepaymentAllocationOrderByWithRelationInput[]
    cursor?: RepaymentAllocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepaymentAllocationScalarFieldEnum | RepaymentAllocationScalarFieldEnum[]
  }

  /**
   * RepaymentScheduleItem without action
   */
  export type RepaymentScheduleItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentScheduleItem
     */
    select?: RepaymentScheduleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentScheduleItem
     */
    omit?: RepaymentScheduleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleItemInclude<ExtArgs> | null
  }


  /**
   * Model Repayment
   */

  export type AggregateRepayment = {
    _count: RepaymentCountAggregateOutputType | null
    _avg: RepaymentAvgAggregateOutputType | null
    _sum: RepaymentSumAggregateOutputType | null
    _min: RepaymentMinAggregateOutputType | null
    _max: RepaymentMaxAggregateOutputType | null
  }

  export type RepaymentAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type RepaymentSumAggregateOutputType = {
    amount: Decimal | null
  }

  export type RepaymentMinAggregateOutputType = {
    id: string | null
    loanId: string | null
    receivedByUserId: string | null
    amount: Decimal | null
    currencyCode: string | null
    paidAt: Date | null
    method: $Enums.RepaymentMethod | null
    reference: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type RepaymentMaxAggregateOutputType = {
    id: string | null
    loanId: string | null
    receivedByUserId: string | null
    amount: Decimal | null
    currencyCode: string | null
    paidAt: Date | null
    method: $Enums.RepaymentMethod | null
    reference: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type RepaymentCountAggregateOutputType = {
    id: number
    loanId: number
    receivedByUserId: number
    amount: number
    currencyCode: number
    paidAt: number
    method: number
    reference: number
    notes: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type RepaymentAvgAggregateInputType = {
    amount?: true
  }

  export type RepaymentSumAggregateInputType = {
    amount?: true
  }

  export type RepaymentMinAggregateInputType = {
    id?: true
    loanId?: true
    receivedByUserId?: true
    amount?: true
    currencyCode?: true
    paidAt?: true
    method?: true
    reference?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type RepaymentMaxAggregateInputType = {
    id?: true
    loanId?: true
    receivedByUserId?: true
    amount?: true
    currencyCode?: true
    paidAt?: true
    method?: true
    reference?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type RepaymentCountAggregateInputType = {
    id?: true
    loanId?: true
    receivedByUserId?: true
    amount?: true
    currencyCode?: true
    paidAt?: true
    method?: true
    reference?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type RepaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Repayment to aggregate.
     */
    where?: RepaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repayments to fetch.
     */
    orderBy?: RepaymentOrderByWithRelationInput | RepaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RepaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Repayments
    **/
    _count?: true | RepaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RepaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RepaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RepaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RepaymentMaxAggregateInputType
  }

  export type GetRepaymentAggregateType<T extends RepaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateRepayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRepayment[P]>
      : GetScalarType<T[P], AggregateRepayment[P]>
  }




  export type RepaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepaymentWhereInput
    orderBy?: RepaymentOrderByWithAggregationInput | RepaymentOrderByWithAggregationInput[]
    by: RepaymentScalarFieldEnum[] | RepaymentScalarFieldEnum
    having?: RepaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RepaymentCountAggregateInputType | true
    _avg?: RepaymentAvgAggregateInputType
    _sum?: RepaymentSumAggregateInputType
    _min?: RepaymentMinAggregateInputType
    _max?: RepaymentMaxAggregateInputType
  }

  export type RepaymentGroupByOutputType = {
    id: string
    loanId: string
    receivedByUserId: string
    amount: Decimal
    currencyCode: string
    paidAt: Date
    method: $Enums.RepaymentMethod
    reference: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: RepaymentCountAggregateOutputType | null
    _avg: RepaymentAvgAggregateOutputType | null
    _sum: RepaymentSumAggregateOutputType | null
    _min: RepaymentMinAggregateOutputType | null
    _max: RepaymentMaxAggregateOutputType | null
  }

  type GetRepaymentGroupByPayload<T extends RepaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RepaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RepaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RepaymentGroupByOutputType[P]>
            : GetScalarType<T[P], RepaymentGroupByOutputType[P]>
        }
      >
    >


  export type RepaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanId?: boolean
    receivedByUserId?: boolean
    amount?: boolean
    currencyCode?: boolean
    paidAt?: boolean
    method?: boolean
    reference?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    receivedBy?: boolean | UserDefaultArgs<ExtArgs>
    allocations?: boolean | Repayment$allocationsArgs<ExtArgs>
    _count?: boolean | RepaymentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repayment"]>

  export type RepaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanId?: boolean
    receivedByUserId?: boolean
    amount?: boolean
    currencyCode?: boolean
    paidAt?: boolean
    method?: boolean
    reference?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    receivedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repayment"]>

  export type RepaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanId?: boolean
    receivedByUserId?: boolean
    amount?: boolean
    currencyCode?: boolean
    paidAt?: boolean
    method?: boolean
    reference?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    receivedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repayment"]>

  export type RepaymentSelectScalar = {
    id?: boolean
    loanId?: boolean
    receivedByUserId?: boolean
    amount?: boolean
    currencyCode?: boolean
    paidAt?: boolean
    method?: boolean
    reference?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type RepaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "loanId" | "receivedByUserId" | "amount" | "currencyCode" | "paidAt" | "method" | "reference" | "notes" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["repayment"]>
  export type RepaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    receivedBy?: boolean | UserDefaultArgs<ExtArgs>
    allocations?: boolean | Repayment$allocationsArgs<ExtArgs>
    _count?: boolean | RepaymentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RepaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    receivedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RepaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    receivedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RepaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Repayment"
    objects: {
      loan: Prisma.$LoanPayload<ExtArgs>
      receivedBy: Prisma.$UserPayload<ExtArgs>
      allocations: Prisma.$RepaymentAllocationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      loanId: string
      receivedByUserId: string
      amount: Prisma.Decimal
      currencyCode: string
      paidAt: Date
      method: $Enums.RepaymentMethod
      reference: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["repayment"]>
    composites: {}
  }

  type RepaymentGetPayload<S extends boolean | null | undefined | RepaymentDefaultArgs> = $Result.GetResult<Prisma.$RepaymentPayload, S>

  type RepaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RepaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RepaymentCountAggregateInputType | true
    }

  export interface RepaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Repayment'], meta: { name: 'Repayment' } }
    /**
     * Find zero or one Repayment that matches the filter.
     * @param {RepaymentFindUniqueArgs} args - Arguments to find a Repayment
     * @example
     * // Get one Repayment
     * const repayment = await prisma.repayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RepaymentFindUniqueArgs>(args: SelectSubset<T, RepaymentFindUniqueArgs<ExtArgs>>): Prisma__RepaymentClient<$Result.GetResult<Prisma.$RepaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Repayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RepaymentFindUniqueOrThrowArgs} args - Arguments to find a Repayment
     * @example
     * // Get one Repayment
     * const repayment = await prisma.repayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RepaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, RepaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RepaymentClient<$Result.GetResult<Prisma.$RepaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Repayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentFindFirstArgs} args - Arguments to find a Repayment
     * @example
     * // Get one Repayment
     * const repayment = await prisma.repayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RepaymentFindFirstArgs>(args?: SelectSubset<T, RepaymentFindFirstArgs<ExtArgs>>): Prisma__RepaymentClient<$Result.GetResult<Prisma.$RepaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Repayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentFindFirstOrThrowArgs} args - Arguments to find a Repayment
     * @example
     * // Get one Repayment
     * const repayment = await prisma.repayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RepaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, RepaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__RepaymentClient<$Result.GetResult<Prisma.$RepaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Repayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Repayments
     * const repayments = await prisma.repayment.findMany()
     * 
     * // Get first 10 Repayments
     * const repayments = await prisma.repayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const repaymentWithIdOnly = await prisma.repayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RepaymentFindManyArgs>(args?: SelectSubset<T, RepaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Repayment.
     * @param {RepaymentCreateArgs} args - Arguments to create a Repayment.
     * @example
     * // Create one Repayment
     * const Repayment = await prisma.repayment.create({
     *   data: {
     *     // ... data to create a Repayment
     *   }
     * })
     * 
     */
    create<T extends RepaymentCreateArgs>(args: SelectSubset<T, RepaymentCreateArgs<ExtArgs>>): Prisma__RepaymentClient<$Result.GetResult<Prisma.$RepaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Repayments.
     * @param {RepaymentCreateManyArgs} args - Arguments to create many Repayments.
     * @example
     * // Create many Repayments
     * const repayment = await prisma.repayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RepaymentCreateManyArgs>(args?: SelectSubset<T, RepaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Repayments and returns the data saved in the database.
     * @param {RepaymentCreateManyAndReturnArgs} args - Arguments to create many Repayments.
     * @example
     * // Create many Repayments
     * const repayment = await prisma.repayment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Repayments and only return the `id`
     * const repaymentWithIdOnly = await prisma.repayment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RepaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, RepaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Repayment.
     * @param {RepaymentDeleteArgs} args - Arguments to delete one Repayment.
     * @example
     * // Delete one Repayment
     * const Repayment = await prisma.repayment.delete({
     *   where: {
     *     // ... filter to delete one Repayment
     *   }
     * })
     * 
     */
    delete<T extends RepaymentDeleteArgs>(args: SelectSubset<T, RepaymentDeleteArgs<ExtArgs>>): Prisma__RepaymentClient<$Result.GetResult<Prisma.$RepaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Repayment.
     * @param {RepaymentUpdateArgs} args - Arguments to update one Repayment.
     * @example
     * // Update one Repayment
     * const repayment = await prisma.repayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RepaymentUpdateArgs>(args: SelectSubset<T, RepaymentUpdateArgs<ExtArgs>>): Prisma__RepaymentClient<$Result.GetResult<Prisma.$RepaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Repayments.
     * @param {RepaymentDeleteManyArgs} args - Arguments to filter Repayments to delete.
     * @example
     * // Delete a few Repayments
     * const { count } = await prisma.repayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RepaymentDeleteManyArgs>(args?: SelectSubset<T, RepaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Repayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Repayments
     * const repayment = await prisma.repayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RepaymentUpdateManyArgs>(args: SelectSubset<T, RepaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Repayments and returns the data updated in the database.
     * @param {RepaymentUpdateManyAndReturnArgs} args - Arguments to update many Repayments.
     * @example
     * // Update many Repayments
     * const repayment = await prisma.repayment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Repayments and only return the `id`
     * const repaymentWithIdOnly = await prisma.repayment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RepaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, RepaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Repayment.
     * @param {RepaymentUpsertArgs} args - Arguments to update or create a Repayment.
     * @example
     * // Update or create a Repayment
     * const repayment = await prisma.repayment.upsert({
     *   create: {
     *     // ... data to create a Repayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Repayment we want to update
     *   }
     * })
     */
    upsert<T extends RepaymentUpsertArgs>(args: SelectSubset<T, RepaymentUpsertArgs<ExtArgs>>): Prisma__RepaymentClient<$Result.GetResult<Prisma.$RepaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Repayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentCountArgs} args - Arguments to filter Repayments to count.
     * @example
     * // Count the number of Repayments
     * const count = await prisma.repayment.count({
     *   where: {
     *     // ... the filter for the Repayments we want to count
     *   }
     * })
    **/
    count<T extends RepaymentCountArgs>(
      args?: Subset<T, RepaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RepaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Repayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RepaymentAggregateArgs>(args: Subset<T, RepaymentAggregateArgs>): Prisma.PrismaPromise<GetRepaymentAggregateType<T>>

    /**
     * Group by Repayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RepaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RepaymentGroupByArgs['orderBy'] }
        : { orderBy?: RepaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RepaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRepaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Repayment model
   */
  readonly fields: RepaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Repayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RepaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    loan<T extends LoanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LoanDefaultArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receivedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    allocations<T extends Repayment$allocationsArgs<ExtArgs> = {}>(args?: Subset<T, Repayment$allocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentAllocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Repayment model
   */
  interface RepaymentFieldRefs {
    readonly id: FieldRef<"Repayment", 'String'>
    readonly loanId: FieldRef<"Repayment", 'String'>
    readonly receivedByUserId: FieldRef<"Repayment", 'String'>
    readonly amount: FieldRef<"Repayment", 'Decimal'>
    readonly currencyCode: FieldRef<"Repayment", 'String'>
    readonly paidAt: FieldRef<"Repayment", 'DateTime'>
    readonly method: FieldRef<"Repayment", 'RepaymentMethod'>
    readonly reference: FieldRef<"Repayment", 'String'>
    readonly notes: FieldRef<"Repayment", 'String'>
    readonly createdAt: FieldRef<"Repayment", 'DateTime'>
    readonly updatedAt: FieldRef<"Repayment", 'DateTime'>
    readonly deletedAt: FieldRef<"Repayment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Repayment findUnique
   */
  export type RepaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repayment
     */
    select?: RepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repayment
     */
    omit?: RepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentInclude<ExtArgs> | null
    /**
     * Filter, which Repayment to fetch.
     */
    where: RepaymentWhereUniqueInput
  }

  /**
   * Repayment findUniqueOrThrow
   */
  export type RepaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repayment
     */
    select?: RepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repayment
     */
    omit?: RepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentInclude<ExtArgs> | null
    /**
     * Filter, which Repayment to fetch.
     */
    where: RepaymentWhereUniqueInput
  }

  /**
   * Repayment findFirst
   */
  export type RepaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repayment
     */
    select?: RepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repayment
     */
    omit?: RepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentInclude<ExtArgs> | null
    /**
     * Filter, which Repayment to fetch.
     */
    where?: RepaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repayments to fetch.
     */
    orderBy?: RepaymentOrderByWithRelationInput | RepaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Repayments.
     */
    cursor?: RepaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Repayments.
     */
    distinct?: RepaymentScalarFieldEnum | RepaymentScalarFieldEnum[]
  }

  /**
   * Repayment findFirstOrThrow
   */
  export type RepaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repayment
     */
    select?: RepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repayment
     */
    omit?: RepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentInclude<ExtArgs> | null
    /**
     * Filter, which Repayment to fetch.
     */
    where?: RepaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repayments to fetch.
     */
    orderBy?: RepaymentOrderByWithRelationInput | RepaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Repayments.
     */
    cursor?: RepaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Repayments.
     */
    distinct?: RepaymentScalarFieldEnum | RepaymentScalarFieldEnum[]
  }

  /**
   * Repayment findMany
   */
  export type RepaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repayment
     */
    select?: RepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repayment
     */
    omit?: RepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentInclude<ExtArgs> | null
    /**
     * Filter, which Repayments to fetch.
     */
    where?: RepaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repayments to fetch.
     */
    orderBy?: RepaymentOrderByWithRelationInput | RepaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Repayments.
     */
    cursor?: RepaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repayments.
     */
    skip?: number
    distinct?: RepaymentScalarFieldEnum | RepaymentScalarFieldEnum[]
  }

  /**
   * Repayment create
   */
  export type RepaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repayment
     */
    select?: RepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repayment
     */
    omit?: RepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Repayment.
     */
    data: XOR<RepaymentCreateInput, RepaymentUncheckedCreateInput>
  }

  /**
   * Repayment createMany
   */
  export type RepaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Repayments.
     */
    data: RepaymentCreateManyInput | RepaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Repayment createManyAndReturn
   */
  export type RepaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repayment
     */
    select?: RepaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Repayment
     */
    omit?: RepaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Repayments.
     */
    data: RepaymentCreateManyInput | RepaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Repayment update
   */
  export type RepaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repayment
     */
    select?: RepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repayment
     */
    omit?: RepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Repayment.
     */
    data: XOR<RepaymentUpdateInput, RepaymentUncheckedUpdateInput>
    /**
     * Choose, which Repayment to update.
     */
    where: RepaymentWhereUniqueInput
  }

  /**
   * Repayment updateMany
   */
  export type RepaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Repayments.
     */
    data: XOR<RepaymentUpdateManyMutationInput, RepaymentUncheckedUpdateManyInput>
    /**
     * Filter which Repayments to update
     */
    where?: RepaymentWhereInput
    /**
     * Limit how many Repayments to update.
     */
    limit?: number
  }

  /**
   * Repayment updateManyAndReturn
   */
  export type RepaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repayment
     */
    select?: RepaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Repayment
     */
    omit?: RepaymentOmit<ExtArgs> | null
    /**
     * The data used to update Repayments.
     */
    data: XOR<RepaymentUpdateManyMutationInput, RepaymentUncheckedUpdateManyInput>
    /**
     * Filter which Repayments to update
     */
    where?: RepaymentWhereInput
    /**
     * Limit how many Repayments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Repayment upsert
   */
  export type RepaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repayment
     */
    select?: RepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repayment
     */
    omit?: RepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Repayment to update in case it exists.
     */
    where: RepaymentWhereUniqueInput
    /**
     * In case the Repayment found by the `where` argument doesn't exist, create a new Repayment with this data.
     */
    create: XOR<RepaymentCreateInput, RepaymentUncheckedCreateInput>
    /**
     * In case the Repayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RepaymentUpdateInput, RepaymentUncheckedUpdateInput>
  }

  /**
   * Repayment delete
   */
  export type RepaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repayment
     */
    select?: RepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repayment
     */
    omit?: RepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentInclude<ExtArgs> | null
    /**
     * Filter which Repayment to delete.
     */
    where: RepaymentWhereUniqueInput
  }

  /**
   * Repayment deleteMany
   */
  export type RepaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Repayments to delete
     */
    where?: RepaymentWhereInput
    /**
     * Limit how many Repayments to delete.
     */
    limit?: number
  }

  /**
   * Repayment.allocations
   */
  export type Repayment$allocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentAllocation
     */
    select?: RepaymentAllocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentAllocation
     */
    omit?: RepaymentAllocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentAllocationInclude<ExtArgs> | null
    where?: RepaymentAllocationWhereInput
    orderBy?: RepaymentAllocationOrderByWithRelationInput | RepaymentAllocationOrderByWithRelationInput[]
    cursor?: RepaymentAllocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepaymentAllocationScalarFieldEnum | RepaymentAllocationScalarFieldEnum[]
  }

  /**
   * Repayment without action
   */
  export type RepaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repayment
     */
    select?: RepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repayment
     */
    omit?: RepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentInclude<ExtArgs> | null
  }


  /**
   * Model RepaymentAllocation
   */

  export type AggregateRepaymentAllocation = {
    _count: RepaymentAllocationCountAggregateOutputType | null
    _avg: RepaymentAllocationAvgAggregateOutputType | null
    _sum: RepaymentAllocationSumAggregateOutputType | null
    _min: RepaymentAllocationMinAggregateOutputType | null
    _max: RepaymentAllocationMaxAggregateOutputType | null
  }

  export type RepaymentAllocationAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type RepaymentAllocationSumAggregateOutputType = {
    amount: Decimal | null
  }

  export type RepaymentAllocationMinAggregateOutputType = {
    id: string | null
    repaymentId: string | null
    scheduleItemId: string | null
    amount: Decimal | null
    createdAt: Date | null
  }

  export type RepaymentAllocationMaxAggregateOutputType = {
    id: string | null
    repaymentId: string | null
    scheduleItemId: string | null
    amount: Decimal | null
    createdAt: Date | null
  }

  export type RepaymentAllocationCountAggregateOutputType = {
    id: number
    repaymentId: number
    scheduleItemId: number
    amount: number
    createdAt: number
    _all: number
  }


  export type RepaymentAllocationAvgAggregateInputType = {
    amount?: true
  }

  export type RepaymentAllocationSumAggregateInputType = {
    amount?: true
  }

  export type RepaymentAllocationMinAggregateInputType = {
    id?: true
    repaymentId?: true
    scheduleItemId?: true
    amount?: true
    createdAt?: true
  }

  export type RepaymentAllocationMaxAggregateInputType = {
    id?: true
    repaymentId?: true
    scheduleItemId?: true
    amount?: true
    createdAt?: true
  }

  export type RepaymentAllocationCountAggregateInputType = {
    id?: true
    repaymentId?: true
    scheduleItemId?: true
    amount?: true
    createdAt?: true
    _all?: true
  }

  export type RepaymentAllocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RepaymentAllocation to aggregate.
     */
    where?: RepaymentAllocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepaymentAllocations to fetch.
     */
    orderBy?: RepaymentAllocationOrderByWithRelationInput | RepaymentAllocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RepaymentAllocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepaymentAllocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepaymentAllocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RepaymentAllocations
    **/
    _count?: true | RepaymentAllocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RepaymentAllocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RepaymentAllocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RepaymentAllocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RepaymentAllocationMaxAggregateInputType
  }

  export type GetRepaymentAllocationAggregateType<T extends RepaymentAllocationAggregateArgs> = {
        [P in keyof T & keyof AggregateRepaymentAllocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRepaymentAllocation[P]>
      : GetScalarType<T[P], AggregateRepaymentAllocation[P]>
  }




  export type RepaymentAllocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepaymentAllocationWhereInput
    orderBy?: RepaymentAllocationOrderByWithAggregationInput | RepaymentAllocationOrderByWithAggregationInput[]
    by: RepaymentAllocationScalarFieldEnum[] | RepaymentAllocationScalarFieldEnum
    having?: RepaymentAllocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RepaymentAllocationCountAggregateInputType | true
    _avg?: RepaymentAllocationAvgAggregateInputType
    _sum?: RepaymentAllocationSumAggregateInputType
    _min?: RepaymentAllocationMinAggregateInputType
    _max?: RepaymentAllocationMaxAggregateInputType
  }

  export type RepaymentAllocationGroupByOutputType = {
    id: string
    repaymentId: string
    scheduleItemId: string
    amount: Decimal
    createdAt: Date
    _count: RepaymentAllocationCountAggregateOutputType | null
    _avg: RepaymentAllocationAvgAggregateOutputType | null
    _sum: RepaymentAllocationSumAggregateOutputType | null
    _min: RepaymentAllocationMinAggregateOutputType | null
    _max: RepaymentAllocationMaxAggregateOutputType | null
  }

  type GetRepaymentAllocationGroupByPayload<T extends RepaymentAllocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RepaymentAllocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RepaymentAllocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RepaymentAllocationGroupByOutputType[P]>
            : GetScalarType<T[P], RepaymentAllocationGroupByOutputType[P]>
        }
      >
    >


  export type RepaymentAllocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    repaymentId?: boolean
    scheduleItemId?: boolean
    amount?: boolean
    createdAt?: boolean
    repayment?: boolean | RepaymentDefaultArgs<ExtArgs>
    scheduleItem?: boolean | RepaymentScheduleItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repaymentAllocation"]>

  export type RepaymentAllocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    repaymentId?: boolean
    scheduleItemId?: boolean
    amount?: boolean
    createdAt?: boolean
    repayment?: boolean | RepaymentDefaultArgs<ExtArgs>
    scheduleItem?: boolean | RepaymentScheduleItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repaymentAllocation"]>

  export type RepaymentAllocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    repaymentId?: boolean
    scheduleItemId?: boolean
    amount?: boolean
    createdAt?: boolean
    repayment?: boolean | RepaymentDefaultArgs<ExtArgs>
    scheduleItem?: boolean | RepaymentScheduleItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repaymentAllocation"]>

  export type RepaymentAllocationSelectScalar = {
    id?: boolean
    repaymentId?: boolean
    scheduleItemId?: boolean
    amount?: boolean
    createdAt?: boolean
  }

  export type RepaymentAllocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "repaymentId" | "scheduleItemId" | "amount" | "createdAt", ExtArgs["result"]["repaymentAllocation"]>
  export type RepaymentAllocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repayment?: boolean | RepaymentDefaultArgs<ExtArgs>
    scheduleItem?: boolean | RepaymentScheduleItemDefaultArgs<ExtArgs>
  }
  export type RepaymentAllocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repayment?: boolean | RepaymentDefaultArgs<ExtArgs>
    scheduleItem?: boolean | RepaymentScheduleItemDefaultArgs<ExtArgs>
  }
  export type RepaymentAllocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repayment?: boolean | RepaymentDefaultArgs<ExtArgs>
    scheduleItem?: boolean | RepaymentScheduleItemDefaultArgs<ExtArgs>
  }

  export type $RepaymentAllocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RepaymentAllocation"
    objects: {
      repayment: Prisma.$RepaymentPayload<ExtArgs>
      scheduleItem: Prisma.$RepaymentScheduleItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      repaymentId: string
      scheduleItemId: string
      amount: Prisma.Decimal
      createdAt: Date
    }, ExtArgs["result"]["repaymentAllocation"]>
    composites: {}
  }

  type RepaymentAllocationGetPayload<S extends boolean | null | undefined | RepaymentAllocationDefaultArgs> = $Result.GetResult<Prisma.$RepaymentAllocationPayload, S>

  type RepaymentAllocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RepaymentAllocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RepaymentAllocationCountAggregateInputType | true
    }

  export interface RepaymentAllocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RepaymentAllocation'], meta: { name: 'RepaymentAllocation' } }
    /**
     * Find zero or one RepaymentAllocation that matches the filter.
     * @param {RepaymentAllocationFindUniqueArgs} args - Arguments to find a RepaymentAllocation
     * @example
     * // Get one RepaymentAllocation
     * const repaymentAllocation = await prisma.repaymentAllocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RepaymentAllocationFindUniqueArgs>(args: SelectSubset<T, RepaymentAllocationFindUniqueArgs<ExtArgs>>): Prisma__RepaymentAllocationClient<$Result.GetResult<Prisma.$RepaymentAllocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RepaymentAllocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RepaymentAllocationFindUniqueOrThrowArgs} args - Arguments to find a RepaymentAllocation
     * @example
     * // Get one RepaymentAllocation
     * const repaymentAllocation = await prisma.repaymentAllocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RepaymentAllocationFindUniqueOrThrowArgs>(args: SelectSubset<T, RepaymentAllocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RepaymentAllocationClient<$Result.GetResult<Prisma.$RepaymentAllocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RepaymentAllocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentAllocationFindFirstArgs} args - Arguments to find a RepaymentAllocation
     * @example
     * // Get one RepaymentAllocation
     * const repaymentAllocation = await prisma.repaymentAllocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RepaymentAllocationFindFirstArgs>(args?: SelectSubset<T, RepaymentAllocationFindFirstArgs<ExtArgs>>): Prisma__RepaymentAllocationClient<$Result.GetResult<Prisma.$RepaymentAllocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RepaymentAllocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentAllocationFindFirstOrThrowArgs} args - Arguments to find a RepaymentAllocation
     * @example
     * // Get one RepaymentAllocation
     * const repaymentAllocation = await prisma.repaymentAllocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RepaymentAllocationFindFirstOrThrowArgs>(args?: SelectSubset<T, RepaymentAllocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__RepaymentAllocationClient<$Result.GetResult<Prisma.$RepaymentAllocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RepaymentAllocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentAllocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RepaymentAllocations
     * const repaymentAllocations = await prisma.repaymentAllocation.findMany()
     * 
     * // Get first 10 RepaymentAllocations
     * const repaymentAllocations = await prisma.repaymentAllocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const repaymentAllocationWithIdOnly = await prisma.repaymentAllocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RepaymentAllocationFindManyArgs>(args?: SelectSubset<T, RepaymentAllocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentAllocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RepaymentAllocation.
     * @param {RepaymentAllocationCreateArgs} args - Arguments to create a RepaymentAllocation.
     * @example
     * // Create one RepaymentAllocation
     * const RepaymentAllocation = await prisma.repaymentAllocation.create({
     *   data: {
     *     // ... data to create a RepaymentAllocation
     *   }
     * })
     * 
     */
    create<T extends RepaymentAllocationCreateArgs>(args: SelectSubset<T, RepaymentAllocationCreateArgs<ExtArgs>>): Prisma__RepaymentAllocationClient<$Result.GetResult<Prisma.$RepaymentAllocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RepaymentAllocations.
     * @param {RepaymentAllocationCreateManyArgs} args - Arguments to create many RepaymentAllocations.
     * @example
     * // Create many RepaymentAllocations
     * const repaymentAllocation = await prisma.repaymentAllocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RepaymentAllocationCreateManyArgs>(args?: SelectSubset<T, RepaymentAllocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RepaymentAllocations and returns the data saved in the database.
     * @param {RepaymentAllocationCreateManyAndReturnArgs} args - Arguments to create many RepaymentAllocations.
     * @example
     * // Create many RepaymentAllocations
     * const repaymentAllocation = await prisma.repaymentAllocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RepaymentAllocations and only return the `id`
     * const repaymentAllocationWithIdOnly = await prisma.repaymentAllocation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RepaymentAllocationCreateManyAndReturnArgs>(args?: SelectSubset<T, RepaymentAllocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentAllocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RepaymentAllocation.
     * @param {RepaymentAllocationDeleteArgs} args - Arguments to delete one RepaymentAllocation.
     * @example
     * // Delete one RepaymentAllocation
     * const RepaymentAllocation = await prisma.repaymentAllocation.delete({
     *   where: {
     *     // ... filter to delete one RepaymentAllocation
     *   }
     * })
     * 
     */
    delete<T extends RepaymentAllocationDeleteArgs>(args: SelectSubset<T, RepaymentAllocationDeleteArgs<ExtArgs>>): Prisma__RepaymentAllocationClient<$Result.GetResult<Prisma.$RepaymentAllocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RepaymentAllocation.
     * @param {RepaymentAllocationUpdateArgs} args - Arguments to update one RepaymentAllocation.
     * @example
     * // Update one RepaymentAllocation
     * const repaymentAllocation = await prisma.repaymentAllocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RepaymentAllocationUpdateArgs>(args: SelectSubset<T, RepaymentAllocationUpdateArgs<ExtArgs>>): Prisma__RepaymentAllocationClient<$Result.GetResult<Prisma.$RepaymentAllocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RepaymentAllocations.
     * @param {RepaymentAllocationDeleteManyArgs} args - Arguments to filter RepaymentAllocations to delete.
     * @example
     * // Delete a few RepaymentAllocations
     * const { count } = await prisma.repaymentAllocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RepaymentAllocationDeleteManyArgs>(args?: SelectSubset<T, RepaymentAllocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RepaymentAllocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentAllocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RepaymentAllocations
     * const repaymentAllocation = await prisma.repaymentAllocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RepaymentAllocationUpdateManyArgs>(args: SelectSubset<T, RepaymentAllocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RepaymentAllocations and returns the data updated in the database.
     * @param {RepaymentAllocationUpdateManyAndReturnArgs} args - Arguments to update many RepaymentAllocations.
     * @example
     * // Update many RepaymentAllocations
     * const repaymentAllocation = await prisma.repaymentAllocation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RepaymentAllocations and only return the `id`
     * const repaymentAllocationWithIdOnly = await prisma.repaymentAllocation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RepaymentAllocationUpdateManyAndReturnArgs>(args: SelectSubset<T, RepaymentAllocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentAllocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RepaymentAllocation.
     * @param {RepaymentAllocationUpsertArgs} args - Arguments to update or create a RepaymentAllocation.
     * @example
     * // Update or create a RepaymentAllocation
     * const repaymentAllocation = await prisma.repaymentAllocation.upsert({
     *   create: {
     *     // ... data to create a RepaymentAllocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RepaymentAllocation we want to update
     *   }
     * })
     */
    upsert<T extends RepaymentAllocationUpsertArgs>(args: SelectSubset<T, RepaymentAllocationUpsertArgs<ExtArgs>>): Prisma__RepaymentAllocationClient<$Result.GetResult<Prisma.$RepaymentAllocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RepaymentAllocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentAllocationCountArgs} args - Arguments to filter RepaymentAllocations to count.
     * @example
     * // Count the number of RepaymentAllocations
     * const count = await prisma.repaymentAllocation.count({
     *   where: {
     *     // ... the filter for the RepaymentAllocations we want to count
     *   }
     * })
    **/
    count<T extends RepaymentAllocationCountArgs>(
      args?: Subset<T, RepaymentAllocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RepaymentAllocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RepaymentAllocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentAllocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RepaymentAllocationAggregateArgs>(args: Subset<T, RepaymentAllocationAggregateArgs>): Prisma.PrismaPromise<GetRepaymentAllocationAggregateType<T>>

    /**
     * Group by RepaymentAllocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentAllocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RepaymentAllocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RepaymentAllocationGroupByArgs['orderBy'] }
        : { orderBy?: RepaymentAllocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RepaymentAllocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRepaymentAllocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RepaymentAllocation model
   */
  readonly fields: RepaymentAllocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RepaymentAllocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RepaymentAllocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    repayment<T extends RepaymentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RepaymentDefaultArgs<ExtArgs>>): Prisma__RepaymentClient<$Result.GetResult<Prisma.$RepaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    scheduleItem<T extends RepaymentScheduleItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RepaymentScheduleItemDefaultArgs<ExtArgs>>): Prisma__RepaymentScheduleItemClient<$Result.GetResult<Prisma.$RepaymentScheduleItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RepaymentAllocation model
   */
  interface RepaymentAllocationFieldRefs {
    readonly id: FieldRef<"RepaymentAllocation", 'String'>
    readonly repaymentId: FieldRef<"RepaymentAllocation", 'String'>
    readonly scheduleItemId: FieldRef<"RepaymentAllocation", 'String'>
    readonly amount: FieldRef<"RepaymentAllocation", 'Decimal'>
    readonly createdAt: FieldRef<"RepaymentAllocation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RepaymentAllocation findUnique
   */
  export type RepaymentAllocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentAllocation
     */
    select?: RepaymentAllocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentAllocation
     */
    omit?: RepaymentAllocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentAllocationInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentAllocation to fetch.
     */
    where: RepaymentAllocationWhereUniqueInput
  }

  /**
   * RepaymentAllocation findUniqueOrThrow
   */
  export type RepaymentAllocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentAllocation
     */
    select?: RepaymentAllocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentAllocation
     */
    omit?: RepaymentAllocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentAllocationInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentAllocation to fetch.
     */
    where: RepaymentAllocationWhereUniqueInput
  }

  /**
   * RepaymentAllocation findFirst
   */
  export type RepaymentAllocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentAllocation
     */
    select?: RepaymentAllocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentAllocation
     */
    omit?: RepaymentAllocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentAllocationInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentAllocation to fetch.
     */
    where?: RepaymentAllocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepaymentAllocations to fetch.
     */
    orderBy?: RepaymentAllocationOrderByWithRelationInput | RepaymentAllocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RepaymentAllocations.
     */
    cursor?: RepaymentAllocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepaymentAllocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepaymentAllocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RepaymentAllocations.
     */
    distinct?: RepaymentAllocationScalarFieldEnum | RepaymentAllocationScalarFieldEnum[]
  }

  /**
   * RepaymentAllocation findFirstOrThrow
   */
  export type RepaymentAllocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentAllocation
     */
    select?: RepaymentAllocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentAllocation
     */
    omit?: RepaymentAllocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentAllocationInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentAllocation to fetch.
     */
    where?: RepaymentAllocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepaymentAllocations to fetch.
     */
    orderBy?: RepaymentAllocationOrderByWithRelationInput | RepaymentAllocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RepaymentAllocations.
     */
    cursor?: RepaymentAllocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepaymentAllocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepaymentAllocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RepaymentAllocations.
     */
    distinct?: RepaymentAllocationScalarFieldEnum | RepaymentAllocationScalarFieldEnum[]
  }

  /**
   * RepaymentAllocation findMany
   */
  export type RepaymentAllocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentAllocation
     */
    select?: RepaymentAllocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentAllocation
     */
    omit?: RepaymentAllocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentAllocationInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentAllocations to fetch.
     */
    where?: RepaymentAllocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepaymentAllocations to fetch.
     */
    orderBy?: RepaymentAllocationOrderByWithRelationInput | RepaymentAllocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RepaymentAllocations.
     */
    cursor?: RepaymentAllocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepaymentAllocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepaymentAllocations.
     */
    skip?: number
    distinct?: RepaymentAllocationScalarFieldEnum | RepaymentAllocationScalarFieldEnum[]
  }

  /**
   * RepaymentAllocation create
   */
  export type RepaymentAllocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentAllocation
     */
    select?: RepaymentAllocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentAllocation
     */
    omit?: RepaymentAllocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentAllocationInclude<ExtArgs> | null
    /**
     * The data needed to create a RepaymentAllocation.
     */
    data: XOR<RepaymentAllocationCreateInput, RepaymentAllocationUncheckedCreateInput>
  }

  /**
   * RepaymentAllocation createMany
   */
  export type RepaymentAllocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RepaymentAllocations.
     */
    data: RepaymentAllocationCreateManyInput | RepaymentAllocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RepaymentAllocation createManyAndReturn
   */
  export type RepaymentAllocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentAllocation
     */
    select?: RepaymentAllocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentAllocation
     */
    omit?: RepaymentAllocationOmit<ExtArgs> | null
    /**
     * The data used to create many RepaymentAllocations.
     */
    data: RepaymentAllocationCreateManyInput | RepaymentAllocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentAllocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RepaymentAllocation update
   */
  export type RepaymentAllocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentAllocation
     */
    select?: RepaymentAllocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentAllocation
     */
    omit?: RepaymentAllocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentAllocationInclude<ExtArgs> | null
    /**
     * The data needed to update a RepaymentAllocation.
     */
    data: XOR<RepaymentAllocationUpdateInput, RepaymentAllocationUncheckedUpdateInput>
    /**
     * Choose, which RepaymentAllocation to update.
     */
    where: RepaymentAllocationWhereUniqueInput
  }

  /**
   * RepaymentAllocation updateMany
   */
  export type RepaymentAllocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RepaymentAllocations.
     */
    data: XOR<RepaymentAllocationUpdateManyMutationInput, RepaymentAllocationUncheckedUpdateManyInput>
    /**
     * Filter which RepaymentAllocations to update
     */
    where?: RepaymentAllocationWhereInput
    /**
     * Limit how many RepaymentAllocations to update.
     */
    limit?: number
  }

  /**
   * RepaymentAllocation updateManyAndReturn
   */
  export type RepaymentAllocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentAllocation
     */
    select?: RepaymentAllocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentAllocation
     */
    omit?: RepaymentAllocationOmit<ExtArgs> | null
    /**
     * The data used to update RepaymentAllocations.
     */
    data: XOR<RepaymentAllocationUpdateManyMutationInput, RepaymentAllocationUncheckedUpdateManyInput>
    /**
     * Filter which RepaymentAllocations to update
     */
    where?: RepaymentAllocationWhereInput
    /**
     * Limit how many RepaymentAllocations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentAllocationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RepaymentAllocation upsert
   */
  export type RepaymentAllocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentAllocation
     */
    select?: RepaymentAllocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentAllocation
     */
    omit?: RepaymentAllocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentAllocationInclude<ExtArgs> | null
    /**
     * The filter to search for the RepaymentAllocation to update in case it exists.
     */
    where: RepaymentAllocationWhereUniqueInput
    /**
     * In case the RepaymentAllocation found by the `where` argument doesn't exist, create a new RepaymentAllocation with this data.
     */
    create: XOR<RepaymentAllocationCreateInput, RepaymentAllocationUncheckedCreateInput>
    /**
     * In case the RepaymentAllocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RepaymentAllocationUpdateInput, RepaymentAllocationUncheckedUpdateInput>
  }

  /**
   * RepaymentAllocation delete
   */
  export type RepaymentAllocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentAllocation
     */
    select?: RepaymentAllocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentAllocation
     */
    omit?: RepaymentAllocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentAllocationInclude<ExtArgs> | null
    /**
     * Filter which RepaymentAllocation to delete.
     */
    where: RepaymentAllocationWhereUniqueInput
  }

  /**
   * RepaymentAllocation deleteMany
   */
  export type RepaymentAllocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RepaymentAllocations to delete
     */
    where?: RepaymentAllocationWhereInput
    /**
     * Limit how many RepaymentAllocations to delete.
     */
    limit?: number
  }

  /**
   * RepaymentAllocation without action
   */
  export type RepaymentAllocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentAllocation
     */
    select?: RepaymentAllocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepaymentAllocation
     */
    omit?: RepaymentAllocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentAllocationInclude<ExtArgs> | null
  }


  /**
   * Model LoanAssignmentHistory
   */

  export type AggregateLoanAssignmentHistory = {
    _count: LoanAssignmentHistoryCountAggregateOutputType | null
    _min: LoanAssignmentHistoryMinAggregateOutputType | null
    _max: LoanAssignmentHistoryMaxAggregateOutputType | null
  }

  export type LoanAssignmentHistoryMinAggregateOutputType = {
    id: string | null
    loanId: string | null
    oldOfficerId: string | null
    newOfficerId: string | null
    oldBranchId: string | null
    newBranchId: string | null
    changedByUserId: string | null
    reason: string | null
    changedAt: Date | null
  }

  export type LoanAssignmentHistoryMaxAggregateOutputType = {
    id: string | null
    loanId: string | null
    oldOfficerId: string | null
    newOfficerId: string | null
    oldBranchId: string | null
    newBranchId: string | null
    changedByUserId: string | null
    reason: string | null
    changedAt: Date | null
  }

  export type LoanAssignmentHistoryCountAggregateOutputType = {
    id: number
    loanId: number
    oldOfficerId: number
    newOfficerId: number
    oldBranchId: number
    newBranchId: number
    changedByUserId: number
    reason: number
    changedAt: number
    _all: number
  }


  export type LoanAssignmentHistoryMinAggregateInputType = {
    id?: true
    loanId?: true
    oldOfficerId?: true
    newOfficerId?: true
    oldBranchId?: true
    newBranchId?: true
    changedByUserId?: true
    reason?: true
    changedAt?: true
  }

  export type LoanAssignmentHistoryMaxAggregateInputType = {
    id?: true
    loanId?: true
    oldOfficerId?: true
    newOfficerId?: true
    oldBranchId?: true
    newBranchId?: true
    changedByUserId?: true
    reason?: true
    changedAt?: true
  }

  export type LoanAssignmentHistoryCountAggregateInputType = {
    id?: true
    loanId?: true
    oldOfficerId?: true
    newOfficerId?: true
    oldBranchId?: true
    newBranchId?: true
    changedByUserId?: true
    reason?: true
    changedAt?: true
    _all?: true
  }

  export type LoanAssignmentHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoanAssignmentHistory to aggregate.
     */
    where?: LoanAssignmentHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanAssignmentHistories to fetch.
     */
    orderBy?: LoanAssignmentHistoryOrderByWithRelationInput | LoanAssignmentHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoanAssignmentHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanAssignmentHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanAssignmentHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LoanAssignmentHistories
    **/
    _count?: true | LoanAssignmentHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoanAssignmentHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoanAssignmentHistoryMaxAggregateInputType
  }

  export type GetLoanAssignmentHistoryAggregateType<T extends LoanAssignmentHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateLoanAssignmentHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoanAssignmentHistory[P]>
      : GetScalarType<T[P], AggregateLoanAssignmentHistory[P]>
  }




  export type LoanAssignmentHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanAssignmentHistoryWhereInput
    orderBy?: LoanAssignmentHistoryOrderByWithAggregationInput | LoanAssignmentHistoryOrderByWithAggregationInput[]
    by: LoanAssignmentHistoryScalarFieldEnum[] | LoanAssignmentHistoryScalarFieldEnum
    having?: LoanAssignmentHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoanAssignmentHistoryCountAggregateInputType | true
    _min?: LoanAssignmentHistoryMinAggregateInputType
    _max?: LoanAssignmentHistoryMaxAggregateInputType
  }

  export type LoanAssignmentHistoryGroupByOutputType = {
    id: string
    loanId: string
    oldOfficerId: string | null
    newOfficerId: string
    oldBranchId: string | null
    newBranchId: string | null
    changedByUserId: string
    reason: string | null
    changedAt: Date
    _count: LoanAssignmentHistoryCountAggregateOutputType | null
    _min: LoanAssignmentHistoryMinAggregateOutputType | null
    _max: LoanAssignmentHistoryMaxAggregateOutputType | null
  }

  type GetLoanAssignmentHistoryGroupByPayload<T extends LoanAssignmentHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoanAssignmentHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoanAssignmentHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoanAssignmentHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], LoanAssignmentHistoryGroupByOutputType[P]>
        }
      >
    >


  export type LoanAssignmentHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanId?: boolean
    oldOfficerId?: boolean
    newOfficerId?: boolean
    oldBranchId?: boolean
    newBranchId?: boolean
    changedByUserId?: boolean
    reason?: boolean
    changedAt?: boolean
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    oldOfficer?: boolean | LoanAssignmentHistory$oldOfficerArgs<ExtArgs>
    newOfficer?: boolean | UserDefaultArgs<ExtArgs>
    oldBranch?: boolean | LoanAssignmentHistory$oldBranchArgs<ExtArgs>
    newBranch?: boolean | LoanAssignmentHistory$newBranchArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loanAssignmentHistory"]>

  export type LoanAssignmentHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanId?: boolean
    oldOfficerId?: boolean
    newOfficerId?: boolean
    oldBranchId?: boolean
    newBranchId?: boolean
    changedByUserId?: boolean
    reason?: boolean
    changedAt?: boolean
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    oldOfficer?: boolean | LoanAssignmentHistory$oldOfficerArgs<ExtArgs>
    newOfficer?: boolean | UserDefaultArgs<ExtArgs>
    oldBranch?: boolean | LoanAssignmentHistory$oldBranchArgs<ExtArgs>
    newBranch?: boolean | LoanAssignmentHistory$newBranchArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loanAssignmentHistory"]>

  export type LoanAssignmentHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanId?: boolean
    oldOfficerId?: boolean
    newOfficerId?: boolean
    oldBranchId?: boolean
    newBranchId?: boolean
    changedByUserId?: boolean
    reason?: boolean
    changedAt?: boolean
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    oldOfficer?: boolean | LoanAssignmentHistory$oldOfficerArgs<ExtArgs>
    newOfficer?: boolean | UserDefaultArgs<ExtArgs>
    oldBranch?: boolean | LoanAssignmentHistory$oldBranchArgs<ExtArgs>
    newBranch?: boolean | LoanAssignmentHistory$newBranchArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loanAssignmentHistory"]>

  export type LoanAssignmentHistorySelectScalar = {
    id?: boolean
    loanId?: boolean
    oldOfficerId?: boolean
    newOfficerId?: boolean
    oldBranchId?: boolean
    newBranchId?: boolean
    changedByUserId?: boolean
    reason?: boolean
    changedAt?: boolean
  }

  export type LoanAssignmentHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "loanId" | "oldOfficerId" | "newOfficerId" | "oldBranchId" | "newBranchId" | "changedByUserId" | "reason" | "changedAt", ExtArgs["result"]["loanAssignmentHistory"]>
  export type LoanAssignmentHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    oldOfficer?: boolean | LoanAssignmentHistory$oldOfficerArgs<ExtArgs>
    newOfficer?: boolean | UserDefaultArgs<ExtArgs>
    oldBranch?: boolean | LoanAssignmentHistory$oldBranchArgs<ExtArgs>
    newBranch?: boolean | LoanAssignmentHistory$newBranchArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LoanAssignmentHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    oldOfficer?: boolean | LoanAssignmentHistory$oldOfficerArgs<ExtArgs>
    newOfficer?: boolean | UserDefaultArgs<ExtArgs>
    oldBranch?: boolean | LoanAssignmentHistory$oldBranchArgs<ExtArgs>
    newBranch?: boolean | LoanAssignmentHistory$newBranchArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LoanAssignmentHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    oldOfficer?: boolean | LoanAssignmentHistory$oldOfficerArgs<ExtArgs>
    newOfficer?: boolean | UserDefaultArgs<ExtArgs>
    oldBranch?: boolean | LoanAssignmentHistory$oldBranchArgs<ExtArgs>
    newBranch?: boolean | LoanAssignmentHistory$newBranchArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LoanAssignmentHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LoanAssignmentHistory"
    objects: {
      loan: Prisma.$LoanPayload<ExtArgs>
      oldOfficer: Prisma.$UserPayload<ExtArgs> | null
      newOfficer: Prisma.$UserPayload<ExtArgs>
      oldBranch: Prisma.$BranchPayload<ExtArgs> | null
      newBranch: Prisma.$BranchPayload<ExtArgs> | null
      changedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      loanId: string
      oldOfficerId: string | null
      newOfficerId: string
      oldBranchId: string | null
      newBranchId: string | null
      changedByUserId: string
      reason: string | null
      changedAt: Date
    }, ExtArgs["result"]["loanAssignmentHistory"]>
    composites: {}
  }

  type LoanAssignmentHistoryGetPayload<S extends boolean | null | undefined | LoanAssignmentHistoryDefaultArgs> = $Result.GetResult<Prisma.$LoanAssignmentHistoryPayload, S>

  type LoanAssignmentHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LoanAssignmentHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LoanAssignmentHistoryCountAggregateInputType | true
    }

  export interface LoanAssignmentHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LoanAssignmentHistory'], meta: { name: 'LoanAssignmentHistory' } }
    /**
     * Find zero or one LoanAssignmentHistory that matches the filter.
     * @param {LoanAssignmentHistoryFindUniqueArgs} args - Arguments to find a LoanAssignmentHistory
     * @example
     * // Get one LoanAssignmentHistory
     * const loanAssignmentHistory = await prisma.loanAssignmentHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LoanAssignmentHistoryFindUniqueArgs>(args: SelectSubset<T, LoanAssignmentHistoryFindUniqueArgs<ExtArgs>>): Prisma__LoanAssignmentHistoryClient<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LoanAssignmentHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LoanAssignmentHistoryFindUniqueOrThrowArgs} args - Arguments to find a LoanAssignmentHistory
     * @example
     * // Get one LoanAssignmentHistory
     * const loanAssignmentHistory = await prisma.loanAssignmentHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LoanAssignmentHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, LoanAssignmentHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LoanAssignmentHistoryClient<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LoanAssignmentHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanAssignmentHistoryFindFirstArgs} args - Arguments to find a LoanAssignmentHistory
     * @example
     * // Get one LoanAssignmentHistory
     * const loanAssignmentHistory = await prisma.loanAssignmentHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LoanAssignmentHistoryFindFirstArgs>(args?: SelectSubset<T, LoanAssignmentHistoryFindFirstArgs<ExtArgs>>): Prisma__LoanAssignmentHistoryClient<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LoanAssignmentHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanAssignmentHistoryFindFirstOrThrowArgs} args - Arguments to find a LoanAssignmentHistory
     * @example
     * // Get one LoanAssignmentHistory
     * const loanAssignmentHistory = await prisma.loanAssignmentHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LoanAssignmentHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, LoanAssignmentHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__LoanAssignmentHistoryClient<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LoanAssignmentHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanAssignmentHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LoanAssignmentHistories
     * const loanAssignmentHistories = await prisma.loanAssignmentHistory.findMany()
     * 
     * // Get first 10 LoanAssignmentHistories
     * const loanAssignmentHistories = await prisma.loanAssignmentHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loanAssignmentHistoryWithIdOnly = await prisma.loanAssignmentHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LoanAssignmentHistoryFindManyArgs>(args?: SelectSubset<T, LoanAssignmentHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LoanAssignmentHistory.
     * @param {LoanAssignmentHistoryCreateArgs} args - Arguments to create a LoanAssignmentHistory.
     * @example
     * // Create one LoanAssignmentHistory
     * const LoanAssignmentHistory = await prisma.loanAssignmentHistory.create({
     *   data: {
     *     // ... data to create a LoanAssignmentHistory
     *   }
     * })
     * 
     */
    create<T extends LoanAssignmentHistoryCreateArgs>(args: SelectSubset<T, LoanAssignmentHistoryCreateArgs<ExtArgs>>): Prisma__LoanAssignmentHistoryClient<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LoanAssignmentHistories.
     * @param {LoanAssignmentHistoryCreateManyArgs} args - Arguments to create many LoanAssignmentHistories.
     * @example
     * // Create many LoanAssignmentHistories
     * const loanAssignmentHistory = await prisma.loanAssignmentHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LoanAssignmentHistoryCreateManyArgs>(args?: SelectSubset<T, LoanAssignmentHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LoanAssignmentHistories and returns the data saved in the database.
     * @param {LoanAssignmentHistoryCreateManyAndReturnArgs} args - Arguments to create many LoanAssignmentHistories.
     * @example
     * // Create many LoanAssignmentHistories
     * const loanAssignmentHistory = await prisma.loanAssignmentHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LoanAssignmentHistories and only return the `id`
     * const loanAssignmentHistoryWithIdOnly = await prisma.loanAssignmentHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LoanAssignmentHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, LoanAssignmentHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LoanAssignmentHistory.
     * @param {LoanAssignmentHistoryDeleteArgs} args - Arguments to delete one LoanAssignmentHistory.
     * @example
     * // Delete one LoanAssignmentHistory
     * const LoanAssignmentHistory = await prisma.loanAssignmentHistory.delete({
     *   where: {
     *     // ... filter to delete one LoanAssignmentHistory
     *   }
     * })
     * 
     */
    delete<T extends LoanAssignmentHistoryDeleteArgs>(args: SelectSubset<T, LoanAssignmentHistoryDeleteArgs<ExtArgs>>): Prisma__LoanAssignmentHistoryClient<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LoanAssignmentHistory.
     * @param {LoanAssignmentHistoryUpdateArgs} args - Arguments to update one LoanAssignmentHistory.
     * @example
     * // Update one LoanAssignmentHistory
     * const loanAssignmentHistory = await prisma.loanAssignmentHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LoanAssignmentHistoryUpdateArgs>(args: SelectSubset<T, LoanAssignmentHistoryUpdateArgs<ExtArgs>>): Prisma__LoanAssignmentHistoryClient<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LoanAssignmentHistories.
     * @param {LoanAssignmentHistoryDeleteManyArgs} args - Arguments to filter LoanAssignmentHistories to delete.
     * @example
     * // Delete a few LoanAssignmentHistories
     * const { count } = await prisma.loanAssignmentHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LoanAssignmentHistoryDeleteManyArgs>(args?: SelectSubset<T, LoanAssignmentHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoanAssignmentHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanAssignmentHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LoanAssignmentHistories
     * const loanAssignmentHistory = await prisma.loanAssignmentHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LoanAssignmentHistoryUpdateManyArgs>(args: SelectSubset<T, LoanAssignmentHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoanAssignmentHistories and returns the data updated in the database.
     * @param {LoanAssignmentHistoryUpdateManyAndReturnArgs} args - Arguments to update many LoanAssignmentHistories.
     * @example
     * // Update many LoanAssignmentHistories
     * const loanAssignmentHistory = await prisma.loanAssignmentHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LoanAssignmentHistories and only return the `id`
     * const loanAssignmentHistoryWithIdOnly = await prisma.loanAssignmentHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LoanAssignmentHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, LoanAssignmentHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LoanAssignmentHistory.
     * @param {LoanAssignmentHistoryUpsertArgs} args - Arguments to update or create a LoanAssignmentHistory.
     * @example
     * // Update or create a LoanAssignmentHistory
     * const loanAssignmentHistory = await prisma.loanAssignmentHistory.upsert({
     *   create: {
     *     // ... data to create a LoanAssignmentHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LoanAssignmentHistory we want to update
     *   }
     * })
     */
    upsert<T extends LoanAssignmentHistoryUpsertArgs>(args: SelectSubset<T, LoanAssignmentHistoryUpsertArgs<ExtArgs>>): Prisma__LoanAssignmentHistoryClient<$Result.GetResult<Prisma.$LoanAssignmentHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LoanAssignmentHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanAssignmentHistoryCountArgs} args - Arguments to filter LoanAssignmentHistories to count.
     * @example
     * // Count the number of LoanAssignmentHistories
     * const count = await prisma.loanAssignmentHistory.count({
     *   where: {
     *     // ... the filter for the LoanAssignmentHistories we want to count
     *   }
     * })
    **/
    count<T extends LoanAssignmentHistoryCountArgs>(
      args?: Subset<T, LoanAssignmentHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoanAssignmentHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LoanAssignmentHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanAssignmentHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoanAssignmentHistoryAggregateArgs>(args: Subset<T, LoanAssignmentHistoryAggregateArgs>): Prisma.PrismaPromise<GetLoanAssignmentHistoryAggregateType<T>>

    /**
     * Group by LoanAssignmentHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanAssignmentHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoanAssignmentHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoanAssignmentHistoryGroupByArgs['orderBy'] }
        : { orderBy?: LoanAssignmentHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoanAssignmentHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoanAssignmentHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LoanAssignmentHistory model
   */
  readonly fields: LoanAssignmentHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LoanAssignmentHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoanAssignmentHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    loan<T extends LoanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LoanDefaultArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    oldOfficer<T extends LoanAssignmentHistory$oldOfficerArgs<ExtArgs> = {}>(args?: Subset<T, LoanAssignmentHistory$oldOfficerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    newOfficer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    oldBranch<T extends LoanAssignmentHistory$oldBranchArgs<ExtArgs> = {}>(args?: Subset<T, LoanAssignmentHistory$oldBranchArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    newBranch<T extends LoanAssignmentHistory$newBranchArgs<ExtArgs> = {}>(args?: Subset<T, LoanAssignmentHistory$newBranchArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    changedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LoanAssignmentHistory model
   */
  interface LoanAssignmentHistoryFieldRefs {
    readonly id: FieldRef<"LoanAssignmentHistory", 'String'>
    readonly loanId: FieldRef<"LoanAssignmentHistory", 'String'>
    readonly oldOfficerId: FieldRef<"LoanAssignmentHistory", 'String'>
    readonly newOfficerId: FieldRef<"LoanAssignmentHistory", 'String'>
    readonly oldBranchId: FieldRef<"LoanAssignmentHistory", 'String'>
    readonly newBranchId: FieldRef<"LoanAssignmentHistory", 'String'>
    readonly changedByUserId: FieldRef<"LoanAssignmentHistory", 'String'>
    readonly reason: FieldRef<"LoanAssignmentHistory", 'String'>
    readonly changedAt: FieldRef<"LoanAssignmentHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LoanAssignmentHistory findUnique
   */
  export type LoanAssignmentHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which LoanAssignmentHistory to fetch.
     */
    where: LoanAssignmentHistoryWhereUniqueInput
  }

  /**
   * LoanAssignmentHistory findUniqueOrThrow
   */
  export type LoanAssignmentHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which LoanAssignmentHistory to fetch.
     */
    where: LoanAssignmentHistoryWhereUniqueInput
  }

  /**
   * LoanAssignmentHistory findFirst
   */
  export type LoanAssignmentHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which LoanAssignmentHistory to fetch.
     */
    where?: LoanAssignmentHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanAssignmentHistories to fetch.
     */
    orderBy?: LoanAssignmentHistoryOrderByWithRelationInput | LoanAssignmentHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoanAssignmentHistories.
     */
    cursor?: LoanAssignmentHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanAssignmentHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanAssignmentHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoanAssignmentHistories.
     */
    distinct?: LoanAssignmentHistoryScalarFieldEnum | LoanAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * LoanAssignmentHistory findFirstOrThrow
   */
  export type LoanAssignmentHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which LoanAssignmentHistory to fetch.
     */
    where?: LoanAssignmentHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanAssignmentHistories to fetch.
     */
    orderBy?: LoanAssignmentHistoryOrderByWithRelationInput | LoanAssignmentHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoanAssignmentHistories.
     */
    cursor?: LoanAssignmentHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanAssignmentHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanAssignmentHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoanAssignmentHistories.
     */
    distinct?: LoanAssignmentHistoryScalarFieldEnum | LoanAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * LoanAssignmentHistory findMany
   */
  export type LoanAssignmentHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which LoanAssignmentHistories to fetch.
     */
    where?: LoanAssignmentHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanAssignmentHistories to fetch.
     */
    orderBy?: LoanAssignmentHistoryOrderByWithRelationInput | LoanAssignmentHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LoanAssignmentHistories.
     */
    cursor?: LoanAssignmentHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanAssignmentHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanAssignmentHistories.
     */
    skip?: number
    distinct?: LoanAssignmentHistoryScalarFieldEnum | LoanAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * LoanAssignmentHistory create
   */
  export type LoanAssignmentHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a LoanAssignmentHistory.
     */
    data: XOR<LoanAssignmentHistoryCreateInput, LoanAssignmentHistoryUncheckedCreateInput>
  }

  /**
   * LoanAssignmentHistory createMany
   */
  export type LoanAssignmentHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LoanAssignmentHistories.
     */
    data: LoanAssignmentHistoryCreateManyInput | LoanAssignmentHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LoanAssignmentHistory createManyAndReturn
   */
  export type LoanAssignmentHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many LoanAssignmentHistories.
     */
    data: LoanAssignmentHistoryCreateManyInput | LoanAssignmentHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LoanAssignmentHistory update
   */
  export type LoanAssignmentHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a LoanAssignmentHistory.
     */
    data: XOR<LoanAssignmentHistoryUpdateInput, LoanAssignmentHistoryUncheckedUpdateInput>
    /**
     * Choose, which LoanAssignmentHistory to update.
     */
    where: LoanAssignmentHistoryWhereUniqueInput
  }

  /**
   * LoanAssignmentHistory updateMany
   */
  export type LoanAssignmentHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LoanAssignmentHistories.
     */
    data: XOR<LoanAssignmentHistoryUpdateManyMutationInput, LoanAssignmentHistoryUncheckedUpdateManyInput>
    /**
     * Filter which LoanAssignmentHistories to update
     */
    where?: LoanAssignmentHistoryWhereInput
    /**
     * Limit how many LoanAssignmentHistories to update.
     */
    limit?: number
  }

  /**
   * LoanAssignmentHistory updateManyAndReturn
   */
  export type LoanAssignmentHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * The data used to update LoanAssignmentHistories.
     */
    data: XOR<LoanAssignmentHistoryUpdateManyMutationInput, LoanAssignmentHistoryUncheckedUpdateManyInput>
    /**
     * Filter which LoanAssignmentHistories to update
     */
    where?: LoanAssignmentHistoryWhereInput
    /**
     * Limit how many LoanAssignmentHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LoanAssignmentHistory upsert
   */
  export type LoanAssignmentHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the LoanAssignmentHistory to update in case it exists.
     */
    where: LoanAssignmentHistoryWhereUniqueInput
    /**
     * In case the LoanAssignmentHistory found by the `where` argument doesn't exist, create a new LoanAssignmentHistory with this data.
     */
    create: XOR<LoanAssignmentHistoryCreateInput, LoanAssignmentHistoryUncheckedCreateInput>
    /**
     * In case the LoanAssignmentHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoanAssignmentHistoryUpdateInput, LoanAssignmentHistoryUncheckedUpdateInput>
  }

  /**
   * LoanAssignmentHistory delete
   */
  export type LoanAssignmentHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
    /**
     * Filter which LoanAssignmentHistory to delete.
     */
    where: LoanAssignmentHistoryWhereUniqueInput
  }

  /**
   * LoanAssignmentHistory deleteMany
   */
  export type LoanAssignmentHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoanAssignmentHistories to delete
     */
    where?: LoanAssignmentHistoryWhereInput
    /**
     * Limit how many LoanAssignmentHistories to delete.
     */
    limit?: number
  }

  /**
   * LoanAssignmentHistory.oldOfficer
   */
  export type LoanAssignmentHistory$oldOfficerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * LoanAssignmentHistory.oldBranch
   */
  export type LoanAssignmentHistory$oldBranchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
  }

  /**
   * LoanAssignmentHistory.newBranch
   */
  export type LoanAssignmentHistory$newBranchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
  }

  /**
   * LoanAssignmentHistory without action
   */
  export type LoanAssignmentHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanAssignmentHistory
     */
    select?: LoanAssignmentHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanAssignmentHistory
     */
    omit?: LoanAssignmentHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanAssignmentHistoryInclude<ExtArgs> | null
  }


  /**
   * Model CustomerReassignment
   */

  export type AggregateCustomerReassignment = {
    _count: CustomerReassignmentCountAggregateOutputType | null
    _min: CustomerReassignmentMinAggregateOutputType | null
    _max: CustomerReassignmentMaxAggregateOutputType | null
  }

  export type CustomerReassignmentMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    oldBranchId: string | null
    newBranchId: string | null
    oldOfficerId: string | null
    newOfficerId: string | null
    changedByUserId: string | null
    reason: string | null
    previousOfficerEndAt: Date | null
    newOfficerStartAt: Date | null
    changedAt: Date | null
  }

  export type CustomerReassignmentMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    oldBranchId: string | null
    newBranchId: string | null
    oldOfficerId: string | null
    newOfficerId: string | null
    changedByUserId: string | null
    reason: string | null
    previousOfficerEndAt: Date | null
    newOfficerStartAt: Date | null
    changedAt: Date | null
  }

  export type CustomerReassignmentCountAggregateOutputType = {
    id: number
    customerId: number
    oldBranchId: number
    newBranchId: number
    oldOfficerId: number
    newOfficerId: number
    changedByUserId: number
    reason: number
    previousOfficerEndAt: number
    newOfficerStartAt: number
    changedAt: number
    _all: number
  }


  export type CustomerReassignmentMinAggregateInputType = {
    id?: true
    customerId?: true
    oldBranchId?: true
    newBranchId?: true
    oldOfficerId?: true
    newOfficerId?: true
    changedByUserId?: true
    reason?: true
    previousOfficerEndAt?: true
    newOfficerStartAt?: true
    changedAt?: true
  }

  export type CustomerReassignmentMaxAggregateInputType = {
    id?: true
    customerId?: true
    oldBranchId?: true
    newBranchId?: true
    oldOfficerId?: true
    newOfficerId?: true
    changedByUserId?: true
    reason?: true
    previousOfficerEndAt?: true
    newOfficerStartAt?: true
    changedAt?: true
  }

  export type CustomerReassignmentCountAggregateInputType = {
    id?: true
    customerId?: true
    oldBranchId?: true
    newBranchId?: true
    oldOfficerId?: true
    newOfficerId?: true
    changedByUserId?: true
    reason?: true
    previousOfficerEndAt?: true
    newOfficerStartAt?: true
    changedAt?: true
    _all?: true
  }

  export type CustomerReassignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerReassignment to aggregate.
     */
    where?: CustomerReassignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerReassignments to fetch.
     */
    orderBy?: CustomerReassignmentOrderByWithRelationInput | CustomerReassignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerReassignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerReassignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerReassignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerReassignments
    **/
    _count?: true | CustomerReassignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerReassignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerReassignmentMaxAggregateInputType
  }

  export type GetCustomerReassignmentAggregateType<T extends CustomerReassignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerReassignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerReassignment[P]>
      : GetScalarType<T[P], AggregateCustomerReassignment[P]>
  }




  export type CustomerReassignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerReassignmentWhereInput
    orderBy?: CustomerReassignmentOrderByWithAggregationInput | CustomerReassignmentOrderByWithAggregationInput[]
    by: CustomerReassignmentScalarFieldEnum[] | CustomerReassignmentScalarFieldEnum
    having?: CustomerReassignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerReassignmentCountAggregateInputType | true
    _min?: CustomerReassignmentMinAggregateInputType
    _max?: CustomerReassignmentMaxAggregateInputType
  }

  export type CustomerReassignmentGroupByOutputType = {
    id: string
    customerId: string
    oldBranchId: string | null
    newBranchId: string
    oldOfficerId: string | null
    newOfficerId: string | null
    changedByUserId: string
    reason: string | null
    previousOfficerEndAt: Date | null
    newOfficerStartAt: Date | null
    changedAt: Date
    _count: CustomerReassignmentCountAggregateOutputType | null
    _min: CustomerReassignmentMinAggregateOutputType | null
    _max: CustomerReassignmentMaxAggregateOutputType | null
  }

  type GetCustomerReassignmentGroupByPayload<T extends CustomerReassignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerReassignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerReassignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerReassignmentGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerReassignmentGroupByOutputType[P]>
        }
      >
    >


  export type CustomerReassignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    oldBranchId?: boolean
    newBranchId?: boolean
    oldOfficerId?: boolean
    newOfficerId?: boolean
    changedByUserId?: boolean
    reason?: boolean
    previousOfficerEndAt?: boolean
    newOfficerStartAt?: boolean
    changedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    oldBranch?: boolean | CustomerReassignment$oldBranchArgs<ExtArgs>
    newBranch?: boolean | BranchDefaultArgs<ExtArgs>
    oldOfficer?: boolean | CustomerReassignment$oldOfficerArgs<ExtArgs>
    newOfficer?: boolean | CustomerReassignment$newOfficerArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerReassignment"]>

  export type CustomerReassignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    oldBranchId?: boolean
    newBranchId?: boolean
    oldOfficerId?: boolean
    newOfficerId?: boolean
    changedByUserId?: boolean
    reason?: boolean
    previousOfficerEndAt?: boolean
    newOfficerStartAt?: boolean
    changedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    oldBranch?: boolean | CustomerReassignment$oldBranchArgs<ExtArgs>
    newBranch?: boolean | BranchDefaultArgs<ExtArgs>
    oldOfficer?: boolean | CustomerReassignment$oldOfficerArgs<ExtArgs>
    newOfficer?: boolean | CustomerReassignment$newOfficerArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerReassignment"]>

  export type CustomerReassignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    oldBranchId?: boolean
    newBranchId?: boolean
    oldOfficerId?: boolean
    newOfficerId?: boolean
    changedByUserId?: boolean
    reason?: boolean
    previousOfficerEndAt?: boolean
    newOfficerStartAt?: boolean
    changedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    oldBranch?: boolean | CustomerReassignment$oldBranchArgs<ExtArgs>
    newBranch?: boolean | BranchDefaultArgs<ExtArgs>
    oldOfficer?: boolean | CustomerReassignment$oldOfficerArgs<ExtArgs>
    newOfficer?: boolean | CustomerReassignment$newOfficerArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerReassignment"]>

  export type CustomerReassignmentSelectScalar = {
    id?: boolean
    customerId?: boolean
    oldBranchId?: boolean
    newBranchId?: boolean
    oldOfficerId?: boolean
    newOfficerId?: boolean
    changedByUserId?: boolean
    reason?: boolean
    previousOfficerEndAt?: boolean
    newOfficerStartAt?: boolean
    changedAt?: boolean
  }

  export type CustomerReassignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "oldBranchId" | "newBranchId" | "oldOfficerId" | "newOfficerId" | "changedByUserId" | "reason" | "previousOfficerEndAt" | "newOfficerStartAt" | "changedAt", ExtArgs["result"]["customerReassignment"]>
  export type CustomerReassignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    oldBranch?: boolean | CustomerReassignment$oldBranchArgs<ExtArgs>
    newBranch?: boolean | BranchDefaultArgs<ExtArgs>
    oldOfficer?: boolean | CustomerReassignment$oldOfficerArgs<ExtArgs>
    newOfficer?: boolean | CustomerReassignment$newOfficerArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CustomerReassignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    oldBranch?: boolean | CustomerReassignment$oldBranchArgs<ExtArgs>
    newBranch?: boolean | BranchDefaultArgs<ExtArgs>
    oldOfficer?: boolean | CustomerReassignment$oldOfficerArgs<ExtArgs>
    newOfficer?: boolean | CustomerReassignment$newOfficerArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CustomerReassignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    oldBranch?: boolean | CustomerReassignment$oldBranchArgs<ExtArgs>
    newBranch?: boolean | BranchDefaultArgs<ExtArgs>
    oldOfficer?: boolean | CustomerReassignment$oldOfficerArgs<ExtArgs>
    newOfficer?: boolean | CustomerReassignment$newOfficerArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CustomerReassignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerReassignment"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      oldBranch: Prisma.$BranchPayload<ExtArgs> | null
      newBranch: Prisma.$BranchPayload<ExtArgs>
      oldOfficer: Prisma.$UserPayload<ExtArgs> | null
      newOfficer: Prisma.$UserPayload<ExtArgs> | null
      changedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      oldBranchId: string | null
      newBranchId: string
      oldOfficerId: string | null
      newOfficerId: string | null
      changedByUserId: string
      reason: string | null
      previousOfficerEndAt: Date | null
      newOfficerStartAt: Date | null
      changedAt: Date
    }, ExtArgs["result"]["customerReassignment"]>
    composites: {}
  }

  type CustomerReassignmentGetPayload<S extends boolean | null | undefined | CustomerReassignmentDefaultArgs> = $Result.GetResult<Prisma.$CustomerReassignmentPayload, S>

  type CustomerReassignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerReassignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerReassignmentCountAggregateInputType | true
    }

  export interface CustomerReassignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerReassignment'], meta: { name: 'CustomerReassignment' } }
    /**
     * Find zero or one CustomerReassignment that matches the filter.
     * @param {CustomerReassignmentFindUniqueArgs} args - Arguments to find a CustomerReassignment
     * @example
     * // Get one CustomerReassignment
     * const customerReassignment = await prisma.customerReassignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerReassignmentFindUniqueArgs>(args: SelectSubset<T, CustomerReassignmentFindUniqueArgs<ExtArgs>>): Prisma__CustomerReassignmentClient<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerReassignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerReassignmentFindUniqueOrThrowArgs} args - Arguments to find a CustomerReassignment
     * @example
     * // Get one CustomerReassignment
     * const customerReassignment = await prisma.customerReassignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerReassignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerReassignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerReassignmentClient<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerReassignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerReassignmentFindFirstArgs} args - Arguments to find a CustomerReassignment
     * @example
     * // Get one CustomerReassignment
     * const customerReassignment = await prisma.customerReassignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerReassignmentFindFirstArgs>(args?: SelectSubset<T, CustomerReassignmentFindFirstArgs<ExtArgs>>): Prisma__CustomerReassignmentClient<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerReassignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerReassignmentFindFirstOrThrowArgs} args - Arguments to find a CustomerReassignment
     * @example
     * // Get one CustomerReassignment
     * const customerReassignment = await prisma.customerReassignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerReassignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerReassignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerReassignmentClient<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerReassignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerReassignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerReassignments
     * const customerReassignments = await prisma.customerReassignment.findMany()
     * 
     * // Get first 10 CustomerReassignments
     * const customerReassignments = await prisma.customerReassignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerReassignmentWithIdOnly = await prisma.customerReassignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerReassignmentFindManyArgs>(args?: SelectSubset<T, CustomerReassignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerReassignment.
     * @param {CustomerReassignmentCreateArgs} args - Arguments to create a CustomerReassignment.
     * @example
     * // Create one CustomerReassignment
     * const CustomerReassignment = await prisma.customerReassignment.create({
     *   data: {
     *     // ... data to create a CustomerReassignment
     *   }
     * })
     * 
     */
    create<T extends CustomerReassignmentCreateArgs>(args: SelectSubset<T, CustomerReassignmentCreateArgs<ExtArgs>>): Prisma__CustomerReassignmentClient<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerReassignments.
     * @param {CustomerReassignmentCreateManyArgs} args - Arguments to create many CustomerReassignments.
     * @example
     * // Create many CustomerReassignments
     * const customerReassignment = await prisma.customerReassignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerReassignmentCreateManyArgs>(args?: SelectSubset<T, CustomerReassignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerReassignments and returns the data saved in the database.
     * @param {CustomerReassignmentCreateManyAndReturnArgs} args - Arguments to create many CustomerReassignments.
     * @example
     * // Create many CustomerReassignments
     * const customerReassignment = await prisma.customerReassignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerReassignments and only return the `id`
     * const customerReassignmentWithIdOnly = await prisma.customerReassignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerReassignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerReassignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomerReassignment.
     * @param {CustomerReassignmentDeleteArgs} args - Arguments to delete one CustomerReassignment.
     * @example
     * // Delete one CustomerReassignment
     * const CustomerReassignment = await prisma.customerReassignment.delete({
     *   where: {
     *     // ... filter to delete one CustomerReassignment
     *   }
     * })
     * 
     */
    delete<T extends CustomerReassignmentDeleteArgs>(args: SelectSubset<T, CustomerReassignmentDeleteArgs<ExtArgs>>): Prisma__CustomerReassignmentClient<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerReassignment.
     * @param {CustomerReassignmentUpdateArgs} args - Arguments to update one CustomerReassignment.
     * @example
     * // Update one CustomerReassignment
     * const customerReassignment = await prisma.customerReassignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerReassignmentUpdateArgs>(args: SelectSubset<T, CustomerReassignmentUpdateArgs<ExtArgs>>): Prisma__CustomerReassignmentClient<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerReassignments.
     * @param {CustomerReassignmentDeleteManyArgs} args - Arguments to filter CustomerReassignments to delete.
     * @example
     * // Delete a few CustomerReassignments
     * const { count } = await prisma.customerReassignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerReassignmentDeleteManyArgs>(args?: SelectSubset<T, CustomerReassignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerReassignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerReassignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerReassignments
     * const customerReassignment = await prisma.customerReassignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerReassignmentUpdateManyArgs>(args: SelectSubset<T, CustomerReassignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerReassignments and returns the data updated in the database.
     * @param {CustomerReassignmentUpdateManyAndReturnArgs} args - Arguments to update many CustomerReassignments.
     * @example
     * // Update many CustomerReassignments
     * const customerReassignment = await prisma.customerReassignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomerReassignments and only return the `id`
     * const customerReassignmentWithIdOnly = await prisma.customerReassignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerReassignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerReassignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomerReassignment.
     * @param {CustomerReassignmentUpsertArgs} args - Arguments to update or create a CustomerReassignment.
     * @example
     * // Update or create a CustomerReassignment
     * const customerReassignment = await prisma.customerReassignment.upsert({
     *   create: {
     *     // ... data to create a CustomerReassignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerReassignment we want to update
     *   }
     * })
     */
    upsert<T extends CustomerReassignmentUpsertArgs>(args: SelectSubset<T, CustomerReassignmentUpsertArgs<ExtArgs>>): Prisma__CustomerReassignmentClient<$Result.GetResult<Prisma.$CustomerReassignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerReassignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerReassignmentCountArgs} args - Arguments to filter CustomerReassignments to count.
     * @example
     * // Count the number of CustomerReassignments
     * const count = await prisma.customerReassignment.count({
     *   where: {
     *     // ... the filter for the CustomerReassignments we want to count
     *   }
     * })
    **/
    count<T extends CustomerReassignmentCountArgs>(
      args?: Subset<T, CustomerReassignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerReassignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerReassignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerReassignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerReassignmentAggregateArgs>(args: Subset<T, CustomerReassignmentAggregateArgs>): Prisma.PrismaPromise<GetCustomerReassignmentAggregateType<T>>

    /**
     * Group by CustomerReassignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerReassignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerReassignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerReassignmentGroupByArgs['orderBy'] }
        : { orderBy?: CustomerReassignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerReassignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerReassignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerReassignment model
   */
  readonly fields: CustomerReassignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerReassignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerReassignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    oldBranch<T extends CustomerReassignment$oldBranchArgs<ExtArgs> = {}>(args?: Subset<T, CustomerReassignment$oldBranchArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    newBranch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    oldOfficer<T extends CustomerReassignment$oldOfficerArgs<ExtArgs> = {}>(args?: Subset<T, CustomerReassignment$oldOfficerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    newOfficer<T extends CustomerReassignment$newOfficerArgs<ExtArgs> = {}>(args?: Subset<T, CustomerReassignment$newOfficerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    changedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerReassignment model
   */
  interface CustomerReassignmentFieldRefs {
    readonly id: FieldRef<"CustomerReassignment", 'String'>
    readonly customerId: FieldRef<"CustomerReassignment", 'String'>
    readonly oldBranchId: FieldRef<"CustomerReassignment", 'String'>
    readonly newBranchId: FieldRef<"CustomerReassignment", 'String'>
    readonly oldOfficerId: FieldRef<"CustomerReassignment", 'String'>
    readonly newOfficerId: FieldRef<"CustomerReassignment", 'String'>
    readonly changedByUserId: FieldRef<"CustomerReassignment", 'String'>
    readonly reason: FieldRef<"CustomerReassignment", 'String'>
    readonly previousOfficerEndAt: FieldRef<"CustomerReassignment", 'DateTime'>
    readonly newOfficerStartAt: FieldRef<"CustomerReassignment", 'DateTime'>
    readonly changedAt: FieldRef<"CustomerReassignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerReassignment findUnique
   */
  export type CustomerReassignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    /**
     * Filter, which CustomerReassignment to fetch.
     */
    where: CustomerReassignmentWhereUniqueInput
  }

  /**
   * CustomerReassignment findUniqueOrThrow
   */
  export type CustomerReassignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    /**
     * Filter, which CustomerReassignment to fetch.
     */
    where: CustomerReassignmentWhereUniqueInput
  }

  /**
   * CustomerReassignment findFirst
   */
  export type CustomerReassignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    /**
     * Filter, which CustomerReassignment to fetch.
     */
    where?: CustomerReassignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerReassignments to fetch.
     */
    orderBy?: CustomerReassignmentOrderByWithRelationInput | CustomerReassignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerReassignments.
     */
    cursor?: CustomerReassignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerReassignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerReassignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerReassignments.
     */
    distinct?: CustomerReassignmentScalarFieldEnum | CustomerReassignmentScalarFieldEnum[]
  }

  /**
   * CustomerReassignment findFirstOrThrow
   */
  export type CustomerReassignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    /**
     * Filter, which CustomerReassignment to fetch.
     */
    where?: CustomerReassignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerReassignments to fetch.
     */
    orderBy?: CustomerReassignmentOrderByWithRelationInput | CustomerReassignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerReassignments.
     */
    cursor?: CustomerReassignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerReassignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerReassignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerReassignments.
     */
    distinct?: CustomerReassignmentScalarFieldEnum | CustomerReassignmentScalarFieldEnum[]
  }

  /**
   * CustomerReassignment findMany
   */
  export type CustomerReassignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    /**
     * Filter, which CustomerReassignments to fetch.
     */
    where?: CustomerReassignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerReassignments to fetch.
     */
    orderBy?: CustomerReassignmentOrderByWithRelationInput | CustomerReassignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerReassignments.
     */
    cursor?: CustomerReassignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerReassignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerReassignments.
     */
    skip?: number
    distinct?: CustomerReassignmentScalarFieldEnum | CustomerReassignmentScalarFieldEnum[]
  }

  /**
   * CustomerReassignment create
   */
  export type CustomerReassignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerReassignment.
     */
    data: XOR<CustomerReassignmentCreateInput, CustomerReassignmentUncheckedCreateInput>
  }

  /**
   * CustomerReassignment createMany
   */
  export type CustomerReassignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerReassignments.
     */
    data: CustomerReassignmentCreateManyInput | CustomerReassignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerReassignment createManyAndReturn
   */
  export type CustomerReassignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * The data used to create many CustomerReassignments.
     */
    data: CustomerReassignmentCreateManyInput | CustomerReassignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerReassignment update
   */
  export type CustomerReassignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerReassignment.
     */
    data: XOR<CustomerReassignmentUpdateInput, CustomerReassignmentUncheckedUpdateInput>
    /**
     * Choose, which CustomerReassignment to update.
     */
    where: CustomerReassignmentWhereUniqueInput
  }

  /**
   * CustomerReassignment updateMany
   */
  export type CustomerReassignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerReassignments.
     */
    data: XOR<CustomerReassignmentUpdateManyMutationInput, CustomerReassignmentUncheckedUpdateManyInput>
    /**
     * Filter which CustomerReassignments to update
     */
    where?: CustomerReassignmentWhereInput
    /**
     * Limit how many CustomerReassignments to update.
     */
    limit?: number
  }

  /**
   * CustomerReassignment updateManyAndReturn
   */
  export type CustomerReassignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * The data used to update CustomerReassignments.
     */
    data: XOR<CustomerReassignmentUpdateManyMutationInput, CustomerReassignmentUncheckedUpdateManyInput>
    /**
     * Filter which CustomerReassignments to update
     */
    where?: CustomerReassignmentWhereInput
    /**
     * Limit how many CustomerReassignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerReassignment upsert
   */
  export type CustomerReassignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerReassignment to update in case it exists.
     */
    where: CustomerReassignmentWhereUniqueInput
    /**
     * In case the CustomerReassignment found by the `where` argument doesn't exist, create a new CustomerReassignment with this data.
     */
    create: XOR<CustomerReassignmentCreateInput, CustomerReassignmentUncheckedCreateInput>
    /**
     * In case the CustomerReassignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerReassignmentUpdateInput, CustomerReassignmentUncheckedUpdateInput>
  }

  /**
   * CustomerReassignment delete
   */
  export type CustomerReassignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
    /**
     * Filter which CustomerReassignment to delete.
     */
    where: CustomerReassignmentWhereUniqueInput
  }

  /**
   * CustomerReassignment deleteMany
   */
  export type CustomerReassignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerReassignments to delete
     */
    where?: CustomerReassignmentWhereInput
    /**
     * Limit how many CustomerReassignments to delete.
     */
    limit?: number
  }

  /**
   * CustomerReassignment.oldBranch
   */
  export type CustomerReassignment$oldBranchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
  }

  /**
   * CustomerReassignment.oldOfficer
   */
  export type CustomerReassignment$oldOfficerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CustomerReassignment.newOfficer
   */
  export type CustomerReassignment$newOfficerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CustomerReassignment without action
   */
  export type CustomerReassignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerReassignment
     */
    select?: CustomerReassignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerReassignment
     */
    omit?: CustomerReassignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerReassignmentInclude<ExtArgs> | null
  }


  /**
   * Model DocumentType
   */

  export type AggregateDocumentType = {
    _count: DocumentTypeCountAggregateOutputType | null
    _min: DocumentTypeMinAggregateOutputType | null
    _max: DocumentTypeMaxAggregateOutputType | null
  }

  export type DocumentTypeMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type DocumentTypeMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type DocumentTypeCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type DocumentTypeMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type DocumentTypeMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type DocumentTypeCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type DocumentTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentType to aggregate.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentTypes
    **/
    _count?: true | DocumentTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentTypeMaxAggregateInputType
  }

  export type GetDocumentTypeAggregateType<T extends DocumentTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentType[P]>
      : GetScalarType<T[P], AggregateDocumentType[P]>
  }




  export type DocumentTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTypeWhereInput
    orderBy?: DocumentTypeOrderByWithAggregationInput | DocumentTypeOrderByWithAggregationInput[]
    by: DocumentTypeScalarFieldEnum[] | DocumentTypeScalarFieldEnum
    having?: DocumentTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentTypeCountAggregateInputType | true
    _min?: DocumentTypeMinAggregateInputType
    _max?: DocumentTypeMaxAggregateInputType
  }

  export type DocumentTypeGroupByOutputType = {
    id: string
    code: string
    name: string
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: DocumentTypeCountAggregateOutputType | null
    _min: DocumentTypeMinAggregateOutputType | null
    _max: DocumentTypeMaxAggregateOutputType | null
  }

  type GetDocumentTypeGroupByPayload<T extends DocumentTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentTypeGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentTypeGroupByOutputType[P]>
        }
      >
    >


  export type DocumentTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    customerDocs?: boolean | DocumentType$customerDocsArgs<ExtArgs>
    loanDocs?: boolean | DocumentType$loanDocsArgs<ExtArgs>
    _count?: boolean | DocumentTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentType"]>

  export type DocumentTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["documentType"]>

  export type DocumentTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["documentType"]>

  export type DocumentTypeSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type DocumentTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "description" | "isActive" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["documentType"]>
  export type DocumentTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customerDocs?: boolean | DocumentType$customerDocsArgs<ExtArgs>
    loanDocs?: boolean | DocumentType$loanDocsArgs<ExtArgs>
    _count?: boolean | DocumentTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DocumentTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DocumentTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentType"
    objects: {
      customerDocs: Prisma.$CustomerDocumentPayload<ExtArgs>[]
      loanDocs: Prisma.$LoanDocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["documentType"]>
    composites: {}
  }

  type DocumentTypeGetPayload<S extends boolean | null | undefined | DocumentTypeDefaultArgs> = $Result.GetResult<Prisma.$DocumentTypePayload, S>

  type DocumentTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentTypeCountAggregateInputType | true
    }

  export interface DocumentTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentType'], meta: { name: 'DocumentType' } }
    /**
     * Find zero or one DocumentType that matches the filter.
     * @param {DocumentTypeFindUniqueArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentTypeFindUniqueArgs>(args: SelectSubset<T, DocumentTypeFindUniqueArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DocumentType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentTypeFindUniqueOrThrowArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeFindFirstArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentTypeFindFirstArgs>(args?: SelectSubset<T, DocumentTypeFindFirstArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeFindFirstOrThrowArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DocumentTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentTypes
     * const documentTypes = await prisma.documentType.findMany()
     * 
     * // Get first 10 DocumentTypes
     * const documentTypes = await prisma.documentType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentTypeWithIdOnly = await prisma.documentType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentTypeFindManyArgs>(args?: SelectSubset<T, DocumentTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DocumentType.
     * @param {DocumentTypeCreateArgs} args - Arguments to create a DocumentType.
     * @example
     * // Create one DocumentType
     * const DocumentType = await prisma.documentType.create({
     *   data: {
     *     // ... data to create a DocumentType
     *   }
     * })
     * 
     */
    create<T extends DocumentTypeCreateArgs>(args: SelectSubset<T, DocumentTypeCreateArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DocumentTypes.
     * @param {DocumentTypeCreateManyArgs} args - Arguments to create many DocumentTypes.
     * @example
     * // Create many DocumentTypes
     * const documentType = await prisma.documentType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentTypeCreateManyArgs>(args?: SelectSubset<T, DocumentTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentTypes and returns the data saved in the database.
     * @param {DocumentTypeCreateManyAndReturnArgs} args - Arguments to create many DocumentTypes.
     * @example
     * // Create many DocumentTypes
     * const documentType = await prisma.documentType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentTypes and only return the `id`
     * const documentTypeWithIdOnly = await prisma.documentType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DocumentType.
     * @param {DocumentTypeDeleteArgs} args - Arguments to delete one DocumentType.
     * @example
     * // Delete one DocumentType
     * const DocumentType = await prisma.documentType.delete({
     *   where: {
     *     // ... filter to delete one DocumentType
     *   }
     * })
     * 
     */
    delete<T extends DocumentTypeDeleteArgs>(args: SelectSubset<T, DocumentTypeDeleteArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DocumentType.
     * @param {DocumentTypeUpdateArgs} args - Arguments to update one DocumentType.
     * @example
     * // Update one DocumentType
     * const documentType = await prisma.documentType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentTypeUpdateArgs>(args: SelectSubset<T, DocumentTypeUpdateArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DocumentTypes.
     * @param {DocumentTypeDeleteManyArgs} args - Arguments to filter DocumentTypes to delete.
     * @example
     * // Delete a few DocumentTypes
     * const { count } = await prisma.documentType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentTypeDeleteManyArgs>(args?: SelectSubset<T, DocumentTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentTypes
     * const documentType = await prisma.documentType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentTypeUpdateManyArgs>(args: SelectSubset<T, DocumentTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentTypes and returns the data updated in the database.
     * @param {DocumentTypeUpdateManyAndReturnArgs} args - Arguments to update many DocumentTypes.
     * @example
     * // Update many DocumentTypes
     * const documentType = await prisma.documentType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DocumentTypes and only return the `id`
     * const documentTypeWithIdOnly = await prisma.documentType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DocumentType.
     * @param {DocumentTypeUpsertArgs} args - Arguments to update or create a DocumentType.
     * @example
     * // Update or create a DocumentType
     * const documentType = await prisma.documentType.upsert({
     *   create: {
     *     // ... data to create a DocumentType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentType we want to update
     *   }
     * })
     */
    upsert<T extends DocumentTypeUpsertArgs>(args: SelectSubset<T, DocumentTypeUpsertArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DocumentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeCountArgs} args - Arguments to filter DocumentTypes to count.
     * @example
     * // Count the number of DocumentTypes
     * const count = await prisma.documentType.count({
     *   where: {
     *     // ... the filter for the DocumentTypes we want to count
     *   }
     * })
    **/
    count<T extends DocumentTypeCountArgs>(
      args?: Subset<T, DocumentTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentTypeAggregateArgs>(args: Subset<T, DocumentTypeAggregateArgs>): Prisma.PrismaPromise<GetDocumentTypeAggregateType<T>>

    /**
     * Group by DocumentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentTypeGroupByArgs['orderBy'] }
        : { orderBy?: DocumentTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentType model
   */
  readonly fields: DocumentTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customerDocs<T extends DocumentType$customerDocsArgs<ExtArgs> = {}>(args?: Subset<T, DocumentType$customerDocsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    loanDocs<T extends DocumentType$loanDocsArgs<ExtArgs> = {}>(args?: Subset<T, DocumentType$loanDocsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentType model
   */
  interface DocumentTypeFieldRefs {
    readonly id: FieldRef<"DocumentType", 'String'>
    readonly code: FieldRef<"DocumentType", 'String'>
    readonly name: FieldRef<"DocumentType", 'String'>
    readonly description: FieldRef<"DocumentType", 'String'>
    readonly isActive: FieldRef<"DocumentType", 'Boolean'>
    readonly createdAt: FieldRef<"DocumentType", 'DateTime'>
    readonly updatedAt: FieldRef<"DocumentType", 'DateTime'>
    readonly deletedAt: FieldRef<"DocumentType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DocumentType findUnique
   */
  export type DocumentTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType findUniqueOrThrow
   */
  export type DocumentTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType findFirst
   */
  export type DocumentTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTypes.
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTypes.
     */
    distinct?: DocumentTypeScalarFieldEnum | DocumentTypeScalarFieldEnum[]
  }

  /**
   * DocumentType findFirstOrThrow
   */
  export type DocumentTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTypes.
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTypes.
     */
    distinct?: DocumentTypeScalarFieldEnum | DocumentTypeScalarFieldEnum[]
  }

  /**
   * DocumentType findMany
   */
  export type DocumentTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTypes to fetch.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentTypes.
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    distinct?: DocumentTypeScalarFieldEnum | DocumentTypeScalarFieldEnum[]
  }

  /**
   * DocumentType create
   */
  export type DocumentTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentType.
     */
    data: XOR<DocumentTypeCreateInput, DocumentTypeUncheckedCreateInput>
  }

  /**
   * DocumentType createMany
   */
  export type DocumentTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentTypes.
     */
    data: DocumentTypeCreateManyInput | DocumentTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentType createManyAndReturn
   */
  export type DocumentTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * The data used to create many DocumentTypes.
     */
    data: DocumentTypeCreateManyInput | DocumentTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentType update
   */
  export type DocumentTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentType.
     */
    data: XOR<DocumentTypeUpdateInput, DocumentTypeUncheckedUpdateInput>
    /**
     * Choose, which DocumentType to update.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType updateMany
   */
  export type DocumentTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentTypes.
     */
    data: XOR<DocumentTypeUpdateManyMutationInput, DocumentTypeUncheckedUpdateManyInput>
    /**
     * Filter which DocumentTypes to update
     */
    where?: DocumentTypeWhereInput
    /**
     * Limit how many DocumentTypes to update.
     */
    limit?: number
  }

  /**
   * DocumentType updateManyAndReturn
   */
  export type DocumentTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * The data used to update DocumentTypes.
     */
    data: XOR<DocumentTypeUpdateManyMutationInput, DocumentTypeUncheckedUpdateManyInput>
    /**
     * Filter which DocumentTypes to update
     */
    where?: DocumentTypeWhereInput
    /**
     * Limit how many DocumentTypes to update.
     */
    limit?: number
  }

  /**
   * DocumentType upsert
   */
  export type DocumentTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentType to update in case it exists.
     */
    where: DocumentTypeWhereUniqueInput
    /**
     * In case the DocumentType found by the `where` argument doesn't exist, create a new DocumentType with this data.
     */
    create: XOR<DocumentTypeCreateInput, DocumentTypeUncheckedCreateInput>
    /**
     * In case the DocumentType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentTypeUpdateInput, DocumentTypeUncheckedUpdateInput>
  }

  /**
   * DocumentType delete
   */
  export type DocumentTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter which DocumentType to delete.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType deleteMany
   */
  export type DocumentTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentTypes to delete
     */
    where?: DocumentTypeWhereInput
    /**
     * Limit how many DocumentTypes to delete.
     */
    limit?: number
  }

  /**
   * DocumentType.customerDocs
   */
  export type DocumentType$customerDocsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentInclude<ExtArgs> | null
    where?: CustomerDocumentWhereInput
    orderBy?: CustomerDocumentOrderByWithRelationInput | CustomerDocumentOrderByWithRelationInput[]
    cursor?: CustomerDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerDocumentScalarFieldEnum | CustomerDocumentScalarFieldEnum[]
  }

  /**
   * DocumentType.loanDocs
   */
  export type DocumentType$loanDocsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentInclude<ExtArgs> | null
    where?: LoanDocumentWhereInput
    orderBy?: LoanDocumentOrderByWithRelationInput | LoanDocumentOrderByWithRelationInput[]
    cursor?: LoanDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanDocumentScalarFieldEnum | LoanDocumentScalarFieldEnum[]
  }

  /**
   * DocumentType without action
   */
  export type DocumentTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
  }


  /**
   * Model CustomerDocument
   */

  export type AggregateCustomerDocument = {
    _count: CustomerDocumentCountAggregateOutputType | null
    _min: CustomerDocumentMinAggregateOutputType | null
    _max: CustomerDocumentMaxAggregateOutputType | null
  }

  export type CustomerDocumentMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    documentTypeId: string | null
    fileUrl: string | null
    issuingAuthority: string | null
    issueDate: Date | null
    expiryDate: Date | null
    verified: boolean | null
    verificationNotes: string | null
    uploadedByUserId: string | null
    uploadedAt: Date | null
    deletedAt: Date | null
  }

  export type CustomerDocumentMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    documentTypeId: string | null
    fileUrl: string | null
    issuingAuthority: string | null
    issueDate: Date | null
    expiryDate: Date | null
    verified: boolean | null
    verificationNotes: string | null
    uploadedByUserId: string | null
    uploadedAt: Date | null
    deletedAt: Date | null
  }

  export type CustomerDocumentCountAggregateOutputType = {
    id: number
    customerId: number
    documentTypeId: number
    fileUrl: number
    issuingAuthority: number
    issueDate: number
    expiryDate: number
    verified: number
    verificationNotes: number
    uploadedByUserId: number
    uploadedAt: number
    deletedAt: number
    _all: number
  }


  export type CustomerDocumentMinAggregateInputType = {
    id?: true
    customerId?: true
    documentTypeId?: true
    fileUrl?: true
    issuingAuthority?: true
    issueDate?: true
    expiryDate?: true
    verified?: true
    verificationNotes?: true
    uploadedByUserId?: true
    uploadedAt?: true
    deletedAt?: true
  }

  export type CustomerDocumentMaxAggregateInputType = {
    id?: true
    customerId?: true
    documentTypeId?: true
    fileUrl?: true
    issuingAuthority?: true
    issueDate?: true
    expiryDate?: true
    verified?: true
    verificationNotes?: true
    uploadedByUserId?: true
    uploadedAt?: true
    deletedAt?: true
  }

  export type CustomerDocumentCountAggregateInputType = {
    id?: true
    customerId?: true
    documentTypeId?: true
    fileUrl?: true
    issuingAuthority?: true
    issueDate?: true
    expiryDate?: true
    verified?: true
    verificationNotes?: true
    uploadedByUserId?: true
    uploadedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type CustomerDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerDocument to aggregate.
     */
    where?: CustomerDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerDocuments to fetch.
     */
    orderBy?: CustomerDocumentOrderByWithRelationInput | CustomerDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerDocuments
    **/
    _count?: true | CustomerDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerDocumentMaxAggregateInputType
  }

  export type GetCustomerDocumentAggregateType<T extends CustomerDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerDocument[P]>
      : GetScalarType<T[P], AggregateCustomerDocument[P]>
  }




  export type CustomerDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerDocumentWhereInput
    orderBy?: CustomerDocumentOrderByWithAggregationInput | CustomerDocumentOrderByWithAggregationInput[]
    by: CustomerDocumentScalarFieldEnum[] | CustomerDocumentScalarFieldEnum
    having?: CustomerDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerDocumentCountAggregateInputType | true
    _min?: CustomerDocumentMinAggregateInputType
    _max?: CustomerDocumentMaxAggregateInputType
  }

  export type CustomerDocumentGroupByOutputType = {
    id: string
    customerId: string
    documentTypeId: string
    fileUrl: string
    issuingAuthority: string | null
    issueDate: Date | null
    expiryDate: Date | null
    verified: boolean
    verificationNotes: string | null
    uploadedByUserId: string
    uploadedAt: Date
    deletedAt: Date | null
    _count: CustomerDocumentCountAggregateOutputType | null
    _min: CustomerDocumentMinAggregateOutputType | null
    _max: CustomerDocumentMaxAggregateOutputType | null
  }

  type GetCustomerDocumentGroupByPayload<T extends CustomerDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerDocumentGroupByOutputType[P]>
        }
      >
    >


  export type CustomerDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    documentTypeId?: boolean
    fileUrl?: boolean
    issuingAuthority?: boolean
    issueDate?: boolean
    expiryDate?: boolean
    verified?: boolean
    verificationNotes?: boolean
    uploadedByUserId?: boolean
    uploadedAt?: boolean
    deletedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerDocument"]>

  export type CustomerDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    documentTypeId?: boolean
    fileUrl?: boolean
    issuingAuthority?: boolean
    issueDate?: boolean
    expiryDate?: boolean
    verified?: boolean
    verificationNotes?: boolean
    uploadedByUserId?: boolean
    uploadedAt?: boolean
    deletedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerDocument"]>

  export type CustomerDocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    documentTypeId?: boolean
    fileUrl?: boolean
    issuingAuthority?: boolean
    issueDate?: boolean
    expiryDate?: boolean
    verified?: boolean
    verificationNotes?: boolean
    uploadedByUserId?: boolean
    uploadedAt?: boolean
    deletedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerDocument"]>

  export type CustomerDocumentSelectScalar = {
    id?: boolean
    customerId?: boolean
    documentTypeId?: boolean
    fileUrl?: boolean
    issuingAuthority?: boolean
    issueDate?: boolean
    expiryDate?: boolean
    verified?: boolean
    verificationNotes?: boolean
    uploadedByUserId?: boolean
    uploadedAt?: boolean
    deletedAt?: boolean
  }

  export type CustomerDocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "documentTypeId" | "fileUrl" | "issuingAuthority" | "issueDate" | "expiryDate" | "verified" | "verificationNotes" | "uploadedByUserId" | "uploadedAt" | "deletedAt", ExtArgs["result"]["customerDocument"]>
  export type CustomerDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CustomerDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CustomerDocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CustomerDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerDocument"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      documentType: Prisma.$DocumentTypePayload<ExtArgs>
      uploadedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      documentTypeId: string
      fileUrl: string
      issuingAuthority: string | null
      issueDate: Date | null
      expiryDate: Date | null
      verified: boolean
      verificationNotes: string | null
      uploadedByUserId: string
      uploadedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["customerDocument"]>
    composites: {}
  }

  type CustomerDocumentGetPayload<S extends boolean | null | undefined | CustomerDocumentDefaultArgs> = $Result.GetResult<Prisma.$CustomerDocumentPayload, S>

  type CustomerDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerDocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerDocumentCountAggregateInputType | true
    }

  export interface CustomerDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerDocument'], meta: { name: 'CustomerDocument' } }
    /**
     * Find zero or one CustomerDocument that matches the filter.
     * @param {CustomerDocumentFindUniqueArgs} args - Arguments to find a CustomerDocument
     * @example
     * // Get one CustomerDocument
     * const customerDocument = await prisma.customerDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerDocumentFindUniqueArgs>(args: SelectSubset<T, CustomerDocumentFindUniqueArgs<ExtArgs>>): Prisma__CustomerDocumentClient<$Result.GetResult<Prisma.$CustomerDocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerDocument that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerDocumentFindUniqueOrThrowArgs} args - Arguments to find a CustomerDocument
     * @example
     * // Get one CustomerDocument
     * const customerDocument = await prisma.customerDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerDocumentClient<$Result.GetResult<Prisma.$CustomerDocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerDocumentFindFirstArgs} args - Arguments to find a CustomerDocument
     * @example
     * // Get one CustomerDocument
     * const customerDocument = await prisma.customerDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerDocumentFindFirstArgs>(args?: SelectSubset<T, CustomerDocumentFindFirstArgs<ExtArgs>>): Prisma__CustomerDocumentClient<$Result.GetResult<Prisma.$CustomerDocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerDocumentFindFirstOrThrowArgs} args - Arguments to find a CustomerDocument
     * @example
     * // Get one CustomerDocument
     * const customerDocument = await prisma.customerDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerDocumentClient<$Result.GetResult<Prisma.$CustomerDocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerDocuments
     * const customerDocuments = await prisma.customerDocument.findMany()
     * 
     * // Get first 10 CustomerDocuments
     * const customerDocuments = await prisma.customerDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerDocumentWithIdOnly = await prisma.customerDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerDocumentFindManyArgs>(args?: SelectSubset<T, CustomerDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerDocument.
     * @param {CustomerDocumentCreateArgs} args - Arguments to create a CustomerDocument.
     * @example
     * // Create one CustomerDocument
     * const CustomerDocument = await prisma.customerDocument.create({
     *   data: {
     *     // ... data to create a CustomerDocument
     *   }
     * })
     * 
     */
    create<T extends CustomerDocumentCreateArgs>(args: SelectSubset<T, CustomerDocumentCreateArgs<ExtArgs>>): Prisma__CustomerDocumentClient<$Result.GetResult<Prisma.$CustomerDocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerDocuments.
     * @param {CustomerDocumentCreateManyArgs} args - Arguments to create many CustomerDocuments.
     * @example
     * // Create many CustomerDocuments
     * const customerDocument = await prisma.customerDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerDocumentCreateManyArgs>(args?: SelectSubset<T, CustomerDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerDocuments and returns the data saved in the database.
     * @param {CustomerDocumentCreateManyAndReturnArgs} args - Arguments to create many CustomerDocuments.
     * @example
     * // Create many CustomerDocuments
     * const customerDocument = await prisma.customerDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerDocuments and only return the `id`
     * const customerDocumentWithIdOnly = await prisma.customerDocument.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerDocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomerDocument.
     * @param {CustomerDocumentDeleteArgs} args - Arguments to delete one CustomerDocument.
     * @example
     * // Delete one CustomerDocument
     * const CustomerDocument = await prisma.customerDocument.delete({
     *   where: {
     *     // ... filter to delete one CustomerDocument
     *   }
     * })
     * 
     */
    delete<T extends CustomerDocumentDeleteArgs>(args: SelectSubset<T, CustomerDocumentDeleteArgs<ExtArgs>>): Prisma__CustomerDocumentClient<$Result.GetResult<Prisma.$CustomerDocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerDocument.
     * @param {CustomerDocumentUpdateArgs} args - Arguments to update one CustomerDocument.
     * @example
     * // Update one CustomerDocument
     * const customerDocument = await prisma.customerDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerDocumentUpdateArgs>(args: SelectSubset<T, CustomerDocumentUpdateArgs<ExtArgs>>): Prisma__CustomerDocumentClient<$Result.GetResult<Prisma.$CustomerDocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerDocuments.
     * @param {CustomerDocumentDeleteManyArgs} args - Arguments to filter CustomerDocuments to delete.
     * @example
     * // Delete a few CustomerDocuments
     * const { count } = await prisma.customerDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDocumentDeleteManyArgs>(args?: SelectSubset<T, CustomerDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerDocuments
     * const customerDocument = await prisma.customerDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerDocumentUpdateManyArgs>(args: SelectSubset<T, CustomerDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerDocuments and returns the data updated in the database.
     * @param {CustomerDocumentUpdateManyAndReturnArgs} args - Arguments to update many CustomerDocuments.
     * @example
     * // Update many CustomerDocuments
     * const customerDocument = await prisma.customerDocument.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomerDocuments and only return the `id`
     * const customerDocumentWithIdOnly = await prisma.customerDocument.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerDocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerDocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerDocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomerDocument.
     * @param {CustomerDocumentUpsertArgs} args - Arguments to update or create a CustomerDocument.
     * @example
     * // Update or create a CustomerDocument
     * const customerDocument = await prisma.customerDocument.upsert({
     *   create: {
     *     // ... data to create a CustomerDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerDocument we want to update
     *   }
     * })
     */
    upsert<T extends CustomerDocumentUpsertArgs>(args: SelectSubset<T, CustomerDocumentUpsertArgs<ExtArgs>>): Prisma__CustomerDocumentClient<$Result.GetResult<Prisma.$CustomerDocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerDocumentCountArgs} args - Arguments to filter CustomerDocuments to count.
     * @example
     * // Count the number of CustomerDocuments
     * const count = await prisma.customerDocument.count({
     *   where: {
     *     // ... the filter for the CustomerDocuments we want to count
     *   }
     * })
    **/
    count<T extends CustomerDocumentCountArgs>(
      args?: Subset<T, CustomerDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerDocumentAggregateArgs>(args: Subset<T, CustomerDocumentAggregateArgs>): Prisma.PrismaPromise<GetCustomerDocumentAggregateType<T>>

    /**
     * Group by CustomerDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerDocumentGroupByArgs['orderBy'] }
        : { orderBy?: CustomerDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerDocument model
   */
  readonly fields: CustomerDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    documentType<T extends DocumentTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTypeDefaultArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerDocument model
   */
  interface CustomerDocumentFieldRefs {
    readonly id: FieldRef<"CustomerDocument", 'String'>
    readonly customerId: FieldRef<"CustomerDocument", 'String'>
    readonly documentTypeId: FieldRef<"CustomerDocument", 'String'>
    readonly fileUrl: FieldRef<"CustomerDocument", 'String'>
    readonly issuingAuthority: FieldRef<"CustomerDocument", 'String'>
    readonly issueDate: FieldRef<"CustomerDocument", 'DateTime'>
    readonly expiryDate: FieldRef<"CustomerDocument", 'DateTime'>
    readonly verified: FieldRef<"CustomerDocument", 'Boolean'>
    readonly verificationNotes: FieldRef<"CustomerDocument", 'String'>
    readonly uploadedByUserId: FieldRef<"CustomerDocument", 'String'>
    readonly uploadedAt: FieldRef<"CustomerDocument", 'DateTime'>
    readonly deletedAt: FieldRef<"CustomerDocument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerDocument findUnique
   */
  export type CustomerDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CustomerDocument to fetch.
     */
    where: CustomerDocumentWhereUniqueInput
  }

  /**
   * CustomerDocument findUniqueOrThrow
   */
  export type CustomerDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CustomerDocument to fetch.
     */
    where: CustomerDocumentWhereUniqueInput
  }

  /**
   * CustomerDocument findFirst
   */
  export type CustomerDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CustomerDocument to fetch.
     */
    where?: CustomerDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerDocuments to fetch.
     */
    orderBy?: CustomerDocumentOrderByWithRelationInput | CustomerDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerDocuments.
     */
    cursor?: CustomerDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerDocuments.
     */
    distinct?: CustomerDocumentScalarFieldEnum | CustomerDocumentScalarFieldEnum[]
  }

  /**
   * CustomerDocument findFirstOrThrow
   */
  export type CustomerDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CustomerDocument to fetch.
     */
    where?: CustomerDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerDocuments to fetch.
     */
    orderBy?: CustomerDocumentOrderByWithRelationInput | CustomerDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerDocuments.
     */
    cursor?: CustomerDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerDocuments.
     */
    distinct?: CustomerDocumentScalarFieldEnum | CustomerDocumentScalarFieldEnum[]
  }

  /**
   * CustomerDocument findMany
   */
  export type CustomerDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CustomerDocuments to fetch.
     */
    where?: CustomerDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerDocuments to fetch.
     */
    orderBy?: CustomerDocumentOrderByWithRelationInput | CustomerDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerDocuments.
     */
    cursor?: CustomerDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerDocuments.
     */
    skip?: number
    distinct?: CustomerDocumentScalarFieldEnum | CustomerDocumentScalarFieldEnum[]
  }

  /**
   * CustomerDocument create
   */
  export type CustomerDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerDocument.
     */
    data: XOR<CustomerDocumentCreateInput, CustomerDocumentUncheckedCreateInput>
  }

  /**
   * CustomerDocument createMany
   */
  export type CustomerDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerDocuments.
     */
    data: CustomerDocumentCreateManyInput | CustomerDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerDocument createManyAndReturn
   */
  export type CustomerDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * The data used to create many CustomerDocuments.
     */
    data: CustomerDocumentCreateManyInput | CustomerDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerDocument update
   */
  export type CustomerDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerDocument.
     */
    data: XOR<CustomerDocumentUpdateInput, CustomerDocumentUncheckedUpdateInput>
    /**
     * Choose, which CustomerDocument to update.
     */
    where: CustomerDocumentWhereUniqueInput
  }

  /**
   * CustomerDocument updateMany
   */
  export type CustomerDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerDocuments.
     */
    data: XOR<CustomerDocumentUpdateManyMutationInput, CustomerDocumentUncheckedUpdateManyInput>
    /**
     * Filter which CustomerDocuments to update
     */
    where?: CustomerDocumentWhereInput
    /**
     * Limit how many CustomerDocuments to update.
     */
    limit?: number
  }

  /**
   * CustomerDocument updateManyAndReturn
   */
  export type CustomerDocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * The data used to update CustomerDocuments.
     */
    data: XOR<CustomerDocumentUpdateManyMutationInput, CustomerDocumentUncheckedUpdateManyInput>
    /**
     * Filter which CustomerDocuments to update
     */
    where?: CustomerDocumentWhereInput
    /**
     * Limit how many CustomerDocuments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerDocument upsert
   */
  export type CustomerDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerDocument to update in case it exists.
     */
    where: CustomerDocumentWhereUniqueInput
    /**
     * In case the CustomerDocument found by the `where` argument doesn't exist, create a new CustomerDocument with this data.
     */
    create: XOR<CustomerDocumentCreateInput, CustomerDocumentUncheckedCreateInput>
    /**
     * In case the CustomerDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerDocumentUpdateInput, CustomerDocumentUncheckedUpdateInput>
  }

  /**
   * CustomerDocument delete
   */
  export type CustomerDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentInclude<ExtArgs> | null
    /**
     * Filter which CustomerDocument to delete.
     */
    where: CustomerDocumentWhereUniqueInput
  }

  /**
   * CustomerDocument deleteMany
   */
  export type CustomerDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerDocuments to delete
     */
    where?: CustomerDocumentWhereInput
    /**
     * Limit how many CustomerDocuments to delete.
     */
    limit?: number
  }

  /**
   * CustomerDocument without action
   */
  export type CustomerDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerDocument
     */
    select?: CustomerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerDocument
     */
    omit?: CustomerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDocumentInclude<ExtArgs> | null
  }


  /**
   * Model LoanDocument
   */

  export type AggregateLoanDocument = {
    _count: LoanDocumentCountAggregateOutputType | null
    _min: LoanDocumentMinAggregateOutputType | null
    _max: LoanDocumentMaxAggregateOutputType | null
  }

  export type LoanDocumentMinAggregateOutputType = {
    id: string | null
    loanId: string | null
    documentTypeId: string | null
    fileUrl: string | null
    issuingAuthority: string | null
    issueDate: Date | null
    expiryDate: Date | null
    verified: boolean | null
    verificationNotes: string | null
    uploadedByUserId: string | null
    uploadedAt: Date | null
    deletedAt: Date | null
  }

  export type LoanDocumentMaxAggregateOutputType = {
    id: string | null
    loanId: string | null
    documentTypeId: string | null
    fileUrl: string | null
    issuingAuthority: string | null
    issueDate: Date | null
    expiryDate: Date | null
    verified: boolean | null
    verificationNotes: string | null
    uploadedByUserId: string | null
    uploadedAt: Date | null
    deletedAt: Date | null
  }

  export type LoanDocumentCountAggregateOutputType = {
    id: number
    loanId: number
    documentTypeId: number
    fileUrl: number
    issuingAuthority: number
    issueDate: number
    expiryDate: number
    verified: number
    verificationNotes: number
    uploadedByUserId: number
    uploadedAt: number
    deletedAt: number
    _all: number
  }


  export type LoanDocumentMinAggregateInputType = {
    id?: true
    loanId?: true
    documentTypeId?: true
    fileUrl?: true
    issuingAuthority?: true
    issueDate?: true
    expiryDate?: true
    verified?: true
    verificationNotes?: true
    uploadedByUserId?: true
    uploadedAt?: true
    deletedAt?: true
  }

  export type LoanDocumentMaxAggregateInputType = {
    id?: true
    loanId?: true
    documentTypeId?: true
    fileUrl?: true
    issuingAuthority?: true
    issueDate?: true
    expiryDate?: true
    verified?: true
    verificationNotes?: true
    uploadedByUserId?: true
    uploadedAt?: true
    deletedAt?: true
  }

  export type LoanDocumentCountAggregateInputType = {
    id?: true
    loanId?: true
    documentTypeId?: true
    fileUrl?: true
    issuingAuthority?: true
    issueDate?: true
    expiryDate?: true
    verified?: true
    verificationNotes?: true
    uploadedByUserId?: true
    uploadedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type LoanDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoanDocument to aggregate.
     */
    where?: LoanDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanDocuments to fetch.
     */
    orderBy?: LoanDocumentOrderByWithRelationInput | LoanDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoanDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LoanDocuments
    **/
    _count?: true | LoanDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoanDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoanDocumentMaxAggregateInputType
  }

  export type GetLoanDocumentAggregateType<T extends LoanDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateLoanDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoanDocument[P]>
      : GetScalarType<T[P], AggregateLoanDocument[P]>
  }




  export type LoanDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanDocumentWhereInput
    orderBy?: LoanDocumentOrderByWithAggregationInput | LoanDocumentOrderByWithAggregationInput[]
    by: LoanDocumentScalarFieldEnum[] | LoanDocumentScalarFieldEnum
    having?: LoanDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoanDocumentCountAggregateInputType | true
    _min?: LoanDocumentMinAggregateInputType
    _max?: LoanDocumentMaxAggregateInputType
  }

  export type LoanDocumentGroupByOutputType = {
    id: string
    loanId: string
    documentTypeId: string
    fileUrl: string
    issuingAuthority: string | null
    issueDate: Date | null
    expiryDate: Date | null
    verified: boolean
    verificationNotes: string | null
    uploadedByUserId: string
    uploadedAt: Date
    deletedAt: Date | null
    _count: LoanDocumentCountAggregateOutputType | null
    _min: LoanDocumentMinAggregateOutputType | null
    _max: LoanDocumentMaxAggregateOutputType | null
  }

  type GetLoanDocumentGroupByPayload<T extends LoanDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoanDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoanDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoanDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], LoanDocumentGroupByOutputType[P]>
        }
      >
    >


  export type LoanDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanId?: boolean
    documentTypeId?: boolean
    fileUrl?: boolean
    issuingAuthority?: boolean
    issueDate?: boolean
    expiryDate?: boolean
    verified?: boolean
    verificationNotes?: boolean
    uploadedByUserId?: boolean
    uploadedAt?: boolean
    deletedAt?: boolean
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loanDocument"]>

  export type LoanDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanId?: boolean
    documentTypeId?: boolean
    fileUrl?: boolean
    issuingAuthority?: boolean
    issueDate?: boolean
    expiryDate?: boolean
    verified?: boolean
    verificationNotes?: boolean
    uploadedByUserId?: boolean
    uploadedAt?: boolean
    deletedAt?: boolean
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loanDocument"]>

  export type LoanDocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanId?: boolean
    documentTypeId?: boolean
    fileUrl?: boolean
    issuingAuthority?: boolean
    issueDate?: boolean
    expiryDate?: boolean
    verified?: boolean
    verificationNotes?: boolean
    uploadedByUserId?: boolean
    uploadedAt?: boolean
    deletedAt?: boolean
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loanDocument"]>

  export type LoanDocumentSelectScalar = {
    id?: boolean
    loanId?: boolean
    documentTypeId?: boolean
    fileUrl?: boolean
    issuingAuthority?: boolean
    issueDate?: boolean
    expiryDate?: boolean
    verified?: boolean
    verificationNotes?: boolean
    uploadedByUserId?: boolean
    uploadedAt?: boolean
    deletedAt?: boolean
  }

  export type LoanDocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "loanId" | "documentTypeId" | "fileUrl" | "issuingAuthority" | "issueDate" | "expiryDate" | "verified" | "verificationNotes" | "uploadedByUserId" | "uploadedAt" | "deletedAt", ExtArgs["result"]["loanDocument"]>
  export type LoanDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LoanDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LoanDocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loan?: boolean | LoanDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LoanDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LoanDocument"
    objects: {
      loan: Prisma.$LoanPayload<ExtArgs>
      documentType: Prisma.$DocumentTypePayload<ExtArgs>
      uploadedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      loanId: string
      documentTypeId: string
      fileUrl: string
      issuingAuthority: string | null
      issueDate: Date | null
      expiryDate: Date | null
      verified: boolean
      verificationNotes: string | null
      uploadedByUserId: string
      uploadedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["loanDocument"]>
    composites: {}
  }

  type LoanDocumentGetPayload<S extends boolean | null | undefined | LoanDocumentDefaultArgs> = $Result.GetResult<Prisma.$LoanDocumentPayload, S>

  type LoanDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LoanDocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LoanDocumentCountAggregateInputType | true
    }

  export interface LoanDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LoanDocument'], meta: { name: 'LoanDocument' } }
    /**
     * Find zero or one LoanDocument that matches the filter.
     * @param {LoanDocumentFindUniqueArgs} args - Arguments to find a LoanDocument
     * @example
     * // Get one LoanDocument
     * const loanDocument = await prisma.loanDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LoanDocumentFindUniqueArgs>(args: SelectSubset<T, LoanDocumentFindUniqueArgs<ExtArgs>>): Prisma__LoanDocumentClient<$Result.GetResult<Prisma.$LoanDocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LoanDocument that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LoanDocumentFindUniqueOrThrowArgs} args - Arguments to find a LoanDocument
     * @example
     * // Get one LoanDocument
     * const loanDocument = await prisma.loanDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LoanDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, LoanDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LoanDocumentClient<$Result.GetResult<Prisma.$LoanDocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LoanDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanDocumentFindFirstArgs} args - Arguments to find a LoanDocument
     * @example
     * // Get one LoanDocument
     * const loanDocument = await prisma.loanDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LoanDocumentFindFirstArgs>(args?: SelectSubset<T, LoanDocumentFindFirstArgs<ExtArgs>>): Prisma__LoanDocumentClient<$Result.GetResult<Prisma.$LoanDocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LoanDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanDocumentFindFirstOrThrowArgs} args - Arguments to find a LoanDocument
     * @example
     * // Get one LoanDocument
     * const loanDocument = await prisma.loanDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LoanDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, LoanDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__LoanDocumentClient<$Result.GetResult<Prisma.$LoanDocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LoanDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LoanDocuments
     * const loanDocuments = await prisma.loanDocument.findMany()
     * 
     * // Get first 10 LoanDocuments
     * const loanDocuments = await prisma.loanDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loanDocumentWithIdOnly = await prisma.loanDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LoanDocumentFindManyArgs>(args?: SelectSubset<T, LoanDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LoanDocument.
     * @param {LoanDocumentCreateArgs} args - Arguments to create a LoanDocument.
     * @example
     * // Create one LoanDocument
     * const LoanDocument = await prisma.loanDocument.create({
     *   data: {
     *     // ... data to create a LoanDocument
     *   }
     * })
     * 
     */
    create<T extends LoanDocumentCreateArgs>(args: SelectSubset<T, LoanDocumentCreateArgs<ExtArgs>>): Prisma__LoanDocumentClient<$Result.GetResult<Prisma.$LoanDocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LoanDocuments.
     * @param {LoanDocumentCreateManyArgs} args - Arguments to create many LoanDocuments.
     * @example
     * // Create many LoanDocuments
     * const loanDocument = await prisma.loanDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LoanDocumentCreateManyArgs>(args?: SelectSubset<T, LoanDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LoanDocuments and returns the data saved in the database.
     * @param {LoanDocumentCreateManyAndReturnArgs} args - Arguments to create many LoanDocuments.
     * @example
     * // Create many LoanDocuments
     * const loanDocument = await prisma.loanDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LoanDocuments and only return the `id`
     * const loanDocumentWithIdOnly = await prisma.loanDocument.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LoanDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, LoanDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanDocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LoanDocument.
     * @param {LoanDocumentDeleteArgs} args - Arguments to delete one LoanDocument.
     * @example
     * // Delete one LoanDocument
     * const LoanDocument = await prisma.loanDocument.delete({
     *   where: {
     *     // ... filter to delete one LoanDocument
     *   }
     * })
     * 
     */
    delete<T extends LoanDocumentDeleteArgs>(args: SelectSubset<T, LoanDocumentDeleteArgs<ExtArgs>>): Prisma__LoanDocumentClient<$Result.GetResult<Prisma.$LoanDocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LoanDocument.
     * @param {LoanDocumentUpdateArgs} args - Arguments to update one LoanDocument.
     * @example
     * // Update one LoanDocument
     * const loanDocument = await prisma.loanDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LoanDocumentUpdateArgs>(args: SelectSubset<T, LoanDocumentUpdateArgs<ExtArgs>>): Prisma__LoanDocumentClient<$Result.GetResult<Prisma.$LoanDocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LoanDocuments.
     * @param {LoanDocumentDeleteManyArgs} args - Arguments to filter LoanDocuments to delete.
     * @example
     * // Delete a few LoanDocuments
     * const { count } = await prisma.loanDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LoanDocumentDeleteManyArgs>(args?: SelectSubset<T, LoanDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoanDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LoanDocuments
     * const loanDocument = await prisma.loanDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LoanDocumentUpdateManyArgs>(args: SelectSubset<T, LoanDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoanDocuments and returns the data updated in the database.
     * @param {LoanDocumentUpdateManyAndReturnArgs} args - Arguments to update many LoanDocuments.
     * @example
     * // Update many LoanDocuments
     * const loanDocument = await prisma.loanDocument.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LoanDocuments and only return the `id`
     * const loanDocumentWithIdOnly = await prisma.loanDocument.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LoanDocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, LoanDocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanDocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LoanDocument.
     * @param {LoanDocumentUpsertArgs} args - Arguments to update or create a LoanDocument.
     * @example
     * // Update or create a LoanDocument
     * const loanDocument = await prisma.loanDocument.upsert({
     *   create: {
     *     // ... data to create a LoanDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LoanDocument we want to update
     *   }
     * })
     */
    upsert<T extends LoanDocumentUpsertArgs>(args: SelectSubset<T, LoanDocumentUpsertArgs<ExtArgs>>): Prisma__LoanDocumentClient<$Result.GetResult<Prisma.$LoanDocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LoanDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanDocumentCountArgs} args - Arguments to filter LoanDocuments to count.
     * @example
     * // Count the number of LoanDocuments
     * const count = await prisma.loanDocument.count({
     *   where: {
     *     // ... the filter for the LoanDocuments we want to count
     *   }
     * })
    **/
    count<T extends LoanDocumentCountArgs>(
      args?: Subset<T, LoanDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoanDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LoanDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoanDocumentAggregateArgs>(args: Subset<T, LoanDocumentAggregateArgs>): Prisma.PrismaPromise<GetLoanDocumentAggregateType<T>>

    /**
     * Group by LoanDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoanDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoanDocumentGroupByArgs['orderBy'] }
        : { orderBy?: LoanDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoanDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoanDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LoanDocument model
   */
  readonly fields: LoanDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LoanDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoanDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    loan<T extends LoanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LoanDefaultArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    documentType<T extends DocumentTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTypeDefaultArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LoanDocument model
   */
  interface LoanDocumentFieldRefs {
    readonly id: FieldRef<"LoanDocument", 'String'>
    readonly loanId: FieldRef<"LoanDocument", 'String'>
    readonly documentTypeId: FieldRef<"LoanDocument", 'String'>
    readonly fileUrl: FieldRef<"LoanDocument", 'String'>
    readonly issuingAuthority: FieldRef<"LoanDocument", 'String'>
    readonly issueDate: FieldRef<"LoanDocument", 'DateTime'>
    readonly expiryDate: FieldRef<"LoanDocument", 'DateTime'>
    readonly verified: FieldRef<"LoanDocument", 'Boolean'>
    readonly verificationNotes: FieldRef<"LoanDocument", 'String'>
    readonly uploadedByUserId: FieldRef<"LoanDocument", 'String'>
    readonly uploadedAt: FieldRef<"LoanDocument", 'DateTime'>
    readonly deletedAt: FieldRef<"LoanDocument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LoanDocument findUnique
   */
  export type LoanDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentInclude<ExtArgs> | null
    /**
     * Filter, which LoanDocument to fetch.
     */
    where: LoanDocumentWhereUniqueInput
  }

  /**
   * LoanDocument findUniqueOrThrow
   */
  export type LoanDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentInclude<ExtArgs> | null
    /**
     * Filter, which LoanDocument to fetch.
     */
    where: LoanDocumentWhereUniqueInput
  }

  /**
   * LoanDocument findFirst
   */
  export type LoanDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentInclude<ExtArgs> | null
    /**
     * Filter, which LoanDocument to fetch.
     */
    where?: LoanDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanDocuments to fetch.
     */
    orderBy?: LoanDocumentOrderByWithRelationInput | LoanDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoanDocuments.
     */
    cursor?: LoanDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoanDocuments.
     */
    distinct?: LoanDocumentScalarFieldEnum | LoanDocumentScalarFieldEnum[]
  }

  /**
   * LoanDocument findFirstOrThrow
   */
  export type LoanDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentInclude<ExtArgs> | null
    /**
     * Filter, which LoanDocument to fetch.
     */
    where?: LoanDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanDocuments to fetch.
     */
    orderBy?: LoanDocumentOrderByWithRelationInput | LoanDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoanDocuments.
     */
    cursor?: LoanDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoanDocuments.
     */
    distinct?: LoanDocumentScalarFieldEnum | LoanDocumentScalarFieldEnum[]
  }

  /**
   * LoanDocument findMany
   */
  export type LoanDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentInclude<ExtArgs> | null
    /**
     * Filter, which LoanDocuments to fetch.
     */
    where?: LoanDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanDocuments to fetch.
     */
    orderBy?: LoanDocumentOrderByWithRelationInput | LoanDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LoanDocuments.
     */
    cursor?: LoanDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanDocuments.
     */
    skip?: number
    distinct?: LoanDocumentScalarFieldEnum | LoanDocumentScalarFieldEnum[]
  }

  /**
   * LoanDocument create
   */
  export type LoanDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a LoanDocument.
     */
    data: XOR<LoanDocumentCreateInput, LoanDocumentUncheckedCreateInput>
  }

  /**
   * LoanDocument createMany
   */
  export type LoanDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LoanDocuments.
     */
    data: LoanDocumentCreateManyInput | LoanDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LoanDocument createManyAndReturn
   */
  export type LoanDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * The data used to create many LoanDocuments.
     */
    data: LoanDocumentCreateManyInput | LoanDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LoanDocument update
   */
  export type LoanDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a LoanDocument.
     */
    data: XOR<LoanDocumentUpdateInput, LoanDocumentUncheckedUpdateInput>
    /**
     * Choose, which LoanDocument to update.
     */
    where: LoanDocumentWhereUniqueInput
  }

  /**
   * LoanDocument updateMany
   */
  export type LoanDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LoanDocuments.
     */
    data: XOR<LoanDocumentUpdateManyMutationInput, LoanDocumentUncheckedUpdateManyInput>
    /**
     * Filter which LoanDocuments to update
     */
    where?: LoanDocumentWhereInput
    /**
     * Limit how many LoanDocuments to update.
     */
    limit?: number
  }

  /**
   * LoanDocument updateManyAndReturn
   */
  export type LoanDocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * The data used to update LoanDocuments.
     */
    data: XOR<LoanDocumentUpdateManyMutationInput, LoanDocumentUncheckedUpdateManyInput>
    /**
     * Filter which LoanDocuments to update
     */
    where?: LoanDocumentWhereInput
    /**
     * Limit how many LoanDocuments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LoanDocument upsert
   */
  export type LoanDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the LoanDocument to update in case it exists.
     */
    where: LoanDocumentWhereUniqueInput
    /**
     * In case the LoanDocument found by the `where` argument doesn't exist, create a new LoanDocument with this data.
     */
    create: XOR<LoanDocumentCreateInput, LoanDocumentUncheckedCreateInput>
    /**
     * In case the LoanDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoanDocumentUpdateInput, LoanDocumentUncheckedUpdateInput>
  }

  /**
   * LoanDocument delete
   */
  export type LoanDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentInclude<ExtArgs> | null
    /**
     * Filter which LoanDocument to delete.
     */
    where: LoanDocumentWhereUniqueInput
  }

  /**
   * LoanDocument deleteMany
   */
  export type LoanDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoanDocuments to delete
     */
    where?: LoanDocumentWhereInput
    /**
     * Limit how many LoanDocuments to delete.
     */
    limit?: number
  }

  /**
   * LoanDocument without action
   */
  export type LoanDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanDocument
     */
    select?: LoanDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoanDocument
     */
    omit?: LoanDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanDocumentInclude<ExtArgs> | null
  }


  /**
   * Model StaffSession
   */

  export type AggregateStaffSession = {
    _count: StaffSessionCountAggregateOutputType | null
    _min: StaffSessionMinAggregateOutputType | null
    _max: StaffSessionMaxAggregateOutputType | null
  }

  export type StaffSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    jwtId: string | null
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date | null
    expiresAt: Date | null
    revokedAt: Date | null
  }

  export type StaffSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    jwtId: string | null
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date | null
    expiresAt: Date | null
    revokedAt: Date | null
  }

  export type StaffSessionCountAggregateOutputType = {
    id: number
    userId: number
    jwtId: number
    userAgent: number
    ipAddress: number
    createdAt: number
    expiresAt: number
    revokedAt: number
    _all: number
  }


  export type StaffSessionMinAggregateInputType = {
    id?: true
    userId?: true
    jwtId?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
    expiresAt?: true
    revokedAt?: true
  }

  export type StaffSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    jwtId?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
    expiresAt?: true
    revokedAt?: true
  }

  export type StaffSessionCountAggregateInputType = {
    id?: true
    userId?: true
    jwtId?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
    expiresAt?: true
    revokedAt?: true
    _all?: true
  }

  export type StaffSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffSession to aggregate.
     */
    where?: StaffSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffSessions to fetch.
     */
    orderBy?: StaffSessionOrderByWithRelationInput | StaffSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaffSessions
    **/
    _count?: true | StaffSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffSessionMaxAggregateInputType
  }

  export type GetStaffSessionAggregateType<T extends StaffSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateStaffSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaffSession[P]>
      : GetScalarType<T[P], AggregateStaffSession[P]>
  }




  export type StaffSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffSessionWhereInput
    orderBy?: StaffSessionOrderByWithAggregationInput | StaffSessionOrderByWithAggregationInput[]
    by: StaffSessionScalarFieldEnum[] | StaffSessionScalarFieldEnum
    having?: StaffSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffSessionCountAggregateInputType | true
    _min?: StaffSessionMinAggregateInputType
    _max?: StaffSessionMaxAggregateInputType
  }

  export type StaffSessionGroupByOutputType = {
    id: string
    userId: string
    jwtId: string
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date
    expiresAt: Date
    revokedAt: Date | null
    _count: StaffSessionCountAggregateOutputType | null
    _min: StaffSessionMinAggregateOutputType | null
    _max: StaffSessionMaxAggregateOutputType | null
  }

  type GetStaffSessionGroupByPayload<T extends StaffSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffSessionGroupByOutputType[P]>
            : GetScalarType<T[P], StaffSessionGroupByOutputType[P]>
        }
      >
    >


  export type StaffSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jwtId?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    revokedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffSession"]>

  export type StaffSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jwtId?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    revokedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffSession"]>

  export type StaffSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jwtId?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    revokedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffSession"]>

  export type StaffSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    jwtId?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    revokedAt?: boolean
  }

  export type StaffSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "jwtId" | "userAgent" | "ipAddress" | "createdAt" | "expiresAt" | "revokedAt", ExtArgs["result"]["staffSession"]>
  export type StaffSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StaffSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StaffSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StaffSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaffSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      jwtId: string
      userAgent: string | null
      ipAddress: string | null
      createdAt: Date
      expiresAt: Date
      revokedAt: Date | null
    }, ExtArgs["result"]["staffSession"]>
    composites: {}
  }

  type StaffSessionGetPayload<S extends boolean | null | undefined | StaffSessionDefaultArgs> = $Result.GetResult<Prisma.$StaffSessionPayload, S>

  type StaffSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaffSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffSessionCountAggregateInputType | true
    }

  export interface StaffSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffSession'], meta: { name: 'StaffSession' } }
    /**
     * Find zero or one StaffSession that matches the filter.
     * @param {StaffSessionFindUniqueArgs} args - Arguments to find a StaffSession
     * @example
     * // Get one StaffSession
     * const staffSession = await prisma.staffSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffSessionFindUniqueArgs>(args: SelectSubset<T, StaffSessionFindUniqueArgs<ExtArgs>>): Prisma__StaffSessionClient<$Result.GetResult<Prisma.$StaffSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StaffSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaffSessionFindUniqueOrThrowArgs} args - Arguments to find a StaffSession
     * @example
     * // Get one StaffSession
     * const staffSession = await prisma.staffSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffSessionClient<$Result.GetResult<Prisma.$StaffSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffSessionFindFirstArgs} args - Arguments to find a StaffSession
     * @example
     * // Get one StaffSession
     * const staffSession = await prisma.staffSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffSessionFindFirstArgs>(args?: SelectSubset<T, StaffSessionFindFirstArgs<ExtArgs>>): Prisma__StaffSessionClient<$Result.GetResult<Prisma.$StaffSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffSessionFindFirstOrThrowArgs} args - Arguments to find a StaffSession
     * @example
     * // Get one StaffSession
     * const staffSession = await prisma.staffSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffSessionClient<$Result.GetResult<Prisma.$StaffSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StaffSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaffSessions
     * const staffSessions = await prisma.staffSession.findMany()
     * 
     * // Get first 10 StaffSessions
     * const staffSessions = await prisma.staffSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffSessionWithIdOnly = await prisma.staffSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffSessionFindManyArgs>(args?: SelectSubset<T, StaffSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StaffSession.
     * @param {StaffSessionCreateArgs} args - Arguments to create a StaffSession.
     * @example
     * // Create one StaffSession
     * const StaffSession = await prisma.staffSession.create({
     *   data: {
     *     // ... data to create a StaffSession
     *   }
     * })
     * 
     */
    create<T extends StaffSessionCreateArgs>(args: SelectSubset<T, StaffSessionCreateArgs<ExtArgs>>): Prisma__StaffSessionClient<$Result.GetResult<Prisma.$StaffSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StaffSessions.
     * @param {StaffSessionCreateManyArgs} args - Arguments to create many StaffSessions.
     * @example
     * // Create many StaffSessions
     * const staffSession = await prisma.staffSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffSessionCreateManyArgs>(args?: SelectSubset<T, StaffSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StaffSessions and returns the data saved in the database.
     * @param {StaffSessionCreateManyAndReturnArgs} args - Arguments to create many StaffSessions.
     * @example
     * // Create many StaffSessions
     * const staffSession = await prisma.staffSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StaffSessions and only return the `id`
     * const staffSessionWithIdOnly = await prisma.staffSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StaffSession.
     * @param {StaffSessionDeleteArgs} args - Arguments to delete one StaffSession.
     * @example
     * // Delete one StaffSession
     * const StaffSession = await prisma.staffSession.delete({
     *   where: {
     *     // ... filter to delete one StaffSession
     *   }
     * })
     * 
     */
    delete<T extends StaffSessionDeleteArgs>(args: SelectSubset<T, StaffSessionDeleteArgs<ExtArgs>>): Prisma__StaffSessionClient<$Result.GetResult<Prisma.$StaffSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StaffSession.
     * @param {StaffSessionUpdateArgs} args - Arguments to update one StaffSession.
     * @example
     * // Update one StaffSession
     * const staffSession = await prisma.staffSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffSessionUpdateArgs>(args: SelectSubset<T, StaffSessionUpdateArgs<ExtArgs>>): Prisma__StaffSessionClient<$Result.GetResult<Prisma.$StaffSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StaffSessions.
     * @param {StaffSessionDeleteManyArgs} args - Arguments to filter StaffSessions to delete.
     * @example
     * // Delete a few StaffSessions
     * const { count } = await prisma.staffSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffSessionDeleteManyArgs>(args?: SelectSubset<T, StaffSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaffSessions
     * const staffSession = await prisma.staffSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffSessionUpdateManyArgs>(args: SelectSubset<T, StaffSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffSessions and returns the data updated in the database.
     * @param {StaffSessionUpdateManyAndReturnArgs} args - Arguments to update many StaffSessions.
     * @example
     * // Update many StaffSessions
     * const staffSession = await prisma.staffSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StaffSessions and only return the `id`
     * const staffSessionWithIdOnly = await prisma.staffSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StaffSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, StaffSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StaffSession.
     * @param {StaffSessionUpsertArgs} args - Arguments to update or create a StaffSession.
     * @example
     * // Update or create a StaffSession
     * const staffSession = await prisma.staffSession.upsert({
     *   create: {
     *     // ... data to create a StaffSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaffSession we want to update
     *   }
     * })
     */
    upsert<T extends StaffSessionUpsertArgs>(args: SelectSubset<T, StaffSessionUpsertArgs<ExtArgs>>): Prisma__StaffSessionClient<$Result.GetResult<Prisma.$StaffSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StaffSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffSessionCountArgs} args - Arguments to filter StaffSessions to count.
     * @example
     * // Count the number of StaffSessions
     * const count = await prisma.staffSession.count({
     *   where: {
     *     // ... the filter for the StaffSessions we want to count
     *   }
     * })
    **/
    count<T extends StaffSessionCountArgs>(
      args?: Subset<T, StaffSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaffSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffSessionAggregateArgs>(args: Subset<T, StaffSessionAggregateArgs>): Prisma.PrismaPromise<GetStaffSessionAggregateType<T>>

    /**
     * Group by StaffSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffSessionGroupByArgs['orderBy'] }
        : { orderBy?: StaffSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaffSession model
   */
  readonly fields: StaffSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaffSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaffSession model
   */
  interface StaffSessionFieldRefs {
    readonly id: FieldRef<"StaffSession", 'String'>
    readonly userId: FieldRef<"StaffSession", 'String'>
    readonly jwtId: FieldRef<"StaffSession", 'String'>
    readonly userAgent: FieldRef<"StaffSession", 'String'>
    readonly ipAddress: FieldRef<"StaffSession", 'String'>
    readonly createdAt: FieldRef<"StaffSession", 'DateTime'>
    readonly expiresAt: FieldRef<"StaffSession", 'DateTime'>
    readonly revokedAt: FieldRef<"StaffSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StaffSession findUnique
   */
  export type StaffSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSession
     */
    select?: StaffSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSession
     */
    omit?: StaffSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffSessionInclude<ExtArgs> | null
    /**
     * Filter, which StaffSession to fetch.
     */
    where: StaffSessionWhereUniqueInput
  }

  /**
   * StaffSession findUniqueOrThrow
   */
  export type StaffSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSession
     */
    select?: StaffSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSession
     */
    omit?: StaffSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffSessionInclude<ExtArgs> | null
    /**
     * Filter, which StaffSession to fetch.
     */
    where: StaffSessionWhereUniqueInput
  }

  /**
   * StaffSession findFirst
   */
  export type StaffSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSession
     */
    select?: StaffSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSession
     */
    omit?: StaffSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffSessionInclude<ExtArgs> | null
    /**
     * Filter, which StaffSession to fetch.
     */
    where?: StaffSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffSessions to fetch.
     */
    orderBy?: StaffSessionOrderByWithRelationInput | StaffSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffSessions.
     */
    cursor?: StaffSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffSessions.
     */
    distinct?: StaffSessionScalarFieldEnum | StaffSessionScalarFieldEnum[]
  }

  /**
   * StaffSession findFirstOrThrow
   */
  export type StaffSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSession
     */
    select?: StaffSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSession
     */
    omit?: StaffSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffSessionInclude<ExtArgs> | null
    /**
     * Filter, which StaffSession to fetch.
     */
    where?: StaffSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffSessions to fetch.
     */
    orderBy?: StaffSessionOrderByWithRelationInput | StaffSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffSessions.
     */
    cursor?: StaffSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffSessions.
     */
    distinct?: StaffSessionScalarFieldEnum | StaffSessionScalarFieldEnum[]
  }

  /**
   * StaffSession findMany
   */
  export type StaffSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSession
     */
    select?: StaffSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSession
     */
    omit?: StaffSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffSessionInclude<ExtArgs> | null
    /**
     * Filter, which StaffSessions to fetch.
     */
    where?: StaffSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffSessions to fetch.
     */
    orderBy?: StaffSessionOrderByWithRelationInput | StaffSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaffSessions.
     */
    cursor?: StaffSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffSessions.
     */
    skip?: number
    distinct?: StaffSessionScalarFieldEnum | StaffSessionScalarFieldEnum[]
  }

  /**
   * StaffSession create
   */
  export type StaffSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSession
     */
    select?: StaffSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSession
     */
    omit?: StaffSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a StaffSession.
     */
    data: XOR<StaffSessionCreateInput, StaffSessionUncheckedCreateInput>
  }

  /**
   * StaffSession createMany
   */
  export type StaffSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaffSessions.
     */
    data: StaffSessionCreateManyInput | StaffSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaffSession createManyAndReturn
   */
  export type StaffSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSession
     */
    select?: StaffSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSession
     */
    omit?: StaffSessionOmit<ExtArgs> | null
    /**
     * The data used to create many StaffSessions.
     */
    data: StaffSessionCreateManyInput | StaffSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffSession update
   */
  export type StaffSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSession
     */
    select?: StaffSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSession
     */
    omit?: StaffSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a StaffSession.
     */
    data: XOR<StaffSessionUpdateInput, StaffSessionUncheckedUpdateInput>
    /**
     * Choose, which StaffSession to update.
     */
    where: StaffSessionWhereUniqueInput
  }

  /**
   * StaffSession updateMany
   */
  export type StaffSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaffSessions.
     */
    data: XOR<StaffSessionUpdateManyMutationInput, StaffSessionUncheckedUpdateManyInput>
    /**
     * Filter which StaffSessions to update
     */
    where?: StaffSessionWhereInput
    /**
     * Limit how many StaffSessions to update.
     */
    limit?: number
  }

  /**
   * StaffSession updateManyAndReturn
   */
  export type StaffSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSession
     */
    select?: StaffSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSession
     */
    omit?: StaffSessionOmit<ExtArgs> | null
    /**
     * The data used to update StaffSessions.
     */
    data: XOR<StaffSessionUpdateManyMutationInput, StaffSessionUncheckedUpdateManyInput>
    /**
     * Filter which StaffSessions to update
     */
    where?: StaffSessionWhereInput
    /**
     * Limit how many StaffSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffSession upsert
   */
  export type StaffSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSession
     */
    select?: StaffSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSession
     */
    omit?: StaffSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the StaffSession to update in case it exists.
     */
    where: StaffSessionWhereUniqueInput
    /**
     * In case the StaffSession found by the `where` argument doesn't exist, create a new StaffSession with this data.
     */
    create: XOR<StaffSessionCreateInput, StaffSessionUncheckedCreateInput>
    /**
     * In case the StaffSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffSessionUpdateInput, StaffSessionUncheckedUpdateInput>
  }

  /**
   * StaffSession delete
   */
  export type StaffSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSession
     */
    select?: StaffSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSession
     */
    omit?: StaffSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffSessionInclude<ExtArgs> | null
    /**
     * Filter which StaffSession to delete.
     */
    where: StaffSessionWhereUniqueInput
  }

  /**
   * StaffSession deleteMany
   */
  export type StaffSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffSessions to delete
     */
    where?: StaffSessionWhereInput
    /**
     * Limit how many StaffSessions to delete.
     */
    limit?: number
  }

  /**
   * StaffSession without action
   */
  export type StaffSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSession
     */
    select?: StaffSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSession
     */
    omit?: StaffSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffSessionInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    actorUserId: string | null
    action: string | null
    entityName: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    actorUserId: string | null
    action: string | null
    entityName: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    actorUserId: number
    action: number
    entityName: number
    entityId: number
    before: number
    after: number
    metadata: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    actorUserId?: true
    action?: true
    entityName?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    actorUserId?: true
    action?: true
    entityName?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    actorUserId?: true
    action?: true
    entityName?: true
    entityId?: true
    before?: true
    after?: true
    metadata?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    actorUserId: string | null
    action: string
    entityName: string
    entityId: string
    before: JsonValue | null
    after: JsonValue | null
    metadata: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actorUserId?: boolean
    action?: boolean
    entityName?: boolean
    entityId?: boolean
    before?: boolean
    after?: boolean
    metadata?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    actor?: boolean | AuditLog$actorArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actorUserId?: boolean
    action?: boolean
    entityName?: boolean
    entityId?: boolean
    before?: boolean
    after?: boolean
    metadata?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    actor?: boolean | AuditLog$actorArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actorUserId?: boolean
    action?: boolean
    entityName?: boolean
    entityId?: boolean
    before?: boolean
    after?: boolean
    metadata?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    actor?: boolean | AuditLog$actorArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    actorUserId?: boolean
    action?: boolean
    entityName?: boolean
    entityId?: boolean
    before?: boolean
    after?: boolean
    metadata?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "actorUserId" | "action" | "entityName" | "entityId" | "before" | "after" | "metadata" | "ipAddress" | "userAgent" | "createdAt", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | AuditLog$actorArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | AuditLog$actorArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | AuditLog$actorArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      actor: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      actorUserId: string | null
      action: string
      entityName: string
      entityId: string
      before: Prisma.JsonValue | null
      after: Prisma.JsonValue | null
      metadata: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    actor<T extends AuditLog$actorArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$actorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly actorUserId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entityName: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly before: FieldRef<"AuditLog", 'Json'>
    readonly after: FieldRef<"AuditLog", 'Json'>
    readonly metadata: FieldRef<"AuditLog", 'Json'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.actor
   */
  export type AuditLog$actorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BranchScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    managerId: 'managerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type BranchScalarFieldEnum = (typeof BranchScalarFieldEnum)[keyof typeof BranchScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    isActive: 'isActive',
    branchId: 'branchId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    code: 'code',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    email: 'email',
    address: 'address',
    branchId: 'branchId',
    currentOfficerId: 'currentOfficerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const LoanTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    minAmount: 'minAmount',
    maxAmount: 'maxAmount',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type LoanTypeScalarFieldEnum = (typeof LoanTypeScalarFieldEnum)[keyof typeof LoanTypeScalarFieldEnum]


  export const LoanScalarFieldEnum: {
    id: 'id',
    loanNumber: 'loanNumber',
    customerId: 'customerId',
    branchId: 'branchId',
    loanTypeId: 'loanTypeId',
    principalAmount: 'principalAmount',
    currencyCode: 'currencyCode',
    termCount: 'termCount',
    termUnit: 'termUnit',
    startDate: 'startDate',
    endDate: 'endDate',
    processingFeeAmount: 'processingFeeAmount',
    processingFeeCollected: 'processingFeeCollected',
    penaltyFeePerDayAmount: 'penaltyFeePerDayAmount',
    status: 'status',
    createdByUserId: 'createdByUserId',
    assignedOfficerId: 'assignedOfficerId',
    disbursedAt: 'disbursedAt',
    closedAt: 'closedAt',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type LoanScalarFieldEnum = (typeof LoanScalarFieldEnum)[keyof typeof LoanScalarFieldEnum]


  export const RepaymentScheduleItemScalarFieldEnum: {
    id: 'id',
    loanId: 'loanId',
    sequence: 'sequence',
    dueDate: 'dueDate',
    principalDue: 'principalDue',
    interestDue: 'interestDue',
    feeDue: 'feeDue',
    totalDue: 'totalDue',
    paidAmount: 'paidAmount',
    status: 'status',
    closedAt: 'closedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type RepaymentScheduleItemScalarFieldEnum = (typeof RepaymentScheduleItemScalarFieldEnum)[keyof typeof RepaymentScheduleItemScalarFieldEnum]


  export const RepaymentScalarFieldEnum: {
    id: 'id',
    loanId: 'loanId',
    receivedByUserId: 'receivedByUserId',
    amount: 'amount',
    currencyCode: 'currencyCode',
    paidAt: 'paidAt',
    method: 'method',
    reference: 'reference',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type RepaymentScalarFieldEnum = (typeof RepaymentScalarFieldEnum)[keyof typeof RepaymentScalarFieldEnum]


  export const RepaymentAllocationScalarFieldEnum: {
    id: 'id',
    repaymentId: 'repaymentId',
    scheduleItemId: 'scheduleItemId',
    amount: 'amount',
    createdAt: 'createdAt'
  };

  export type RepaymentAllocationScalarFieldEnum = (typeof RepaymentAllocationScalarFieldEnum)[keyof typeof RepaymentAllocationScalarFieldEnum]


  export const LoanAssignmentHistoryScalarFieldEnum: {
    id: 'id',
    loanId: 'loanId',
    oldOfficerId: 'oldOfficerId',
    newOfficerId: 'newOfficerId',
    oldBranchId: 'oldBranchId',
    newBranchId: 'newBranchId',
    changedByUserId: 'changedByUserId',
    reason: 'reason',
    changedAt: 'changedAt'
  };

  export type LoanAssignmentHistoryScalarFieldEnum = (typeof LoanAssignmentHistoryScalarFieldEnum)[keyof typeof LoanAssignmentHistoryScalarFieldEnum]


  export const CustomerReassignmentScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    oldBranchId: 'oldBranchId',
    newBranchId: 'newBranchId',
    oldOfficerId: 'oldOfficerId',
    newOfficerId: 'newOfficerId',
    changedByUserId: 'changedByUserId',
    reason: 'reason',
    previousOfficerEndAt: 'previousOfficerEndAt',
    newOfficerStartAt: 'newOfficerStartAt',
    changedAt: 'changedAt'
  };

  export type CustomerReassignmentScalarFieldEnum = (typeof CustomerReassignmentScalarFieldEnum)[keyof typeof CustomerReassignmentScalarFieldEnum]


  export const DocumentTypeScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type DocumentTypeScalarFieldEnum = (typeof DocumentTypeScalarFieldEnum)[keyof typeof DocumentTypeScalarFieldEnum]


  export const CustomerDocumentScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    documentTypeId: 'documentTypeId',
    fileUrl: 'fileUrl',
    issuingAuthority: 'issuingAuthority',
    issueDate: 'issueDate',
    expiryDate: 'expiryDate',
    verified: 'verified',
    verificationNotes: 'verificationNotes',
    uploadedByUserId: 'uploadedByUserId',
    uploadedAt: 'uploadedAt',
    deletedAt: 'deletedAt'
  };

  export type CustomerDocumentScalarFieldEnum = (typeof CustomerDocumentScalarFieldEnum)[keyof typeof CustomerDocumentScalarFieldEnum]


  export const LoanDocumentScalarFieldEnum: {
    id: 'id',
    loanId: 'loanId',
    documentTypeId: 'documentTypeId',
    fileUrl: 'fileUrl',
    issuingAuthority: 'issuingAuthority',
    issueDate: 'issueDate',
    expiryDate: 'expiryDate',
    verified: 'verified',
    verificationNotes: 'verificationNotes',
    uploadedByUserId: 'uploadedByUserId',
    uploadedAt: 'uploadedAt',
    deletedAt: 'deletedAt'
  };

  export type LoanDocumentScalarFieldEnum = (typeof LoanDocumentScalarFieldEnum)[keyof typeof LoanDocumentScalarFieldEnum]


  export const StaffSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    jwtId: 'jwtId',
    userAgent: 'userAgent',
    ipAddress: 'ipAddress',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    revokedAt: 'revokedAt'
  };

  export type StaffSessionScalarFieldEnum = (typeof StaffSessionScalarFieldEnum)[keyof typeof StaffSessionScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    actorUserId: 'actorUserId',
    action: 'action',
    entityName: 'entityName',
    entityId: 'entityId',
    before: 'before',
    after: 'after',
    metadata: 'metadata',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'TermUnit'
   */
  export type EnumTermUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TermUnit'>
    


  /**
   * Reference to a field of type 'TermUnit[]'
   */
  export type ListEnumTermUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TermUnit[]'>
    


  /**
   * Reference to a field of type 'LoanStatus'
   */
  export type EnumLoanStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LoanStatus'>
    


  /**
   * Reference to a field of type 'LoanStatus[]'
   */
  export type ListEnumLoanStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LoanStatus[]'>
    


  /**
   * Reference to a field of type 'ScheduleStatus'
   */
  export type EnumScheduleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScheduleStatus'>
    


  /**
   * Reference to a field of type 'ScheduleStatus[]'
   */
  export type ListEnumScheduleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScheduleStatus[]'>
    


  /**
   * Reference to a field of type 'RepaymentMethod'
   */
  export type EnumRepaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RepaymentMethod'>
    


  /**
   * Reference to a field of type 'RepaymentMethod[]'
   */
  export type ListEnumRepaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RepaymentMethod[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type BranchWhereInput = {
    AND?: BranchWhereInput | BranchWhereInput[]
    OR?: BranchWhereInput[]
    NOT?: BranchWhereInput | BranchWhereInput[]
    id?: StringFilter<"Branch"> | string
    name?: StringFilter<"Branch"> | string
    code?: StringFilter<"Branch"> | string
    managerId?: StringNullableFilter<"Branch"> | string | null
    createdAt?: DateTimeFilter<"Branch"> | Date | string
    updatedAt?: DateTimeFilter<"Branch"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Branch"> | Date | string | null
    manager?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    users?: UserListRelationFilter
    customers?: CustomerListRelationFilter
    loans?: LoanListRelationFilter
    oldLoanBranches?: LoanAssignmentHistoryListRelationFilter
    newLoanBranches?: LoanAssignmentHistoryListRelationFilter
    oldCustomerBranches?: CustomerReassignmentListRelationFilter
    newCustomerBranches?: CustomerReassignmentListRelationFilter
  }

  export type BranchOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    managerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    manager?: UserOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    customers?: CustomerOrderByRelationAggregateInput
    loans?: LoanOrderByRelationAggregateInput
    oldLoanBranches?: LoanAssignmentHistoryOrderByRelationAggregateInput
    newLoanBranches?: LoanAssignmentHistoryOrderByRelationAggregateInput
    oldCustomerBranches?: CustomerReassignmentOrderByRelationAggregateInput
    newCustomerBranches?: CustomerReassignmentOrderByRelationAggregateInput
  }

  export type BranchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    managerId?: string
    AND?: BranchWhereInput | BranchWhereInput[]
    OR?: BranchWhereInput[]
    NOT?: BranchWhereInput | BranchWhereInput[]
    name?: StringFilter<"Branch"> | string
    createdAt?: DateTimeFilter<"Branch"> | Date | string
    updatedAt?: DateTimeFilter<"Branch"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Branch"> | Date | string | null
    manager?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    users?: UserListRelationFilter
    customers?: CustomerListRelationFilter
    loans?: LoanListRelationFilter
    oldLoanBranches?: LoanAssignmentHistoryListRelationFilter
    newLoanBranches?: LoanAssignmentHistoryListRelationFilter
    oldCustomerBranches?: CustomerReassignmentListRelationFilter
    newCustomerBranches?: CustomerReassignmentListRelationFilter
  }, "id" | "code" | "managerId">

  export type BranchOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    managerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: BranchCountOrderByAggregateInput
    _max?: BranchMaxOrderByAggregateInput
    _min?: BranchMinOrderByAggregateInput
  }

  export type BranchScalarWhereWithAggregatesInput = {
    AND?: BranchScalarWhereWithAggregatesInput | BranchScalarWhereWithAggregatesInput[]
    OR?: BranchScalarWhereWithAggregatesInput[]
    NOT?: BranchScalarWhereWithAggregatesInput | BranchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Branch"> | string
    name?: StringWithAggregatesFilter<"Branch"> | string
    code?: StringWithAggregatesFilter<"Branch"> | string
    managerId?: StringNullableWithAggregatesFilter<"Branch"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Branch"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Branch"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Branch"> | Date | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isActive?: BoolFilter<"User"> | boolean
    branchId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    managedBranch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    createdLoans?: LoanListRelationFilter
    assignedLoans?: LoanListRelationFilter
    currentCustomers?: CustomerListRelationFilter
    repayments?: RepaymentListRelationFilter
    sessions?: StaffSessionListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    uploadedCustDocs?: CustomerDocumentListRelationFilter
    uploadedLoanDocs?: LoanDocumentListRelationFilter
    oldLoanAssignments?: LoanAssignmentHistoryListRelationFilter
    newLoanAssignments?: LoanAssignmentHistoryListRelationFilter
    changedLoanAssignments?: LoanAssignmentHistoryListRelationFilter
    oldCustomerAssignments?: CustomerReassignmentListRelationFilter
    newCustomerAssignments?: CustomerReassignmentListRelationFilter
    changedCustomerAssignments?: CustomerReassignmentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    branchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    branch?: BranchOrderByWithRelationInput
    managedBranch?: BranchOrderByWithRelationInput
    createdLoans?: LoanOrderByRelationAggregateInput
    assignedLoans?: LoanOrderByRelationAggregateInput
    currentCustomers?: CustomerOrderByRelationAggregateInput
    repayments?: RepaymentOrderByRelationAggregateInput
    sessions?: StaffSessionOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    uploadedCustDocs?: CustomerDocumentOrderByRelationAggregateInput
    uploadedLoanDocs?: LoanDocumentOrderByRelationAggregateInput
    oldLoanAssignments?: LoanAssignmentHistoryOrderByRelationAggregateInput
    newLoanAssignments?: LoanAssignmentHistoryOrderByRelationAggregateInput
    changedLoanAssignments?: LoanAssignmentHistoryOrderByRelationAggregateInput
    oldCustomerAssignments?: CustomerReassignmentOrderByRelationAggregateInput
    newCustomerAssignments?: CustomerReassignmentOrderByRelationAggregateInput
    changedCustomerAssignments?: CustomerReassignmentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isActive?: BoolFilter<"User"> | boolean
    branchId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    managedBranch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    createdLoans?: LoanListRelationFilter
    assignedLoans?: LoanListRelationFilter
    currentCustomers?: CustomerListRelationFilter
    repayments?: RepaymentListRelationFilter
    sessions?: StaffSessionListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    uploadedCustDocs?: CustomerDocumentListRelationFilter
    uploadedLoanDocs?: LoanDocumentListRelationFilter
    oldLoanAssignments?: LoanAssignmentHistoryListRelationFilter
    newLoanAssignments?: LoanAssignmentHistoryListRelationFilter
    changedLoanAssignments?: LoanAssignmentHistoryListRelationFilter
    oldCustomerAssignments?: CustomerReassignmentListRelationFilter
    newCustomerAssignments?: CustomerReassignmentListRelationFilter
    changedCustomerAssignments?: CustomerReassignmentListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    branchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    branchId?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: StringFilter<"Customer"> | string
    code?: StringNullableFilter<"Customer"> | string | null
    firstName?: StringFilter<"Customer"> | string
    lastName?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    email?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    branchId?: StringFilter<"Customer"> | string
    currentOfficerId?: StringNullableFilter<"Customer"> | string | null
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Customer"> | Date | string | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    currentOfficer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    documents?: CustomerDocumentListRelationFilter
    loans?: LoanListRelationFilter
    reassignments?: CustomerReassignmentListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    branchId?: SortOrder
    currentOfficerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    branch?: BranchOrderByWithRelationInput
    currentOfficer?: UserOrderByWithRelationInput
    documents?: CustomerDocumentOrderByRelationAggregateInput
    loans?: LoanOrderByRelationAggregateInput
    reassignments?: CustomerReassignmentOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    firstName?: StringFilter<"Customer"> | string
    lastName?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    email?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    branchId?: StringFilter<"Customer"> | string
    currentOfficerId?: StringNullableFilter<"Customer"> | string | null
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Customer"> | Date | string | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    currentOfficer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    documents?: CustomerDocumentListRelationFilter
    loans?: LoanListRelationFilter
    reassignments?: CustomerReassignmentListRelationFilter
  }, "id" | "code">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    branchId?: SortOrder
    currentOfficerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Customer"> | string
    code?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    firstName?: StringWithAggregatesFilter<"Customer"> | string
    lastName?: StringWithAggregatesFilter<"Customer"> | string
    phone?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    email?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    address?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    branchId?: StringWithAggregatesFilter<"Customer"> | string
    currentOfficerId?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Customer"> | Date | string | null
  }

  export type LoanTypeWhereInput = {
    AND?: LoanTypeWhereInput | LoanTypeWhereInput[]
    OR?: LoanTypeWhereInput[]
    NOT?: LoanTypeWhereInput | LoanTypeWhereInput[]
    id?: StringFilter<"LoanType"> | string
    name?: StringFilter<"LoanType"> | string
    description?: StringNullableFilter<"LoanType"> | string | null
    minAmount?: DecimalFilter<"LoanType"> | Decimal | DecimalJsLike | number | string
    maxAmount?: DecimalFilter<"LoanType"> | Decimal | DecimalJsLike | number | string
    isActive?: BoolFilter<"LoanType"> | boolean
    createdAt?: DateTimeFilter<"LoanType"> | Date | string
    updatedAt?: DateTimeFilter<"LoanType"> | Date | string
    deletedAt?: DateTimeNullableFilter<"LoanType"> | Date | string | null
    loans?: LoanListRelationFilter
  }

  export type LoanTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    loans?: LoanOrderByRelationAggregateInput
  }

  export type LoanTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: LoanTypeWhereInput | LoanTypeWhereInput[]
    OR?: LoanTypeWhereInput[]
    NOT?: LoanTypeWhereInput | LoanTypeWhereInput[]
    description?: StringNullableFilter<"LoanType"> | string | null
    minAmount?: DecimalFilter<"LoanType"> | Decimal | DecimalJsLike | number | string
    maxAmount?: DecimalFilter<"LoanType"> | Decimal | DecimalJsLike | number | string
    isActive?: BoolFilter<"LoanType"> | boolean
    createdAt?: DateTimeFilter<"LoanType"> | Date | string
    updatedAt?: DateTimeFilter<"LoanType"> | Date | string
    deletedAt?: DateTimeNullableFilter<"LoanType"> | Date | string | null
    loans?: LoanListRelationFilter
  }, "id" | "name">

  export type LoanTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: LoanTypeCountOrderByAggregateInput
    _avg?: LoanTypeAvgOrderByAggregateInput
    _max?: LoanTypeMaxOrderByAggregateInput
    _min?: LoanTypeMinOrderByAggregateInput
    _sum?: LoanTypeSumOrderByAggregateInput
  }

  export type LoanTypeScalarWhereWithAggregatesInput = {
    AND?: LoanTypeScalarWhereWithAggregatesInput | LoanTypeScalarWhereWithAggregatesInput[]
    OR?: LoanTypeScalarWhereWithAggregatesInput[]
    NOT?: LoanTypeScalarWhereWithAggregatesInput | LoanTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LoanType"> | string
    name?: StringWithAggregatesFilter<"LoanType"> | string
    description?: StringNullableWithAggregatesFilter<"LoanType"> | string | null
    minAmount?: DecimalWithAggregatesFilter<"LoanType"> | Decimal | DecimalJsLike | number | string
    maxAmount?: DecimalWithAggregatesFilter<"LoanType"> | Decimal | DecimalJsLike | number | string
    isActive?: BoolWithAggregatesFilter<"LoanType"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"LoanType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LoanType"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"LoanType"> | Date | string | null
  }

  export type LoanWhereInput = {
    AND?: LoanWhereInput | LoanWhereInput[]
    OR?: LoanWhereInput[]
    NOT?: LoanWhereInput | LoanWhereInput[]
    id?: StringFilter<"Loan"> | string
    loanNumber?: StringFilter<"Loan"> | string
    customerId?: StringFilter<"Loan"> | string
    branchId?: StringFilter<"Loan"> | string
    loanTypeId?: StringNullableFilter<"Loan"> | string | null
    principalAmount?: DecimalFilter<"Loan"> | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFilter<"Loan"> | string
    termCount?: IntFilter<"Loan"> | number
    termUnit?: EnumTermUnitFilter<"Loan"> | $Enums.TermUnit
    startDate?: DateTimeFilter<"Loan"> | Date | string
    endDate?: DateTimeNullableFilter<"Loan"> | Date | string | null
    processingFeeAmount?: DecimalFilter<"Loan"> | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFilter<"Loan"> | boolean
    penaltyFeePerDayAmount?: DecimalFilter<"Loan"> | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFilter<"Loan"> | $Enums.LoanStatus
    createdByUserId?: StringFilter<"Loan"> | string
    assignedOfficerId?: StringFilter<"Loan"> | string
    disbursedAt?: DateTimeNullableFilter<"Loan"> | Date | string | null
    closedAt?: DateTimeNullableFilter<"Loan"> | Date | string | null
    notes?: StringNullableFilter<"Loan"> | string | null
    createdAt?: DateTimeFilter<"Loan"> | Date | string
    updatedAt?: DateTimeFilter<"Loan"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Loan"> | Date | string | null
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    loanType?: XOR<LoanTypeNullableScalarRelationFilter, LoanTypeWhereInput> | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    assignedOfficer?: XOR<UserScalarRelationFilter, UserWhereInput>
    scheduleItems?: RepaymentScheduleItemListRelationFilter
    repayments?: RepaymentListRelationFilter
    documents?: LoanDocumentListRelationFilter
    assignmentHistory?: LoanAssignmentHistoryListRelationFilter
  }

  export type LoanOrderByWithRelationInput = {
    id?: SortOrder
    loanNumber?: SortOrder
    customerId?: SortOrder
    branchId?: SortOrder
    loanTypeId?: SortOrderInput | SortOrder
    principalAmount?: SortOrder
    currencyCode?: SortOrder
    termCount?: SortOrder
    termUnit?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    processingFeeAmount?: SortOrder
    processingFeeCollected?: SortOrder
    penaltyFeePerDayAmount?: SortOrder
    status?: SortOrder
    createdByUserId?: SortOrder
    assignedOfficerId?: SortOrder
    disbursedAt?: SortOrderInput | SortOrder
    closedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    customer?: CustomerOrderByWithRelationInput
    branch?: BranchOrderByWithRelationInput
    loanType?: LoanTypeOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    assignedOfficer?: UserOrderByWithRelationInput
    scheduleItems?: RepaymentScheduleItemOrderByRelationAggregateInput
    repayments?: RepaymentOrderByRelationAggregateInput
    documents?: LoanDocumentOrderByRelationAggregateInput
    assignmentHistory?: LoanAssignmentHistoryOrderByRelationAggregateInput
  }

  export type LoanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    loanNumber?: string
    AND?: LoanWhereInput | LoanWhereInput[]
    OR?: LoanWhereInput[]
    NOT?: LoanWhereInput | LoanWhereInput[]
    customerId?: StringFilter<"Loan"> | string
    branchId?: StringFilter<"Loan"> | string
    loanTypeId?: StringNullableFilter<"Loan"> | string | null
    principalAmount?: DecimalFilter<"Loan"> | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFilter<"Loan"> | string
    termCount?: IntFilter<"Loan"> | number
    termUnit?: EnumTermUnitFilter<"Loan"> | $Enums.TermUnit
    startDate?: DateTimeFilter<"Loan"> | Date | string
    endDate?: DateTimeNullableFilter<"Loan"> | Date | string | null
    processingFeeAmount?: DecimalFilter<"Loan"> | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFilter<"Loan"> | boolean
    penaltyFeePerDayAmount?: DecimalFilter<"Loan"> | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFilter<"Loan"> | $Enums.LoanStatus
    createdByUserId?: StringFilter<"Loan"> | string
    assignedOfficerId?: StringFilter<"Loan"> | string
    disbursedAt?: DateTimeNullableFilter<"Loan"> | Date | string | null
    closedAt?: DateTimeNullableFilter<"Loan"> | Date | string | null
    notes?: StringNullableFilter<"Loan"> | string | null
    createdAt?: DateTimeFilter<"Loan"> | Date | string
    updatedAt?: DateTimeFilter<"Loan"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Loan"> | Date | string | null
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    loanType?: XOR<LoanTypeNullableScalarRelationFilter, LoanTypeWhereInput> | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    assignedOfficer?: XOR<UserScalarRelationFilter, UserWhereInput>
    scheduleItems?: RepaymentScheduleItemListRelationFilter
    repayments?: RepaymentListRelationFilter
    documents?: LoanDocumentListRelationFilter
    assignmentHistory?: LoanAssignmentHistoryListRelationFilter
  }, "id" | "loanNumber">

  export type LoanOrderByWithAggregationInput = {
    id?: SortOrder
    loanNumber?: SortOrder
    customerId?: SortOrder
    branchId?: SortOrder
    loanTypeId?: SortOrderInput | SortOrder
    principalAmount?: SortOrder
    currencyCode?: SortOrder
    termCount?: SortOrder
    termUnit?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    processingFeeAmount?: SortOrder
    processingFeeCollected?: SortOrder
    penaltyFeePerDayAmount?: SortOrder
    status?: SortOrder
    createdByUserId?: SortOrder
    assignedOfficerId?: SortOrder
    disbursedAt?: SortOrderInput | SortOrder
    closedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: LoanCountOrderByAggregateInput
    _avg?: LoanAvgOrderByAggregateInput
    _max?: LoanMaxOrderByAggregateInput
    _min?: LoanMinOrderByAggregateInput
    _sum?: LoanSumOrderByAggregateInput
  }

  export type LoanScalarWhereWithAggregatesInput = {
    AND?: LoanScalarWhereWithAggregatesInput | LoanScalarWhereWithAggregatesInput[]
    OR?: LoanScalarWhereWithAggregatesInput[]
    NOT?: LoanScalarWhereWithAggregatesInput | LoanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Loan"> | string
    loanNumber?: StringWithAggregatesFilter<"Loan"> | string
    customerId?: StringWithAggregatesFilter<"Loan"> | string
    branchId?: StringWithAggregatesFilter<"Loan"> | string
    loanTypeId?: StringNullableWithAggregatesFilter<"Loan"> | string | null
    principalAmount?: DecimalWithAggregatesFilter<"Loan"> | Decimal | DecimalJsLike | number | string
    currencyCode?: StringWithAggregatesFilter<"Loan"> | string
    termCount?: IntWithAggregatesFilter<"Loan"> | number
    termUnit?: EnumTermUnitWithAggregatesFilter<"Loan"> | $Enums.TermUnit
    startDate?: DateTimeWithAggregatesFilter<"Loan"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"Loan"> | Date | string | null
    processingFeeAmount?: DecimalWithAggregatesFilter<"Loan"> | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolWithAggregatesFilter<"Loan"> | boolean
    penaltyFeePerDayAmount?: DecimalWithAggregatesFilter<"Loan"> | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusWithAggregatesFilter<"Loan"> | $Enums.LoanStatus
    createdByUserId?: StringWithAggregatesFilter<"Loan"> | string
    assignedOfficerId?: StringWithAggregatesFilter<"Loan"> | string
    disbursedAt?: DateTimeNullableWithAggregatesFilter<"Loan"> | Date | string | null
    closedAt?: DateTimeNullableWithAggregatesFilter<"Loan"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"Loan"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Loan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Loan"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Loan"> | Date | string | null
  }

  export type RepaymentScheduleItemWhereInput = {
    AND?: RepaymentScheduleItemWhereInput | RepaymentScheduleItemWhereInput[]
    OR?: RepaymentScheduleItemWhereInput[]
    NOT?: RepaymentScheduleItemWhereInput | RepaymentScheduleItemWhereInput[]
    id?: StringFilter<"RepaymentScheduleItem"> | string
    loanId?: StringFilter<"RepaymentScheduleItem"> | string
    sequence?: IntFilter<"RepaymentScheduleItem"> | number
    dueDate?: DateTimeFilter<"RepaymentScheduleItem"> | Date | string
    principalDue?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    interestDue?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    feeDue?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    totalDue?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    status?: EnumScheduleStatusFilter<"RepaymentScheduleItem"> | $Enums.ScheduleStatus
    closedAt?: DateTimeNullableFilter<"RepaymentScheduleItem"> | Date | string | null
    createdAt?: DateTimeFilter<"RepaymentScheduleItem"> | Date | string
    updatedAt?: DateTimeFilter<"RepaymentScheduleItem"> | Date | string
    deletedAt?: DateTimeNullableFilter<"RepaymentScheduleItem"> | Date | string | null
    loan?: XOR<LoanScalarRelationFilter, LoanWhereInput>
    allocations?: RepaymentAllocationListRelationFilter
  }

  export type RepaymentScheduleItemOrderByWithRelationInput = {
    id?: SortOrder
    loanId?: SortOrder
    sequence?: SortOrder
    dueDate?: SortOrder
    principalDue?: SortOrder
    interestDue?: SortOrder
    feeDue?: SortOrder
    totalDue?: SortOrder
    paidAmount?: SortOrder
    status?: SortOrder
    closedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    loan?: LoanOrderByWithRelationInput
    allocations?: RepaymentAllocationOrderByRelationAggregateInput
  }

  export type RepaymentScheduleItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    loanId_sequence?: RepaymentScheduleItemLoanIdSequenceCompoundUniqueInput
    AND?: RepaymentScheduleItemWhereInput | RepaymentScheduleItemWhereInput[]
    OR?: RepaymentScheduleItemWhereInput[]
    NOT?: RepaymentScheduleItemWhereInput | RepaymentScheduleItemWhereInput[]
    loanId?: StringFilter<"RepaymentScheduleItem"> | string
    sequence?: IntFilter<"RepaymentScheduleItem"> | number
    dueDate?: DateTimeFilter<"RepaymentScheduleItem"> | Date | string
    principalDue?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    interestDue?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    feeDue?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    totalDue?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    status?: EnumScheduleStatusFilter<"RepaymentScheduleItem"> | $Enums.ScheduleStatus
    closedAt?: DateTimeNullableFilter<"RepaymentScheduleItem"> | Date | string | null
    createdAt?: DateTimeFilter<"RepaymentScheduleItem"> | Date | string
    updatedAt?: DateTimeFilter<"RepaymentScheduleItem"> | Date | string
    deletedAt?: DateTimeNullableFilter<"RepaymentScheduleItem"> | Date | string | null
    loan?: XOR<LoanScalarRelationFilter, LoanWhereInput>
    allocations?: RepaymentAllocationListRelationFilter
  }, "id" | "loanId_sequence">

  export type RepaymentScheduleItemOrderByWithAggregationInput = {
    id?: SortOrder
    loanId?: SortOrder
    sequence?: SortOrder
    dueDate?: SortOrder
    principalDue?: SortOrder
    interestDue?: SortOrder
    feeDue?: SortOrder
    totalDue?: SortOrder
    paidAmount?: SortOrder
    status?: SortOrder
    closedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: RepaymentScheduleItemCountOrderByAggregateInput
    _avg?: RepaymentScheduleItemAvgOrderByAggregateInput
    _max?: RepaymentScheduleItemMaxOrderByAggregateInput
    _min?: RepaymentScheduleItemMinOrderByAggregateInput
    _sum?: RepaymentScheduleItemSumOrderByAggregateInput
  }

  export type RepaymentScheduleItemScalarWhereWithAggregatesInput = {
    AND?: RepaymentScheduleItemScalarWhereWithAggregatesInput | RepaymentScheduleItemScalarWhereWithAggregatesInput[]
    OR?: RepaymentScheduleItemScalarWhereWithAggregatesInput[]
    NOT?: RepaymentScheduleItemScalarWhereWithAggregatesInput | RepaymentScheduleItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RepaymentScheduleItem"> | string
    loanId?: StringWithAggregatesFilter<"RepaymentScheduleItem"> | string
    sequence?: IntWithAggregatesFilter<"RepaymentScheduleItem"> | number
    dueDate?: DateTimeWithAggregatesFilter<"RepaymentScheduleItem"> | Date | string
    principalDue?: DecimalWithAggregatesFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    interestDue?: DecimalWithAggregatesFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    feeDue?: DecimalWithAggregatesFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    totalDue?: DecimalWithAggregatesFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalWithAggregatesFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    status?: EnumScheduleStatusWithAggregatesFilter<"RepaymentScheduleItem"> | $Enums.ScheduleStatus
    closedAt?: DateTimeNullableWithAggregatesFilter<"RepaymentScheduleItem"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RepaymentScheduleItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RepaymentScheduleItem"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"RepaymentScheduleItem"> | Date | string | null
  }

  export type RepaymentWhereInput = {
    AND?: RepaymentWhereInput | RepaymentWhereInput[]
    OR?: RepaymentWhereInput[]
    NOT?: RepaymentWhereInput | RepaymentWhereInput[]
    id?: StringFilter<"Repayment"> | string
    loanId?: StringFilter<"Repayment"> | string
    receivedByUserId?: StringFilter<"Repayment"> | string
    amount?: DecimalFilter<"Repayment"> | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFilter<"Repayment"> | string
    paidAt?: DateTimeFilter<"Repayment"> | Date | string
    method?: EnumRepaymentMethodFilter<"Repayment"> | $Enums.RepaymentMethod
    reference?: StringNullableFilter<"Repayment"> | string | null
    notes?: StringNullableFilter<"Repayment"> | string | null
    createdAt?: DateTimeFilter<"Repayment"> | Date | string
    updatedAt?: DateTimeFilter<"Repayment"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Repayment"> | Date | string | null
    loan?: XOR<LoanScalarRelationFilter, LoanWhereInput>
    receivedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    allocations?: RepaymentAllocationListRelationFilter
  }

  export type RepaymentOrderByWithRelationInput = {
    id?: SortOrder
    loanId?: SortOrder
    receivedByUserId?: SortOrder
    amount?: SortOrder
    currencyCode?: SortOrder
    paidAt?: SortOrder
    method?: SortOrder
    reference?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    loan?: LoanOrderByWithRelationInput
    receivedBy?: UserOrderByWithRelationInput
    allocations?: RepaymentAllocationOrderByRelationAggregateInput
  }

  export type RepaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RepaymentWhereInput | RepaymentWhereInput[]
    OR?: RepaymentWhereInput[]
    NOT?: RepaymentWhereInput | RepaymentWhereInput[]
    loanId?: StringFilter<"Repayment"> | string
    receivedByUserId?: StringFilter<"Repayment"> | string
    amount?: DecimalFilter<"Repayment"> | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFilter<"Repayment"> | string
    paidAt?: DateTimeFilter<"Repayment"> | Date | string
    method?: EnumRepaymentMethodFilter<"Repayment"> | $Enums.RepaymentMethod
    reference?: StringNullableFilter<"Repayment"> | string | null
    notes?: StringNullableFilter<"Repayment"> | string | null
    createdAt?: DateTimeFilter<"Repayment"> | Date | string
    updatedAt?: DateTimeFilter<"Repayment"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Repayment"> | Date | string | null
    loan?: XOR<LoanScalarRelationFilter, LoanWhereInput>
    receivedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    allocations?: RepaymentAllocationListRelationFilter
  }, "id">

  export type RepaymentOrderByWithAggregationInput = {
    id?: SortOrder
    loanId?: SortOrder
    receivedByUserId?: SortOrder
    amount?: SortOrder
    currencyCode?: SortOrder
    paidAt?: SortOrder
    method?: SortOrder
    reference?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: RepaymentCountOrderByAggregateInput
    _avg?: RepaymentAvgOrderByAggregateInput
    _max?: RepaymentMaxOrderByAggregateInput
    _min?: RepaymentMinOrderByAggregateInput
    _sum?: RepaymentSumOrderByAggregateInput
  }

  export type RepaymentScalarWhereWithAggregatesInput = {
    AND?: RepaymentScalarWhereWithAggregatesInput | RepaymentScalarWhereWithAggregatesInput[]
    OR?: RepaymentScalarWhereWithAggregatesInput[]
    NOT?: RepaymentScalarWhereWithAggregatesInput | RepaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Repayment"> | string
    loanId?: StringWithAggregatesFilter<"Repayment"> | string
    receivedByUserId?: StringWithAggregatesFilter<"Repayment"> | string
    amount?: DecimalWithAggregatesFilter<"Repayment"> | Decimal | DecimalJsLike | number | string
    currencyCode?: StringWithAggregatesFilter<"Repayment"> | string
    paidAt?: DateTimeWithAggregatesFilter<"Repayment"> | Date | string
    method?: EnumRepaymentMethodWithAggregatesFilter<"Repayment"> | $Enums.RepaymentMethod
    reference?: StringNullableWithAggregatesFilter<"Repayment"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Repayment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Repayment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Repayment"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Repayment"> | Date | string | null
  }

  export type RepaymentAllocationWhereInput = {
    AND?: RepaymentAllocationWhereInput | RepaymentAllocationWhereInput[]
    OR?: RepaymentAllocationWhereInput[]
    NOT?: RepaymentAllocationWhereInput | RepaymentAllocationWhereInput[]
    id?: StringFilter<"RepaymentAllocation"> | string
    repaymentId?: StringFilter<"RepaymentAllocation"> | string
    scheduleItemId?: StringFilter<"RepaymentAllocation"> | string
    amount?: DecimalFilter<"RepaymentAllocation"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"RepaymentAllocation"> | Date | string
    repayment?: XOR<RepaymentScalarRelationFilter, RepaymentWhereInput>
    scheduleItem?: XOR<RepaymentScheduleItemScalarRelationFilter, RepaymentScheduleItemWhereInput>
  }

  export type RepaymentAllocationOrderByWithRelationInput = {
    id?: SortOrder
    repaymentId?: SortOrder
    scheduleItemId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    repayment?: RepaymentOrderByWithRelationInput
    scheduleItem?: RepaymentScheduleItemOrderByWithRelationInput
  }

  export type RepaymentAllocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    repaymentId_scheduleItemId?: RepaymentAllocationRepaymentIdScheduleItemIdCompoundUniqueInput
    AND?: RepaymentAllocationWhereInput | RepaymentAllocationWhereInput[]
    OR?: RepaymentAllocationWhereInput[]
    NOT?: RepaymentAllocationWhereInput | RepaymentAllocationWhereInput[]
    repaymentId?: StringFilter<"RepaymentAllocation"> | string
    scheduleItemId?: StringFilter<"RepaymentAllocation"> | string
    amount?: DecimalFilter<"RepaymentAllocation"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"RepaymentAllocation"> | Date | string
    repayment?: XOR<RepaymentScalarRelationFilter, RepaymentWhereInput>
    scheduleItem?: XOR<RepaymentScheduleItemScalarRelationFilter, RepaymentScheduleItemWhereInput>
  }, "id" | "repaymentId_scheduleItemId">

  export type RepaymentAllocationOrderByWithAggregationInput = {
    id?: SortOrder
    repaymentId?: SortOrder
    scheduleItemId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    _count?: RepaymentAllocationCountOrderByAggregateInput
    _avg?: RepaymentAllocationAvgOrderByAggregateInput
    _max?: RepaymentAllocationMaxOrderByAggregateInput
    _min?: RepaymentAllocationMinOrderByAggregateInput
    _sum?: RepaymentAllocationSumOrderByAggregateInput
  }

  export type RepaymentAllocationScalarWhereWithAggregatesInput = {
    AND?: RepaymentAllocationScalarWhereWithAggregatesInput | RepaymentAllocationScalarWhereWithAggregatesInput[]
    OR?: RepaymentAllocationScalarWhereWithAggregatesInput[]
    NOT?: RepaymentAllocationScalarWhereWithAggregatesInput | RepaymentAllocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RepaymentAllocation"> | string
    repaymentId?: StringWithAggregatesFilter<"RepaymentAllocation"> | string
    scheduleItemId?: StringWithAggregatesFilter<"RepaymentAllocation"> | string
    amount?: DecimalWithAggregatesFilter<"RepaymentAllocation"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"RepaymentAllocation"> | Date | string
  }

  export type LoanAssignmentHistoryWhereInput = {
    AND?: LoanAssignmentHistoryWhereInput | LoanAssignmentHistoryWhereInput[]
    OR?: LoanAssignmentHistoryWhereInput[]
    NOT?: LoanAssignmentHistoryWhereInput | LoanAssignmentHistoryWhereInput[]
    id?: StringFilter<"LoanAssignmentHistory"> | string
    loanId?: StringFilter<"LoanAssignmentHistory"> | string
    oldOfficerId?: StringNullableFilter<"LoanAssignmentHistory"> | string | null
    newOfficerId?: StringFilter<"LoanAssignmentHistory"> | string
    oldBranchId?: StringNullableFilter<"LoanAssignmentHistory"> | string | null
    newBranchId?: StringNullableFilter<"LoanAssignmentHistory"> | string | null
    changedByUserId?: StringFilter<"LoanAssignmentHistory"> | string
    reason?: StringNullableFilter<"LoanAssignmentHistory"> | string | null
    changedAt?: DateTimeFilter<"LoanAssignmentHistory"> | Date | string
    loan?: XOR<LoanScalarRelationFilter, LoanWhereInput>
    oldOfficer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    newOfficer?: XOR<UserScalarRelationFilter, UserWhereInput>
    oldBranch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    newBranch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    changedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type LoanAssignmentHistoryOrderByWithRelationInput = {
    id?: SortOrder
    loanId?: SortOrder
    oldOfficerId?: SortOrderInput | SortOrder
    newOfficerId?: SortOrder
    oldBranchId?: SortOrderInput | SortOrder
    newBranchId?: SortOrderInput | SortOrder
    changedByUserId?: SortOrder
    reason?: SortOrderInput | SortOrder
    changedAt?: SortOrder
    loan?: LoanOrderByWithRelationInput
    oldOfficer?: UserOrderByWithRelationInput
    newOfficer?: UserOrderByWithRelationInput
    oldBranch?: BranchOrderByWithRelationInput
    newBranch?: BranchOrderByWithRelationInput
    changedBy?: UserOrderByWithRelationInput
  }

  export type LoanAssignmentHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LoanAssignmentHistoryWhereInput | LoanAssignmentHistoryWhereInput[]
    OR?: LoanAssignmentHistoryWhereInput[]
    NOT?: LoanAssignmentHistoryWhereInput | LoanAssignmentHistoryWhereInput[]
    loanId?: StringFilter<"LoanAssignmentHistory"> | string
    oldOfficerId?: StringNullableFilter<"LoanAssignmentHistory"> | string | null
    newOfficerId?: StringFilter<"LoanAssignmentHistory"> | string
    oldBranchId?: StringNullableFilter<"LoanAssignmentHistory"> | string | null
    newBranchId?: StringNullableFilter<"LoanAssignmentHistory"> | string | null
    changedByUserId?: StringFilter<"LoanAssignmentHistory"> | string
    reason?: StringNullableFilter<"LoanAssignmentHistory"> | string | null
    changedAt?: DateTimeFilter<"LoanAssignmentHistory"> | Date | string
    loan?: XOR<LoanScalarRelationFilter, LoanWhereInput>
    oldOfficer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    newOfficer?: XOR<UserScalarRelationFilter, UserWhereInput>
    oldBranch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    newBranch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    changedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type LoanAssignmentHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    loanId?: SortOrder
    oldOfficerId?: SortOrderInput | SortOrder
    newOfficerId?: SortOrder
    oldBranchId?: SortOrderInput | SortOrder
    newBranchId?: SortOrderInput | SortOrder
    changedByUserId?: SortOrder
    reason?: SortOrderInput | SortOrder
    changedAt?: SortOrder
    _count?: LoanAssignmentHistoryCountOrderByAggregateInput
    _max?: LoanAssignmentHistoryMaxOrderByAggregateInput
    _min?: LoanAssignmentHistoryMinOrderByAggregateInput
  }

  export type LoanAssignmentHistoryScalarWhereWithAggregatesInput = {
    AND?: LoanAssignmentHistoryScalarWhereWithAggregatesInput | LoanAssignmentHistoryScalarWhereWithAggregatesInput[]
    OR?: LoanAssignmentHistoryScalarWhereWithAggregatesInput[]
    NOT?: LoanAssignmentHistoryScalarWhereWithAggregatesInput | LoanAssignmentHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LoanAssignmentHistory"> | string
    loanId?: StringWithAggregatesFilter<"LoanAssignmentHistory"> | string
    oldOfficerId?: StringNullableWithAggregatesFilter<"LoanAssignmentHistory"> | string | null
    newOfficerId?: StringWithAggregatesFilter<"LoanAssignmentHistory"> | string
    oldBranchId?: StringNullableWithAggregatesFilter<"LoanAssignmentHistory"> | string | null
    newBranchId?: StringNullableWithAggregatesFilter<"LoanAssignmentHistory"> | string | null
    changedByUserId?: StringWithAggregatesFilter<"LoanAssignmentHistory"> | string
    reason?: StringNullableWithAggregatesFilter<"LoanAssignmentHistory"> | string | null
    changedAt?: DateTimeWithAggregatesFilter<"LoanAssignmentHistory"> | Date | string
  }

  export type CustomerReassignmentWhereInput = {
    AND?: CustomerReassignmentWhereInput | CustomerReassignmentWhereInput[]
    OR?: CustomerReassignmentWhereInput[]
    NOT?: CustomerReassignmentWhereInput | CustomerReassignmentWhereInput[]
    id?: StringFilter<"CustomerReassignment"> | string
    customerId?: StringFilter<"CustomerReassignment"> | string
    oldBranchId?: StringNullableFilter<"CustomerReassignment"> | string | null
    newBranchId?: StringFilter<"CustomerReassignment"> | string
    oldOfficerId?: StringNullableFilter<"CustomerReassignment"> | string | null
    newOfficerId?: StringNullableFilter<"CustomerReassignment"> | string | null
    changedByUserId?: StringFilter<"CustomerReassignment"> | string
    reason?: StringNullableFilter<"CustomerReassignment"> | string | null
    previousOfficerEndAt?: DateTimeNullableFilter<"CustomerReassignment"> | Date | string | null
    newOfficerStartAt?: DateTimeNullableFilter<"CustomerReassignment"> | Date | string | null
    changedAt?: DateTimeFilter<"CustomerReassignment"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    oldBranch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    newBranch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    oldOfficer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    newOfficer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    changedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CustomerReassignmentOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    oldBranchId?: SortOrderInput | SortOrder
    newBranchId?: SortOrder
    oldOfficerId?: SortOrderInput | SortOrder
    newOfficerId?: SortOrderInput | SortOrder
    changedByUserId?: SortOrder
    reason?: SortOrderInput | SortOrder
    previousOfficerEndAt?: SortOrderInput | SortOrder
    newOfficerStartAt?: SortOrderInput | SortOrder
    changedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    oldBranch?: BranchOrderByWithRelationInput
    newBranch?: BranchOrderByWithRelationInput
    oldOfficer?: UserOrderByWithRelationInput
    newOfficer?: UserOrderByWithRelationInput
    changedBy?: UserOrderByWithRelationInput
  }

  export type CustomerReassignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CustomerReassignmentWhereInput | CustomerReassignmentWhereInput[]
    OR?: CustomerReassignmentWhereInput[]
    NOT?: CustomerReassignmentWhereInput | CustomerReassignmentWhereInput[]
    customerId?: StringFilter<"CustomerReassignment"> | string
    oldBranchId?: StringNullableFilter<"CustomerReassignment"> | string | null
    newBranchId?: StringFilter<"CustomerReassignment"> | string
    oldOfficerId?: StringNullableFilter<"CustomerReassignment"> | string | null
    newOfficerId?: StringNullableFilter<"CustomerReassignment"> | string | null
    changedByUserId?: StringFilter<"CustomerReassignment"> | string
    reason?: StringNullableFilter<"CustomerReassignment"> | string | null
    previousOfficerEndAt?: DateTimeNullableFilter<"CustomerReassignment"> | Date | string | null
    newOfficerStartAt?: DateTimeNullableFilter<"CustomerReassignment"> | Date | string | null
    changedAt?: DateTimeFilter<"CustomerReassignment"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    oldBranch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    newBranch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    oldOfficer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    newOfficer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    changedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CustomerReassignmentOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    oldBranchId?: SortOrderInput | SortOrder
    newBranchId?: SortOrder
    oldOfficerId?: SortOrderInput | SortOrder
    newOfficerId?: SortOrderInput | SortOrder
    changedByUserId?: SortOrder
    reason?: SortOrderInput | SortOrder
    previousOfficerEndAt?: SortOrderInput | SortOrder
    newOfficerStartAt?: SortOrderInput | SortOrder
    changedAt?: SortOrder
    _count?: CustomerReassignmentCountOrderByAggregateInput
    _max?: CustomerReassignmentMaxOrderByAggregateInput
    _min?: CustomerReassignmentMinOrderByAggregateInput
  }

  export type CustomerReassignmentScalarWhereWithAggregatesInput = {
    AND?: CustomerReassignmentScalarWhereWithAggregatesInput | CustomerReassignmentScalarWhereWithAggregatesInput[]
    OR?: CustomerReassignmentScalarWhereWithAggregatesInput[]
    NOT?: CustomerReassignmentScalarWhereWithAggregatesInput | CustomerReassignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomerReassignment"> | string
    customerId?: StringWithAggregatesFilter<"CustomerReassignment"> | string
    oldBranchId?: StringNullableWithAggregatesFilter<"CustomerReassignment"> | string | null
    newBranchId?: StringWithAggregatesFilter<"CustomerReassignment"> | string
    oldOfficerId?: StringNullableWithAggregatesFilter<"CustomerReassignment"> | string | null
    newOfficerId?: StringNullableWithAggregatesFilter<"CustomerReassignment"> | string | null
    changedByUserId?: StringWithAggregatesFilter<"CustomerReassignment"> | string
    reason?: StringNullableWithAggregatesFilter<"CustomerReassignment"> | string | null
    previousOfficerEndAt?: DateTimeNullableWithAggregatesFilter<"CustomerReassignment"> | Date | string | null
    newOfficerStartAt?: DateTimeNullableWithAggregatesFilter<"CustomerReassignment"> | Date | string | null
    changedAt?: DateTimeWithAggregatesFilter<"CustomerReassignment"> | Date | string
  }

  export type DocumentTypeWhereInput = {
    AND?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    OR?: DocumentTypeWhereInput[]
    NOT?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    id?: StringFilter<"DocumentType"> | string
    code?: StringFilter<"DocumentType"> | string
    name?: StringFilter<"DocumentType"> | string
    description?: StringNullableFilter<"DocumentType"> | string | null
    isActive?: BoolFilter<"DocumentType"> | boolean
    createdAt?: DateTimeFilter<"DocumentType"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentType"> | Date | string
    deletedAt?: DateTimeNullableFilter<"DocumentType"> | Date | string | null
    customerDocs?: CustomerDocumentListRelationFilter
    loanDocs?: LoanDocumentListRelationFilter
  }

  export type DocumentTypeOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    customerDocs?: CustomerDocumentOrderByRelationAggregateInput
    loanDocs?: LoanDocumentOrderByRelationAggregateInput
  }

  export type DocumentTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    OR?: DocumentTypeWhereInput[]
    NOT?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    name?: StringFilter<"DocumentType"> | string
    description?: StringNullableFilter<"DocumentType"> | string | null
    isActive?: BoolFilter<"DocumentType"> | boolean
    createdAt?: DateTimeFilter<"DocumentType"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentType"> | Date | string
    deletedAt?: DateTimeNullableFilter<"DocumentType"> | Date | string | null
    customerDocs?: CustomerDocumentListRelationFilter
    loanDocs?: LoanDocumentListRelationFilter
  }, "id" | "code">

  export type DocumentTypeOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: DocumentTypeCountOrderByAggregateInput
    _max?: DocumentTypeMaxOrderByAggregateInput
    _min?: DocumentTypeMinOrderByAggregateInput
  }

  export type DocumentTypeScalarWhereWithAggregatesInput = {
    AND?: DocumentTypeScalarWhereWithAggregatesInput | DocumentTypeScalarWhereWithAggregatesInput[]
    OR?: DocumentTypeScalarWhereWithAggregatesInput[]
    NOT?: DocumentTypeScalarWhereWithAggregatesInput | DocumentTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DocumentType"> | string
    code?: StringWithAggregatesFilter<"DocumentType"> | string
    name?: StringWithAggregatesFilter<"DocumentType"> | string
    description?: StringNullableWithAggregatesFilter<"DocumentType"> | string | null
    isActive?: BoolWithAggregatesFilter<"DocumentType"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"DocumentType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DocumentType"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"DocumentType"> | Date | string | null
  }

  export type CustomerDocumentWhereInput = {
    AND?: CustomerDocumentWhereInput | CustomerDocumentWhereInput[]
    OR?: CustomerDocumentWhereInput[]
    NOT?: CustomerDocumentWhereInput | CustomerDocumentWhereInput[]
    id?: StringFilter<"CustomerDocument"> | string
    customerId?: StringFilter<"CustomerDocument"> | string
    documentTypeId?: StringFilter<"CustomerDocument"> | string
    fileUrl?: StringFilter<"CustomerDocument"> | string
    issuingAuthority?: StringNullableFilter<"CustomerDocument"> | string | null
    issueDate?: DateTimeNullableFilter<"CustomerDocument"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"CustomerDocument"> | Date | string | null
    verified?: BoolFilter<"CustomerDocument"> | boolean
    verificationNotes?: StringNullableFilter<"CustomerDocument"> | string | null
    uploadedByUserId?: StringFilter<"CustomerDocument"> | string
    uploadedAt?: DateTimeFilter<"CustomerDocument"> | Date | string
    deletedAt?: DateTimeNullableFilter<"CustomerDocument"> | Date | string | null
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    documentType?: XOR<DocumentTypeScalarRelationFilter, DocumentTypeWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CustomerDocumentOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    documentTypeId?: SortOrder
    fileUrl?: SortOrder
    issuingAuthority?: SortOrderInput | SortOrder
    issueDate?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    verified?: SortOrder
    verificationNotes?: SortOrderInput | SortOrder
    uploadedByUserId?: SortOrder
    uploadedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    customer?: CustomerOrderByWithRelationInput
    documentType?: DocumentTypeOrderByWithRelationInput
    uploadedBy?: UserOrderByWithRelationInput
  }

  export type CustomerDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CustomerDocumentWhereInput | CustomerDocumentWhereInput[]
    OR?: CustomerDocumentWhereInput[]
    NOT?: CustomerDocumentWhereInput | CustomerDocumentWhereInput[]
    customerId?: StringFilter<"CustomerDocument"> | string
    documentTypeId?: StringFilter<"CustomerDocument"> | string
    fileUrl?: StringFilter<"CustomerDocument"> | string
    issuingAuthority?: StringNullableFilter<"CustomerDocument"> | string | null
    issueDate?: DateTimeNullableFilter<"CustomerDocument"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"CustomerDocument"> | Date | string | null
    verified?: BoolFilter<"CustomerDocument"> | boolean
    verificationNotes?: StringNullableFilter<"CustomerDocument"> | string | null
    uploadedByUserId?: StringFilter<"CustomerDocument"> | string
    uploadedAt?: DateTimeFilter<"CustomerDocument"> | Date | string
    deletedAt?: DateTimeNullableFilter<"CustomerDocument"> | Date | string | null
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    documentType?: XOR<DocumentTypeScalarRelationFilter, DocumentTypeWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CustomerDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    documentTypeId?: SortOrder
    fileUrl?: SortOrder
    issuingAuthority?: SortOrderInput | SortOrder
    issueDate?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    verified?: SortOrder
    verificationNotes?: SortOrderInput | SortOrder
    uploadedByUserId?: SortOrder
    uploadedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: CustomerDocumentCountOrderByAggregateInput
    _max?: CustomerDocumentMaxOrderByAggregateInput
    _min?: CustomerDocumentMinOrderByAggregateInput
  }

  export type CustomerDocumentScalarWhereWithAggregatesInput = {
    AND?: CustomerDocumentScalarWhereWithAggregatesInput | CustomerDocumentScalarWhereWithAggregatesInput[]
    OR?: CustomerDocumentScalarWhereWithAggregatesInput[]
    NOT?: CustomerDocumentScalarWhereWithAggregatesInput | CustomerDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomerDocument"> | string
    customerId?: StringWithAggregatesFilter<"CustomerDocument"> | string
    documentTypeId?: StringWithAggregatesFilter<"CustomerDocument"> | string
    fileUrl?: StringWithAggregatesFilter<"CustomerDocument"> | string
    issuingAuthority?: StringNullableWithAggregatesFilter<"CustomerDocument"> | string | null
    issueDate?: DateTimeNullableWithAggregatesFilter<"CustomerDocument"> | Date | string | null
    expiryDate?: DateTimeNullableWithAggregatesFilter<"CustomerDocument"> | Date | string | null
    verified?: BoolWithAggregatesFilter<"CustomerDocument"> | boolean
    verificationNotes?: StringNullableWithAggregatesFilter<"CustomerDocument"> | string | null
    uploadedByUserId?: StringWithAggregatesFilter<"CustomerDocument"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"CustomerDocument"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"CustomerDocument"> | Date | string | null
  }

  export type LoanDocumentWhereInput = {
    AND?: LoanDocumentWhereInput | LoanDocumentWhereInput[]
    OR?: LoanDocumentWhereInput[]
    NOT?: LoanDocumentWhereInput | LoanDocumentWhereInput[]
    id?: StringFilter<"LoanDocument"> | string
    loanId?: StringFilter<"LoanDocument"> | string
    documentTypeId?: StringFilter<"LoanDocument"> | string
    fileUrl?: StringFilter<"LoanDocument"> | string
    issuingAuthority?: StringNullableFilter<"LoanDocument"> | string | null
    issueDate?: DateTimeNullableFilter<"LoanDocument"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"LoanDocument"> | Date | string | null
    verified?: BoolFilter<"LoanDocument"> | boolean
    verificationNotes?: StringNullableFilter<"LoanDocument"> | string | null
    uploadedByUserId?: StringFilter<"LoanDocument"> | string
    uploadedAt?: DateTimeFilter<"LoanDocument"> | Date | string
    deletedAt?: DateTimeNullableFilter<"LoanDocument"> | Date | string | null
    loan?: XOR<LoanScalarRelationFilter, LoanWhereInput>
    documentType?: XOR<DocumentTypeScalarRelationFilter, DocumentTypeWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type LoanDocumentOrderByWithRelationInput = {
    id?: SortOrder
    loanId?: SortOrder
    documentTypeId?: SortOrder
    fileUrl?: SortOrder
    issuingAuthority?: SortOrderInput | SortOrder
    issueDate?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    verified?: SortOrder
    verificationNotes?: SortOrderInput | SortOrder
    uploadedByUserId?: SortOrder
    uploadedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    loan?: LoanOrderByWithRelationInput
    documentType?: DocumentTypeOrderByWithRelationInput
    uploadedBy?: UserOrderByWithRelationInput
  }

  export type LoanDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LoanDocumentWhereInput | LoanDocumentWhereInput[]
    OR?: LoanDocumentWhereInput[]
    NOT?: LoanDocumentWhereInput | LoanDocumentWhereInput[]
    loanId?: StringFilter<"LoanDocument"> | string
    documentTypeId?: StringFilter<"LoanDocument"> | string
    fileUrl?: StringFilter<"LoanDocument"> | string
    issuingAuthority?: StringNullableFilter<"LoanDocument"> | string | null
    issueDate?: DateTimeNullableFilter<"LoanDocument"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"LoanDocument"> | Date | string | null
    verified?: BoolFilter<"LoanDocument"> | boolean
    verificationNotes?: StringNullableFilter<"LoanDocument"> | string | null
    uploadedByUserId?: StringFilter<"LoanDocument"> | string
    uploadedAt?: DateTimeFilter<"LoanDocument"> | Date | string
    deletedAt?: DateTimeNullableFilter<"LoanDocument"> | Date | string | null
    loan?: XOR<LoanScalarRelationFilter, LoanWhereInput>
    documentType?: XOR<DocumentTypeScalarRelationFilter, DocumentTypeWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type LoanDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    loanId?: SortOrder
    documentTypeId?: SortOrder
    fileUrl?: SortOrder
    issuingAuthority?: SortOrderInput | SortOrder
    issueDate?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    verified?: SortOrder
    verificationNotes?: SortOrderInput | SortOrder
    uploadedByUserId?: SortOrder
    uploadedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: LoanDocumentCountOrderByAggregateInput
    _max?: LoanDocumentMaxOrderByAggregateInput
    _min?: LoanDocumentMinOrderByAggregateInput
  }

  export type LoanDocumentScalarWhereWithAggregatesInput = {
    AND?: LoanDocumentScalarWhereWithAggregatesInput | LoanDocumentScalarWhereWithAggregatesInput[]
    OR?: LoanDocumentScalarWhereWithAggregatesInput[]
    NOT?: LoanDocumentScalarWhereWithAggregatesInput | LoanDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LoanDocument"> | string
    loanId?: StringWithAggregatesFilter<"LoanDocument"> | string
    documentTypeId?: StringWithAggregatesFilter<"LoanDocument"> | string
    fileUrl?: StringWithAggregatesFilter<"LoanDocument"> | string
    issuingAuthority?: StringNullableWithAggregatesFilter<"LoanDocument"> | string | null
    issueDate?: DateTimeNullableWithAggregatesFilter<"LoanDocument"> | Date | string | null
    expiryDate?: DateTimeNullableWithAggregatesFilter<"LoanDocument"> | Date | string | null
    verified?: BoolWithAggregatesFilter<"LoanDocument"> | boolean
    verificationNotes?: StringNullableWithAggregatesFilter<"LoanDocument"> | string | null
    uploadedByUserId?: StringWithAggregatesFilter<"LoanDocument"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"LoanDocument"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"LoanDocument"> | Date | string | null
  }

  export type StaffSessionWhereInput = {
    AND?: StaffSessionWhereInput | StaffSessionWhereInput[]
    OR?: StaffSessionWhereInput[]
    NOT?: StaffSessionWhereInput | StaffSessionWhereInput[]
    id?: StringFilter<"StaffSession"> | string
    userId?: StringFilter<"StaffSession"> | string
    jwtId?: StringFilter<"StaffSession"> | string
    userAgent?: StringNullableFilter<"StaffSession"> | string | null
    ipAddress?: StringNullableFilter<"StaffSession"> | string | null
    createdAt?: DateTimeFilter<"StaffSession"> | Date | string
    expiresAt?: DateTimeFilter<"StaffSession"> | Date | string
    revokedAt?: DateTimeNullableFilter<"StaffSession"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StaffSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    jwtId?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revokedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type StaffSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jwtId?: string
    AND?: StaffSessionWhereInput | StaffSessionWhereInput[]
    OR?: StaffSessionWhereInput[]
    NOT?: StaffSessionWhereInput | StaffSessionWhereInput[]
    userId?: StringFilter<"StaffSession"> | string
    userAgent?: StringNullableFilter<"StaffSession"> | string | null
    ipAddress?: StringNullableFilter<"StaffSession"> | string | null
    createdAt?: DateTimeFilter<"StaffSession"> | Date | string
    expiresAt?: DateTimeFilter<"StaffSession"> | Date | string
    revokedAt?: DateTimeNullableFilter<"StaffSession"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "jwtId">

  export type StaffSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    jwtId?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revokedAt?: SortOrderInput | SortOrder
    _count?: StaffSessionCountOrderByAggregateInput
    _max?: StaffSessionMaxOrderByAggregateInput
    _min?: StaffSessionMinOrderByAggregateInput
  }

  export type StaffSessionScalarWhereWithAggregatesInput = {
    AND?: StaffSessionScalarWhereWithAggregatesInput | StaffSessionScalarWhereWithAggregatesInput[]
    OR?: StaffSessionScalarWhereWithAggregatesInput[]
    NOT?: StaffSessionScalarWhereWithAggregatesInput | StaffSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StaffSession"> | string
    userId?: StringWithAggregatesFilter<"StaffSession"> | string
    jwtId?: StringWithAggregatesFilter<"StaffSession"> | string
    userAgent?: StringNullableWithAggregatesFilter<"StaffSession"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"StaffSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StaffSession"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"StaffSession"> | Date | string
    revokedAt?: DateTimeNullableWithAggregatesFilter<"StaffSession"> | Date | string | null
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    actorUserId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entityName?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    before?: JsonNullableFilter<"AuditLog">
    after?: JsonNullableFilter<"AuditLog">
    metadata?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    actor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    actorUserId?: SortOrderInput | SortOrder
    action?: SortOrder
    entityName?: SortOrder
    entityId?: SortOrder
    before?: SortOrderInput | SortOrder
    after?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    actor?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    actorUserId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entityName?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    before?: JsonNullableFilter<"AuditLog">
    after?: JsonNullableFilter<"AuditLog">
    metadata?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    actor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    actorUserId?: SortOrderInput | SortOrder
    action?: SortOrder
    entityName?: SortOrder
    entityId?: SortOrder
    before?: SortOrderInput | SortOrder
    after?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    actorUserId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entityName?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringWithAggregatesFilter<"AuditLog"> | string
    before?: JsonNullableWithAggregatesFilter<"AuditLog">
    after?: JsonNullableWithAggregatesFilter<"AuditLog">
    metadata?: JsonNullableWithAggregatesFilter<"AuditLog">
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type BranchCreateInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    manager?: UserCreateNestedOneWithoutManagedBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    loans?: LoanCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutOldBranchInput
    newLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutNewBranchInput
    oldCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutOldBranchInput
    newCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutNewBranchInput
  }

  export type BranchUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    managerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldBranchInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewBranchInput
    oldCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldBranchInput
    newCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewBranchInput
  }

  export type BranchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manager?: UserUpdateOneWithoutManagedBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    loans?: LoanUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutOldBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutNewBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUpdateManyWithoutOldBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUpdateManyWithoutNewBranchNestedInput
  }

  export type BranchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutOldBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutNewBranchNestedInput
  }

  export type BranchCreateManyInput = {
    id?: string
    name: string
    code: string
    managerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type BranchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BranchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CustomerCreateInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutCustomersInput
    currentOfficer?: UserCreateNestedOneWithoutCurrentCustomersInput
    documents?: CustomerDocumentCreateNestedManyWithoutCustomerInput
    loans?: LoanCreateNestedManyWithoutCustomerInput
    reassignments?: CustomerReassignmentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    branchId: string
    currentOfficerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    documents?: CustomerDocumentUncheckedCreateNestedManyWithoutCustomerInput
    loans?: LoanUncheckedCreateNestedManyWithoutCustomerInput
    reassignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutCustomersNestedInput
    currentOfficer?: UserUpdateOneWithoutCurrentCustomersNestedInput
    documents?: CustomerDocumentUpdateManyWithoutCustomerNestedInput
    loans?: LoanUpdateManyWithoutCustomerNestedInput
    reassignments?: CustomerReassignmentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    currentOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documents?: CustomerDocumentUncheckedUpdateManyWithoutCustomerNestedInput
    loans?: LoanUncheckedUpdateManyWithoutCustomerNestedInput
    reassignments?: CustomerReassignmentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    branchId: string
    currentOfficerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type CustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    currentOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanTypeCreateInput = {
    id?: string
    name: string
    description?: string | null
    minAmount: Decimal | DecimalJsLike | number | string
    maxAmount: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    loans?: LoanCreateNestedManyWithoutLoanTypeInput
  }

  export type LoanTypeUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    minAmount: Decimal | DecimalJsLike | number | string
    maxAmount: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    loans?: LoanUncheckedCreateNestedManyWithoutLoanTypeInput
  }

  export type LoanTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loans?: LoanUpdateManyWithoutLoanTypeNestedInput
  }

  export type LoanTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loans?: LoanUncheckedUpdateManyWithoutLoanTypeNestedInput
  }

  export type LoanTypeCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    minAmount: Decimal | DecimalJsLike | number | string
    maxAmount: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanCreateInput = {
    id?: string
    loanNumber: string
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    customer: CustomerCreateNestedOneWithoutLoansInput
    branch: BranchCreateNestedOneWithoutLoansInput
    loanType?: LoanTypeCreateNestedOneWithoutLoansInput
    createdBy: UserCreateNestedOneWithoutCreatedLoansInput
    assignedOfficer: UserCreateNestedOneWithoutAssignedLoansInput
    scheduleItems?: RepaymentScheduleItemCreateNestedManyWithoutLoanInput
    repayments?: RepaymentCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateInput = {
    id?: string
    loanNumber: string
    customerId: string
    branchId: string
    loanTypeId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    createdByUserId: string
    assignedOfficerId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedCreateNestedManyWithoutLoanInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentUncheckedCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneRequiredWithoutLoansNestedInput
    branch?: BranchUpdateOneRequiredWithoutLoansNestedInput
    loanType?: LoanTypeUpdateOneWithoutLoansNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedLoansNestedInput
    assignedOfficer?: UserUpdateOneRequiredWithoutAssignedLoansNestedInput
    scheduleItems?: RepaymentScheduleItemUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    loanTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    createdByUserId?: StringFieldUpdateOperationsInput | string
    assignedOfficerId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUncheckedUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type LoanCreateManyInput = {
    id?: string
    loanNumber: string
    customerId: string
    branchId: string
    loanTypeId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    createdByUserId: string
    assignedOfficerId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    loanTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    createdByUserId?: StringFieldUpdateOperationsInput | string
    assignedOfficerId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RepaymentScheduleItemCreateInput = {
    id?: string
    sequence: number
    dueDate: Date | string
    principalDue: Decimal | DecimalJsLike | number | string
    interestDue?: Decimal | DecimalJsLike | number | string
    feeDue?: Decimal | DecimalJsLike | number | string
    totalDue: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    status?: $Enums.ScheduleStatus
    closedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    loan: LoanCreateNestedOneWithoutScheduleItemsInput
    allocations?: RepaymentAllocationCreateNestedManyWithoutScheduleItemInput
  }

  export type RepaymentScheduleItemUncheckedCreateInput = {
    id?: string
    loanId: string
    sequence: number
    dueDate: Date | string
    principalDue: Decimal | DecimalJsLike | number | string
    interestDue?: Decimal | DecimalJsLike | number | string
    feeDue?: Decimal | DecimalJsLike | number | string
    totalDue: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    status?: $Enums.ScheduleStatus
    closedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    allocations?: RepaymentAllocationUncheckedCreateNestedManyWithoutScheduleItemInput
  }

  export type RepaymentScheduleItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    interestDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loan?: LoanUpdateOneRequiredWithoutScheduleItemsNestedInput
    allocations?: RepaymentAllocationUpdateManyWithoutScheduleItemNestedInput
  }

  export type RepaymentScheduleItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    interestDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocations?: RepaymentAllocationUncheckedUpdateManyWithoutScheduleItemNestedInput
  }

  export type RepaymentScheduleItemCreateManyInput = {
    id?: string
    loanId: string
    sequence: number
    dueDate: Date | string
    principalDue: Decimal | DecimalJsLike | number | string
    interestDue?: Decimal | DecimalJsLike | number | string
    feeDue?: Decimal | DecimalJsLike | number | string
    totalDue: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    status?: $Enums.ScheduleStatus
    closedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type RepaymentScheduleItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    interestDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RepaymentScheduleItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    interestDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RepaymentCreateInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    paidAt: Date | string
    method: $Enums.RepaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    loan: LoanCreateNestedOneWithoutRepaymentsInput
    receivedBy: UserCreateNestedOneWithoutRepaymentsInput
    allocations?: RepaymentAllocationCreateNestedManyWithoutRepaymentInput
  }

  export type RepaymentUncheckedCreateInput = {
    id?: string
    loanId: string
    receivedByUserId: string
    amount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    paidAt: Date | string
    method: $Enums.RepaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    allocations?: RepaymentAllocationUncheckedCreateNestedManyWithoutRepaymentInput
  }

  export type RepaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: EnumRepaymentMethodFieldUpdateOperationsInput | $Enums.RepaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loan?: LoanUpdateOneRequiredWithoutRepaymentsNestedInput
    receivedBy?: UserUpdateOneRequiredWithoutRepaymentsNestedInput
    allocations?: RepaymentAllocationUpdateManyWithoutRepaymentNestedInput
  }

  export type RepaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    receivedByUserId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: EnumRepaymentMethodFieldUpdateOperationsInput | $Enums.RepaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocations?: RepaymentAllocationUncheckedUpdateManyWithoutRepaymentNestedInput
  }

  export type RepaymentCreateManyInput = {
    id?: string
    loanId: string
    receivedByUserId: string
    amount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    paidAt: Date | string
    method: $Enums.RepaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type RepaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: EnumRepaymentMethodFieldUpdateOperationsInput | $Enums.RepaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RepaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    receivedByUserId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: EnumRepaymentMethodFieldUpdateOperationsInput | $Enums.RepaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RepaymentAllocationCreateInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    repayment: RepaymentCreateNestedOneWithoutAllocationsInput
    scheduleItem: RepaymentScheduleItemCreateNestedOneWithoutAllocationsInput
  }

  export type RepaymentAllocationUncheckedCreateInput = {
    id?: string
    repaymentId: string
    scheduleItemId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type RepaymentAllocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    repayment?: RepaymentUpdateOneRequiredWithoutAllocationsNestedInput
    scheduleItem?: RepaymentScheduleItemUpdateOneRequiredWithoutAllocationsNestedInput
  }

  export type RepaymentAllocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    repaymentId?: StringFieldUpdateOperationsInput | string
    scheduleItemId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepaymentAllocationCreateManyInput = {
    id?: string
    repaymentId: string
    scheduleItemId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type RepaymentAllocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepaymentAllocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    repaymentId?: StringFieldUpdateOperationsInput | string
    scheduleItemId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanAssignmentHistoryCreateInput = {
    id?: string
    reason?: string | null
    changedAt?: Date | string
    loan: LoanCreateNestedOneWithoutAssignmentHistoryInput
    oldOfficer?: UserCreateNestedOneWithoutOldLoanAssignmentsInput
    newOfficer: UserCreateNestedOneWithoutNewLoanAssignmentsInput
    oldBranch?: BranchCreateNestedOneWithoutOldLoanBranchesInput
    newBranch?: BranchCreateNestedOneWithoutNewLoanBranchesInput
    changedBy: UserCreateNestedOneWithoutChangedLoanAssignmentsInput
  }

  export type LoanAssignmentHistoryUncheckedCreateInput = {
    id?: string
    loanId: string
    oldOfficerId?: string | null
    newOfficerId: string
    oldBranchId?: string | null
    newBranchId?: string | null
    changedByUserId: string
    reason?: string | null
    changedAt?: Date | string
  }

  export type LoanAssignmentHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loan?: LoanUpdateOneRequiredWithoutAssignmentHistoryNestedInput
    oldOfficer?: UserUpdateOneWithoutOldLoanAssignmentsNestedInput
    newOfficer?: UserUpdateOneRequiredWithoutNewLoanAssignmentsNestedInput
    oldBranch?: BranchUpdateOneWithoutOldLoanBranchesNestedInput
    newBranch?: BranchUpdateOneWithoutNewLoanBranchesNestedInput
    changedBy?: UserUpdateOneRequiredWithoutChangedLoanAssignmentsNestedInput
  }

  export type LoanAssignmentHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanAssignmentHistoryCreateManyInput = {
    id?: string
    loanId: string
    oldOfficerId?: string | null
    newOfficerId: string
    oldBranchId?: string | null
    newBranchId?: string | null
    changedByUserId: string
    reason?: string | null
    changedAt?: Date | string
  }

  export type LoanAssignmentHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanAssignmentHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerReassignmentCreateInput = {
    id?: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutReassignmentsInput
    oldBranch?: BranchCreateNestedOneWithoutOldCustomerBranchesInput
    newBranch: BranchCreateNestedOneWithoutNewCustomerBranchesInput
    oldOfficer?: UserCreateNestedOneWithoutOldCustomerAssignmentsInput
    newOfficer?: UserCreateNestedOneWithoutNewCustomerAssignmentsInput
    changedBy: UserCreateNestedOneWithoutChangedCustomerAssignmentsInput
  }

  export type CustomerReassignmentUncheckedCreateInput = {
    id?: string
    customerId: string
    oldBranchId?: string | null
    newBranchId: string
    oldOfficerId?: string | null
    newOfficerId?: string | null
    changedByUserId: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
  }

  export type CustomerReassignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutReassignmentsNestedInput
    oldBranch?: BranchUpdateOneWithoutOldCustomerBranchesNestedInput
    newBranch?: BranchUpdateOneRequiredWithoutNewCustomerBranchesNestedInput
    oldOfficer?: UserUpdateOneWithoutOldCustomerAssignmentsNestedInput
    newOfficer?: UserUpdateOneWithoutNewCustomerAssignmentsNestedInput
    changedBy?: UserUpdateOneRequiredWithoutChangedCustomerAssignmentsNestedInput
  }

  export type CustomerReassignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerReassignmentCreateManyInput = {
    id?: string
    customerId: string
    oldBranchId?: string | null
    newBranchId: string
    oldOfficerId?: string | null
    newOfficerId?: string | null
    changedByUserId: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
  }

  export type CustomerReassignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerReassignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentTypeCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    customerDocs?: CustomerDocumentCreateNestedManyWithoutDocumentTypeInput
    loanDocs?: LoanDocumentCreateNestedManyWithoutDocumentTypeInput
  }

  export type DocumentTypeUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    customerDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutDocumentTypeInput
    loanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutDocumentTypeInput
  }

  export type DocumentTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customerDocs?: CustomerDocumentUpdateManyWithoutDocumentTypeNestedInput
    loanDocs?: LoanDocumentUpdateManyWithoutDocumentTypeNestedInput
  }

  export type DocumentTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customerDocs?: CustomerDocumentUncheckedUpdateManyWithoutDocumentTypeNestedInput
    loanDocs?: LoanDocumentUncheckedUpdateManyWithoutDocumentTypeNestedInput
  }

  export type DocumentTypeCreateManyInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type DocumentTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DocumentTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CustomerDocumentCreateInput = {
    id?: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
    customer: CustomerCreateNestedOneWithoutDocumentsInput
    documentType: DocumentTypeCreateNestedOneWithoutCustomerDocsInput
    uploadedBy: UserCreateNestedOneWithoutUploadedCustDocsInput
  }

  export type CustomerDocumentUncheckedCreateInput = {
    id?: string
    customerId: string
    documentTypeId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedByUserId: string
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type CustomerDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneRequiredWithoutDocumentsNestedInput
    documentType?: DocumentTypeUpdateOneRequiredWithoutCustomerDocsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedCustDocsNestedInput
  }

  export type CustomerDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedByUserId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CustomerDocumentCreateManyInput = {
    id?: string
    customerId: string
    documentTypeId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedByUserId: string
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type CustomerDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CustomerDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedByUserId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanDocumentCreateInput = {
    id?: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
    loan: LoanCreateNestedOneWithoutDocumentsInput
    documentType: DocumentTypeCreateNestedOneWithoutLoanDocsInput
    uploadedBy: UserCreateNestedOneWithoutUploadedLoanDocsInput
  }

  export type LoanDocumentUncheckedCreateInput = {
    id?: string
    loanId: string
    documentTypeId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedByUserId: string
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loan?: LoanUpdateOneRequiredWithoutDocumentsNestedInput
    documentType?: DocumentTypeUpdateOneRequiredWithoutLoanDocsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedLoanDocsNestedInput
  }

  export type LoanDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedByUserId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanDocumentCreateManyInput = {
    id?: string
    loanId: string
    documentTypeId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedByUserId: string
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedByUserId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StaffSessionCreateInput = {
    id?: string
    jwtId: string
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    revokedAt?: Date | string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type StaffSessionUncheckedCreateInput = {
    id?: string
    userId: string
    jwtId: string
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    revokedAt?: Date | string | null
  }

  export type StaffSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jwtId?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type StaffSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    jwtId?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StaffSessionCreateManyInput = {
    id?: string
    userId: string
    jwtId: string
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    revokedAt?: Date | string | null
  }

  export type StaffSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jwtId?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StaffSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    jwtId?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    entityName: string
    entityId: string
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    actor?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    actorUserId?: string | null
    action: string
    entityName: string
    entityId: string
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actor?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    actorUserId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    actorUserId?: string | null
    action: string
    entityName: string
    entityId: string
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    actorUserId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type CustomerListRelationFilter = {
    every?: CustomerWhereInput
    some?: CustomerWhereInput
    none?: CustomerWhereInput
  }

  export type LoanListRelationFilter = {
    every?: LoanWhereInput
    some?: LoanWhereInput
    none?: LoanWhereInput
  }

  export type LoanAssignmentHistoryListRelationFilter = {
    every?: LoanAssignmentHistoryWhereInput
    some?: LoanAssignmentHistoryWhereInput
    none?: LoanAssignmentHistoryWhereInput
  }

  export type CustomerReassignmentListRelationFilter = {
    every?: CustomerReassignmentWhereInput
    some?: CustomerReassignmentWhereInput
    none?: CustomerReassignmentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LoanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LoanAssignmentHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerReassignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BranchCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    managerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type BranchMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    managerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type BranchMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    managerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BranchNullableScalarRelationFilter = {
    is?: BranchWhereInput | null
    isNot?: BranchWhereInput | null
  }

  export type RepaymentListRelationFilter = {
    every?: RepaymentWhereInput
    some?: RepaymentWhereInput
    none?: RepaymentWhereInput
  }

  export type StaffSessionListRelationFilter = {
    every?: StaffSessionWhereInput
    some?: StaffSessionWhereInput
    none?: StaffSessionWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type CustomerDocumentListRelationFilter = {
    every?: CustomerDocumentWhereInput
    some?: CustomerDocumentWhereInput
    none?: CustomerDocumentWhereInput
  }

  export type LoanDocumentListRelationFilter = {
    every?: LoanDocumentWhereInput
    some?: LoanDocumentWhereInput
    none?: LoanDocumentWhereInput
  }

  export type RepaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LoanDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    branchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    branchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    branchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BranchScalarRelationFilter = {
    is?: BranchWhereInput
    isNot?: BranchWhereInput
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
    branchId?: SortOrder
    currentOfficerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
    branchId?: SortOrder
    currentOfficerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
    branchId?: SortOrder
    currentOfficerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type LoanTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LoanTypeAvgOrderByAggregateInput = {
    minAmount?: SortOrder
    maxAmount?: SortOrder
  }

  export type LoanTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LoanTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LoanTypeSumOrderByAggregateInput = {
    minAmount?: SortOrder
    maxAmount?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumTermUnitFilter<$PrismaModel = never> = {
    equals?: $Enums.TermUnit | EnumTermUnitFieldRefInput<$PrismaModel>
    in?: $Enums.TermUnit[] | ListEnumTermUnitFieldRefInput<$PrismaModel>
    notIn?: $Enums.TermUnit[] | ListEnumTermUnitFieldRefInput<$PrismaModel>
    not?: NestedEnumTermUnitFilter<$PrismaModel> | $Enums.TermUnit
  }

  export type EnumLoanStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LoanStatus | EnumLoanStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LoanStatus[] | ListEnumLoanStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LoanStatus[] | ListEnumLoanStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLoanStatusFilter<$PrismaModel> | $Enums.LoanStatus
  }

  export type CustomerScalarRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type LoanTypeNullableScalarRelationFilter = {
    is?: LoanTypeWhereInput | null
    isNot?: LoanTypeWhereInput | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RepaymentScheduleItemListRelationFilter = {
    every?: RepaymentScheduleItemWhereInput
    some?: RepaymentScheduleItemWhereInput
    none?: RepaymentScheduleItemWhereInput
  }

  export type RepaymentScheduleItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LoanCountOrderByAggregateInput = {
    id?: SortOrder
    loanNumber?: SortOrder
    customerId?: SortOrder
    branchId?: SortOrder
    loanTypeId?: SortOrder
    principalAmount?: SortOrder
    currencyCode?: SortOrder
    termCount?: SortOrder
    termUnit?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    processingFeeAmount?: SortOrder
    processingFeeCollected?: SortOrder
    penaltyFeePerDayAmount?: SortOrder
    status?: SortOrder
    createdByUserId?: SortOrder
    assignedOfficerId?: SortOrder
    disbursedAt?: SortOrder
    closedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LoanAvgOrderByAggregateInput = {
    principalAmount?: SortOrder
    termCount?: SortOrder
    processingFeeAmount?: SortOrder
    penaltyFeePerDayAmount?: SortOrder
  }

  export type LoanMaxOrderByAggregateInput = {
    id?: SortOrder
    loanNumber?: SortOrder
    customerId?: SortOrder
    branchId?: SortOrder
    loanTypeId?: SortOrder
    principalAmount?: SortOrder
    currencyCode?: SortOrder
    termCount?: SortOrder
    termUnit?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    processingFeeAmount?: SortOrder
    processingFeeCollected?: SortOrder
    penaltyFeePerDayAmount?: SortOrder
    status?: SortOrder
    createdByUserId?: SortOrder
    assignedOfficerId?: SortOrder
    disbursedAt?: SortOrder
    closedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LoanMinOrderByAggregateInput = {
    id?: SortOrder
    loanNumber?: SortOrder
    customerId?: SortOrder
    branchId?: SortOrder
    loanTypeId?: SortOrder
    principalAmount?: SortOrder
    currencyCode?: SortOrder
    termCount?: SortOrder
    termUnit?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    processingFeeAmount?: SortOrder
    processingFeeCollected?: SortOrder
    penaltyFeePerDayAmount?: SortOrder
    status?: SortOrder
    createdByUserId?: SortOrder
    assignedOfficerId?: SortOrder
    disbursedAt?: SortOrder
    closedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LoanSumOrderByAggregateInput = {
    principalAmount?: SortOrder
    termCount?: SortOrder
    processingFeeAmount?: SortOrder
    penaltyFeePerDayAmount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumTermUnitWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TermUnit | EnumTermUnitFieldRefInput<$PrismaModel>
    in?: $Enums.TermUnit[] | ListEnumTermUnitFieldRefInput<$PrismaModel>
    notIn?: $Enums.TermUnit[] | ListEnumTermUnitFieldRefInput<$PrismaModel>
    not?: NestedEnumTermUnitWithAggregatesFilter<$PrismaModel> | $Enums.TermUnit
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTermUnitFilter<$PrismaModel>
    _max?: NestedEnumTermUnitFilter<$PrismaModel>
  }

  export type EnumLoanStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LoanStatus | EnumLoanStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LoanStatus[] | ListEnumLoanStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LoanStatus[] | ListEnumLoanStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLoanStatusWithAggregatesFilter<$PrismaModel> | $Enums.LoanStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLoanStatusFilter<$PrismaModel>
    _max?: NestedEnumLoanStatusFilter<$PrismaModel>
  }

  export type EnumScheduleStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ScheduleStatus | EnumScheduleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ScheduleStatus[] | ListEnumScheduleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScheduleStatus[] | ListEnumScheduleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumScheduleStatusFilter<$PrismaModel> | $Enums.ScheduleStatus
  }

  export type LoanScalarRelationFilter = {
    is?: LoanWhereInput
    isNot?: LoanWhereInput
  }

  export type RepaymentAllocationListRelationFilter = {
    every?: RepaymentAllocationWhereInput
    some?: RepaymentAllocationWhereInput
    none?: RepaymentAllocationWhereInput
  }

  export type RepaymentAllocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RepaymentScheduleItemLoanIdSequenceCompoundUniqueInput = {
    loanId: string
    sequence: number
  }

  export type RepaymentScheduleItemCountOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    sequence?: SortOrder
    dueDate?: SortOrder
    principalDue?: SortOrder
    interestDue?: SortOrder
    feeDue?: SortOrder
    totalDue?: SortOrder
    paidAmount?: SortOrder
    status?: SortOrder
    closedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type RepaymentScheduleItemAvgOrderByAggregateInput = {
    sequence?: SortOrder
    principalDue?: SortOrder
    interestDue?: SortOrder
    feeDue?: SortOrder
    totalDue?: SortOrder
    paidAmount?: SortOrder
  }

  export type RepaymentScheduleItemMaxOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    sequence?: SortOrder
    dueDate?: SortOrder
    principalDue?: SortOrder
    interestDue?: SortOrder
    feeDue?: SortOrder
    totalDue?: SortOrder
    paidAmount?: SortOrder
    status?: SortOrder
    closedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type RepaymentScheduleItemMinOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    sequence?: SortOrder
    dueDate?: SortOrder
    principalDue?: SortOrder
    interestDue?: SortOrder
    feeDue?: SortOrder
    totalDue?: SortOrder
    paidAmount?: SortOrder
    status?: SortOrder
    closedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type RepaymentScheduleItemSumOrderByAggregateInput = {
    sequence?: SortOrder
    principalDue?: SortOrder
    interestDue?: SortOrder
    feeDue?: SortOrder
    totalDue?: SortOrder
    paidAmount?: SortOrder
  }

  export type EnumScheduleStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScheduleStatus | EnumScheduleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ScheduleStatus[] | ListEnumScheduleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScheduleStatus[] | ListEnumScheduleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumScheduleStatusWithAggregatesFilter<$PrismaModel> | $Enums.ScheduleStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScheduleStatusFilter<$PrismaModel>
    _max?: NestedEnumScheduleStatusFilter<$PrismaModel>
  }

  export type EnumRepaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.RepaymentMethod | EnumRepaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.RepaymentMethod[] | ListEnumRepaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.RepaymentMethod[] | ListEnumRepaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumRepaymentMethodFilter<$PrismaModel> | $Enums.RepaymentMethod
  }

  export type RepaymentCountOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    receivedByUserId?: SortOrder
    amount?: SortOrder
    currencyCode?: SortOrder
    paidAt?: SortOrder
    method?: SortOrder
    reference?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type RepaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type RepaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    receivedByUserId?: SortOrder
    amount?: SortOrder
    currencyCode?: SortOrder
    paidAt?: SortOrder
    method?: SortOrder
    reference?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type RepaymentMinOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    receivedByUserId?: SortOrder
    amount?: SortOrder
    currencyCode?: SortOrder
    paidAt?: SortOrder
    method?: SortOrder
    reference?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type RepaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumRepaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RepaymentMethod | EnumRepaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.RepaymentMethod[] | ListEnumRepaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.RepaymentMethod[] | ListEnumRepaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumRepaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.RepaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRepaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumRepaymentMethodFilter<$PrismaModel>
  }

  export type RepaymentScalarRelationFilter = {
    is?: RepaymentWhereInput
    isNot?: RepaymentWhereInput
  }

  export type RepaymentScheduleItemScalarRelationFilter = {
    is?: RepaymentScheduleItemWhereInput
    isNot?: RepaymentScheduleItemWhereInput
  }

  export type RepaymentAllocationRepaymentIdScheduleItemIdCompoundUniqueInput = {
    repaymentId: string
    scheduleItemId: string
  }

  export type RepaymentAllocationCountOrderByAggregateInput = {
    id?: SortOrder
    repaymentId?: SortOrder
    scheduleItemId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
  }

  export type RepaymentAllocationAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type RepaymentAllocationMaxOrderByAggregateInput = {
    id?: SortOrder
    repaymentId?: SortOrder
    scheduleItemId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
  }

  export type RepaymentAllocationMinOrderByAggregateInput = {
    id?: SortOrder
    repaymentId?: SortOrder
    scheduleItemId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
  }

  export type RepaymentAllocationSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type LoanAssignmentHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    oldOfficerId?: SortOrder
    newOfficerId?: SortOrder
    oldBranchId?: SortOrder
    newBranchId?: SortOrder
    changedByUserId?: SortOrder
    reason?: SortOrder
    changedAt?: SortOrder
  }

  export type LoanAssignmentHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    oldOfficerId?: SortOrder
    newOfficerId?: SortOrder
    oldBranchId?: SortOrder
    newBranchId?: SortOrder
    changedByUserId?: SortOrder
    reason?: SortOrder
    changedAt?: SortOrder
  }

  export type LoanAssignmentHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    oldOfficerId?: SortOrder
    newOfficerId?: SortOrder
    oldBranchId?: SortOrder
    newBranchId?: SortOrder
    changedByUserId?: SortOrder
    reason?: SortOrder
    changedAt?: SortOrder
  }

  export type CustomerReassignmentCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    oldBranchId?: SortOrder
    newBranchId?: SortOrder
    oldOfficerId?: SortOrder
    newOfficerId?: SortOrder
    changedByUserId?: SortOrder
    reason?: SortOrder
    previousOfficerEndAt?: SortOrder
    newOfficerStartAt?: SortOrder
    changedAt?: SortOrder
  }

  export type CustomerReassignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    oldBranchId?: SortOrder
    newBranchId?: SortOrder
    oldOfficerId?: SortOrder
    newOfficerId?: SortOrder
    changedByUserId?: SortOrder
    reason?: SortOrder
    previousOfficerEndAt?: SortOrder
    newOfficerStartAt?: SortOrder
    changedAt?: SortOrder
  }

  export type CustomerReassignmentMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    oldBranchId?: SortOrder
    newBranchId?: SortOrder
    oldOfficerId?: SortOrder
    newOfficerId?: SortOrder
    changedByUserId?: SortOrder
    reason?: SortOrder
    previousOfficerEndAt?: SortOrder
    newOfficerStartAt?: SortOrder
    changedAt?: SortOrder
  }

  export type DocumentTypeCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type DocumentTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type DocumentTypeMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type DocumentTypeScalarRelationFilter = {
    is?: DocumentTypeWhereInput
    isNot?: DocumentTypeWhereInput
  }

  export type CustomerDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    documentTypeId?: SortOrder
    fileUrl?: SortOrder
    issuingAuthority?: SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrder
    verified?: SortOrder
    verificationNotes?: SortOrder
    uploadedByUserId?: SortOrder
    uploadedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CustomerDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    documentTypeId?: SortOrder
    fileUrl?: SortOrder
    issuingAuthority?: SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrder
    verified?: SortOrder
    verificationNotes?: SortOrder
    uploadedByUserId?: SortOrder
    uploadedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CustomerDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    documentTypeId?: SortOrder
    fileUrl?: SortOrder
    issuingAuthority?: SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrder
    verified?: SortOrder
    verificationNotes?: SortOrder
    uploadedByUserId?: SortOrder
    uploadedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LoanDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    documentTypeId?: SortOrder
    fileUrl?: SortOrder
    issuingAuthority?: SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrder
    verified?: SortOrder
    verificationNotes?: SortOrder
    uploadedByUserId?: SortOrder
    uploadedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LoanDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    documentTypeId?: SortOrder
    fileUrl?: SortOrder
    issuingAuthority?: SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrder
    verified?: SortOrder
    verificationNotes?: SortOrder
    uploadedByUserId?: SortOrder
    uploadedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LoanDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    documentTypeId?: SortOrder
    fileUrl?: SortOrder
    issuingAuthority?: SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrder
    verified?: SortOrder
    verificationNotes?: SortOrder
    uploadedByUserId?: SortOrder
    uploadedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type StaffSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jwtId?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revokedAt?: SortOrder
  }

  export type StaffSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jwtId?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revokedAt?: SortOrder
  }

  export type StaffSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jwtId?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revokedAt?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    actorUserId?: SortOrder
    action?: SortOrder
    entityName?: SortOrder
    entityId?: SortOrder
    before?: SortOrder
    after?: SortOrder
    metadata?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    actorUserId?: SortOrder
    action?: SortOrder
    entityName?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    actorUserId?: SortOrder
    action?: SortOrder
    entityName?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type UserCreateNestedOneWithoutManagedBranchInput = {
    create?: XOR<UserCreateWithoutManagedBranchInput, UserUncheckedCreateWithoutManagedBranchInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagedBranchInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutBranchInput = {
    create?: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput> | UserCreateWithoutBranchInput[] | UserUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBranchInput | UserCreateOrConnectWithoutBranchInput[]
    createMany?: UserCreateManyBranchInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CustomerCreateNestedManyWithoutBranchInput = {
    create?: XOR<CustomerCreateWithoutBranchInput, CustomerUncheckedCreateWithoutBranchInput> | CustomerCreateWithoutBranchInput[] | CustomerUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutBranchInput | CustomerCreateOrConnectWithoutBranchInput[]
    createMany?: CustomerCreateManyBranchInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type LoanCreateNestedManyWithoutBranchInput = {
    create?: XOR<LoanCreateWithoutBranchInput, LoanUncheckedCreateWithoutBranchInput> | LoanCreateWithoutBranchInput[] | LoanUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutBranchInput | LoanCreateOrConnectWithoutBranchInput[]
    createMany?: LoanCreateManyBranchInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type LoanAssignmentHistoryCreateNestedManyWithoutOldBranchInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutOldBranchInput, LoanAssignmentHistoryUncheckedCreateWithoutOldBranchInput> | LoanAssignmentHistoryCreateWithoutOldBranchInput[] | LoanAssignmentHistoryUncheckedCreateWithoutOldBranchInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutOldBranchInput | LoanAssignmentHistoryCreateOrConnectWithoutOldBranchInput[]
    createMany?: LoanAssignmentHistoryCreateManyOldBranchInputEnvelope
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
  }

  export type LoanAssignmentHistoryCreateNestedManyWithoutNewBranchInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutNewBranchInput, LoanAssignmentHistoryUncheckedCreateWithoutNewBranchInput> | LoanAssignmentHistoryCreateWithoutNewBranchInput[] | LoanAssignmentHistoryUncheckedCreateWithoutNewBranchInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutNewBranchInput | LoanAssignmentHistoryCreateOrConnectWithoutNewBranchInput[]
    createMany?: LoanAssignmentHistoryCreateManyNewBranchInputEnvelope
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
  }

  export type CustomerReassignmentCreateNestedManyWithoutOldBranchInput = {
    create?: XOR<CustomerReassignmentCreateWithoutOldBranchInput, CustomerReassignmentUncheckedCreateWithoutOldBranchInput> | CustomerReassignmentCreateWithoutOldBranchInput[] | CustomerReassignmentUncheckedCreateWithoutOldBranchInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutOldBranchInput | CustomerReassignmentCreateOrConnectWithoutOldBranchInput[]
    createMany?: CustomerReassignmentCreateManyOldBranchInputEnvelope
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
  }

  export type CustomerReassignmentCreateNestedManyWithoutNewBranchInput = {
    create?: XOR<CustomerReassignmentCreateWithoutNewBranchInput, CustomerReassignmentUncheckedCreateWithoutNewBranchInput> | CustomerReassignmentCreateWithoutNewBranchInput[] | CustomerReassignmentUncheckedCreateWithoutNewBranchInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutNewBranchInput | CustomerReassignmentCreateOrConnectWithoutNewBranchInput[]
    createMany?: CustomerReassignmentCreateManyNewBranchInputEnvelope
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput> | UserCreateWithoutBranchInput[] | UserUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBranchInput | UserCreateOrConnectWithoutBranchInput[]
    createMany?: UserCreateManyBranchInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CustomerUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<CustomerCreateWithoutBranchInput, CustomerUncheckedCreateWithoutBranchInput> | CustomerCreateWithoutBranchInput[] | CustomerUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutBranchInput | CustomerCreateOrConnectWithoutBranchInput[]
    createMany?: CustomerCreateManyBranchInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type LoanUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<LoanCreateWithoutBranchInput, LoanUncheckedCreateWithoutBranchInput> | LoanCreateWithoutBranchInput[] | LoanUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutBranchInput | LoanCreateOrConnectWithoutBranchInput[]
    createMany?: LoanCreateManyBranchInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldBranchInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutOldBranchInput, LoanAssignmentHistoryUncheckedCreateWithoutOldBranchInput> | LoanAssignmentHistoryCreateWithoutOldBranchInput[] | LoanAssignmentHistoryUncheckedCreateWithoutOldBranchInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutOldBranchInput | LoanAssignmentHistoryCreateOrConnectWithoutOldBranchInput[]
    createMany?: LoanAssignmentHistoryCreateManyOldBranchInputEnvelope
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
  }

  export type LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewBranchInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutNewBranchInput, LoanAssignmentHistoryUncheckedCreateWithoutNewBranchInput> | LoanAssignmentHistoryCreateWithoutNewBranchInput[] | LoanAssignmentHistoryUncheckedCreateWithoutNewBranchInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutNewBranchInput | LoanAssignmentHistoryCreateOrConnectWithoutNewBranchInput[]
    createMany?: LoanAssignmentHistoryCreateManyNewBranchInputEnvelope
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
  }

  export type CustomerReassignmentUncheckedCreateNestedManyWithoutOldBranchInput = {
    create?: XOR<CustomerReassignmentCreateWithoutOldBranchInput, CustomerReassignmentUncheckedCreateWithoutOldBranchInput> | CustomerReassignmentCreateWithoutOldBranchInput[] | CustomerReassignmentUncheckedCreateWithoutOldBranchInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutOldBranchInput | CustomerReassignmentCreateOrConnectWithoutOldBranchInput[]
    createMany?: CustomerReassignmentCreateManyOldBranchInputEnvelope
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
  }

  export type CustomerReassignmentUncheckedCreateNestedManyWithoutNewBranchInput = {
    create?: XOR<CustomerReassignmentCreateWithoutNewBranchInput, CustomerReassignmentUncheckedCreateWithoutNewBranchInput> | CustomerReassignmentCreateWithoutNewBranchInput[] | CustomerReassignmentUncheckedCreateWithoutNewBranchInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutNewBranchInput | CustomerReassignmentCreateOrConnectWithoutNewBranchInput[]
    createMany?: CustomerReassignmentCreateManyNewBranchInputEnvelope
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneWithoutManagedBranchNestedInput = {
    create?: XOR<UserCreateWithoutManagedBranchInput, UserUncheckedCreateWithoutManagedBranchInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagedBranchInput
    upsert?: UserUpsertWithoutManagedBranchInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutManagedBranchInput, UserUpdateWithoutManagedBranchInput>, UserUncheckedUpdateWithoutManagedBranchInput>
  }

  export type UserUpdateManyWithoutBranchNestedInput = {
    create?: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput> | UserCreateWithoutBranchInput[] | UserUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBranchInput | UserCreateOrConnectWithoutBranchInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutBranchInput | UserUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: UserCreateManyBranchInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutBranchInput | UserUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: UserUpdateManyWithWhereWithoutBranchInput | UserUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CustomerUpdateManyWithoutBranchNestedInput = {
    create?: XOR<CustomerCreateWithoutBranchInput, CustomerUncheckedCreateWithoutBranchInput> | CustomerCreateWithoutBranchInput[] | CustomerUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutBranchInput | CustomerCreateOrConnectWithoutBranchInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutBranchInput | CustomerUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: CustomerCreateManyBranchInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutBranchInput | CustomerUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutBranchInput | CustomerUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type LoanUpdateManyWithoutBranchNestedInput = {
    create?: XOR<LoanCreateWithoutBranchInput, LoanUncheckedCreateWithoutBranchInput> | LoanCreateWithoutBranchInput[] | LoanUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutBranchInput | LoanCreateOrConnectWithoutBranchInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutBranchInput | LoanUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: LoanCreateManyBranchInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutBranchInput | LoanUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutBranchInput | LoanUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type LoanAssignmentHistoryUpdateManyWithoutOldBranchNestedInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutOldBranchInput, LoanAssignmentHistoryUncheckedCreateWithoutOldBranchInput> | LoanAssignmentHistoryCreateWithoutOldBranchInput[] | LoanAssignmentHistoryUncheckedCreateWithoutOldBranchInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutOldBranchInput | LoanAssignmentHistoryCreateOrConnectWithoutOldBranchInput[]
    upsert?: LoanAssignmentHistoryUpsertWithWhereUniqueWithoutOldBranchInput | LoanAssignmentHistoryUpsertWithWhereUniqueWithoutOldBranchInput[]
    createMany?: LoanAssignmentHistoryCreateManyOldBranchInputEnvelope
    set?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    disconnect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    delete?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    update?: LoanAssignmentHistoryUpdateWithWhereUniqueWithoutOldBranchInput | LoanAssignmentHistoryUpdateWithWhereUniqueWithoutOldBranchInput[]
    updateMany?: LoanAssignmentHistoryUpdateManyWithWhereWithoutOldBranchInput | LoanAssignmentHistoryUpdateManyWithWhereWithoutOldBranchInput[]
    deleteMany?: LoanAssignmentHistoryScalarWhereInput | LoanAssignmentHistoryScalarWhereInput[]
  }

  export type LoanAssignmentHistoryUpdateManyWithoutNewBranchNestedInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutNewBranchInput, LoanAssignmentHistoryUncheckedCreateWithoutNewBranchInput> | LoanAssignmentHistoryCreateWithoutNewBranchInput[] | LoanAssignmentHistoryUncheckedCreateWithoutNewBranchInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutNewBranchInput | LoanAssignmentHistoryCreateOrConnectWithoutNewBranchInput[]
    upsert?: LoanAssignmentHistoryUpsertWithWhereUniqueWithoutNewBranchInput | LoanAssignmentHistoryUpsertWithWhereUniqueWithoutNewBranchInput[]
    createMany?: LoanAssignmentHistoryCreateManyNewBranchInputEnvelope
    set?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    disconnect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    delete?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    update?: LoanAssignmentHistoryUpdateWithWhereUniqueWithoutNewBranchInput | LoanAssignmentHistoryUpdateWithWhereUniqueWithoutNewBranchInput[]
    updateMany?: LoanAssignmentHistoryUpdateManyWithWhereWithoutNewBranchInput | LoanAssignmentHistoryUpdateManyWithWhereWithoutNewBranchInput[]
    deleteMany?: LoanAssignmentHistoryScalarWhereInput | LoanAssignmentHistoryScalarWhereInput[]
  }

  export type CustomerReassignmentUpdateManyWithoutOldBranchNestedInput = {
    create?: XOR<CustomerReassignmentCreateWithoutOldBranchInput, CustomerReassignmentUncheckedCreateWithoutOldBranchInput> | CustomerReassignmentCreateWithoutOldBranchInput[] | CustomerReassignmentUncheckedCreateWithoutOldBranchInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutOldBranchInput | CustomerReassignmentCreateOrConnectWithoutOldBranchInput[]
    upsert?: CustomerReassignmentUpsertWithWhereUniqueWithoutOldBranchInput | CustomerReassignmentUpsertWithWhereUniqueWithoutOldBranchInput[]
    createMany?: CustomerReassignmentCreateManyOldBranchInputEnvelope
    set?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    disconnect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    delete?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    update?: CustomerReassignmentUpdateWithWhereUniqueWithoutOldBranchInput | CustomerReassignmentUpdateWithWhereUniqueWithoutOldBranchInput[]
    updateMany?: CustomerReassignmentUpdateManyWithWhereWithoutOldBranchInput | CustomerReassignmentUpdateManyWithWhereWithoutOldBranchInput[]
    deleteMany?: CustomerReassignmentScalarWhereInput | CustomerReassignmentScalarWhereInput[]
  }

  export type CustomerReassignmentUpdateManyWithoutNewBranchNestedInput = {
    create?: XOR<CustomerReassignmentCreateWithoutNewBranchInput, CustomerReassignmentUncheckedCreateWithoutNewBranchInput> | CustomerReassignmentCreateWithoutNewBranchInput[] | CustomerReassignmentUncheckedCreateWithoutNewBranchInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutNewBranchInput | CustomerReassignmentCreateOrConnectWithoutNewBranchInput[]
    upsert?: CustomerReassignmentUpsertWithWhereUniqueWithoutNewBranchInput | CustomerReassignmentUpsertWithWhereUniqueWithoutNewBranchInput[]
    createMany?: CustomerReassignmentCreateManyNewBranchInputEnvelope
    set?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    disconnect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    delete?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    update?: CustomerReassignmentUpdateWithWhereUniqueWithoutNewBranchInput | CustomerReassignmentUpdateWithWhereUniqueWithoutNewBranchInput[]
    updateMany?: CustomerReassignmentUpdateManyWithWhereWithoutNewBranchInput | CustomerReassignmentUpdateManyWithWhereWithoutNewBranchInput[]
    deleteMany?: CustomerReassignmentScalarWhereInput | CustomerReassignmentScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput> | UserCreateWithoutBranchInput[] | UserUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBranchInput | UserCreateOrConnectWithoutBranchInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutBranchInput | UserUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: UserCreateManyBranchInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutBranchInput | UserUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: UserUpdateManyWithWhereWithoutBranchInput | UserUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CustomerUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<CustomerCreateWithoutBranchInput, CustomerUncheckedCreateWithoutBranchInput> | CustomerCreateWithoutBranchInput[] | CustomerUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutBranchInput | CustomerCreateOrConnectWithoutBranchInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutBranchInput | CustomerUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: CustomerCreateManyBranchInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutBranchInput | CustomerUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutBranchInput | CustomerUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type LoanUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<LoanCreateWithoutBranchInput, LoanUncheckedCreateWithoutBranchInput> | LoanCreateWithoutBranchInput[] | LoanUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutBranchInput | LoanCreateOrConnectWithoutBranchInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutBranchInput | LoanUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: LoanCreateManyBranchInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutBranchInput | LoanUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutBranchInput | LoanUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type LoanAssignmentHistoryUncheckedUpdateManyWithoutOldBranchNestedInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutOldBranchInput, LoanAssignmentHistoryUncheckedCreateWithoutOldBranchInput> | LoanAssignmentHistoryCreateWithoutOldBranchInput[] | LoanAssignmentHistoryUncheckedCreateWithoutOldBranchInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutOldBranchInput | LoanAssignmentHistoryCreateOrConnectWithoutOldBranchInput[]
    upsert?: LoanAssignmentHistoryUpsertWithWhereUniqueWithoutOldBranchInput | LoanAssignmentHistoryUpsertWithWhereUniqueWithoutOldBranchInput[]
    createMany?: LoanAssignmentHistoryCreateManyOldBranchInputEnvelope
    set?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    disconnect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    delete?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    update?: LoanAssignmentHistoryUpdateWithWhereUniqueWithoutOldBranchInput | LoanAssignmentHistoryUpdateWithWhereUniqueWithoutOldBranchInput[]
    updateMany?: LoanAssignmentHistoryUpdateManyWithWhereWithoutOldBranchInput | LoanAssignmentHistoryUpdateManyWithWhereWithoutOldBranchInput[]
    deleteMany?: LoanAssignmentHistoryScalarWhereInput | LoanAssignmentHistoryScalarWhereInput[]
  }

  export type LoanAssignmentHistoryUncheckedUpdateManyWithoutNewBranchNestedInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutNewBranchInput, LoanAssignmentHistoryUncheckedCreateWithoutNewBranchInput> | LoanAssignmentHistoryCreateWithoutNewBranchInput[] | LoanAssignmentHistoryUncheckedCreateWithoutNewBranchInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutNewBranchInput | LoanAssignmentHistoryCreateOrConnectWithoutNewBranchInput[]
    upsert?: LoanAssignmentHistoryUpsertWithWhereUniqueWithoutNewBranchInput | LoanAssignmentHistoryUpsertWithWhereUniqueWithoutNewBranchInput[]
    createMany?: LoanAssignmentHistoryCreateManyNewBranchInputEnvelope
    set?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    disconnect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    delete?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    update?: LoanAssignmentHistoryUpdateWithWhereUniqueWithoutNewBranchInput | LoanAssignmentHistoryUpdateWithWhereUniqueWithoutNewBranchInput[]
    updateMany?: LoanAssignmentHistoryUpdateManyWithWhereWithoutNewBranchInput | LoanAssignmentHistoryUpdateManyWithWhereWithoutNewBranchInput[]
    deleteMany?: LoanAssignmentHistoryScalarWhereInput | LoanAssignmentHistoryScalarWhereInput[]
  }

  export type CustomerReassignmentUncheckedUpdateManyWithoutOldBranchNestedInput = {
    create?: XOR<CustomerReassignmentCreateWithoutOldBranchInput, CustomerReassignmentUncheckedCreateWithoutOldBranchInput> | CustomerReassignmentCreateWithoutOldBranchInput[] | CustomerReassignmentUncheckedCreateWithoutOldBranchInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutOldBranchInput | CustomerReassignmentCreateOrConnectWithoutOldBranchInput[]
    upsert?: CustomerReassignmentUpsertWithWhereUniqueWithoutOldBranchInput | CustomerReassignmentUpsertWithWhereUniqueWithoutOldBranchInput[]
    createMany?: CustomerReassignmentCreateManyOldBranchInputEnvelope
    set?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    disconnect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    delete?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    update?: CustomerReassignmentUpdateWithWhereUniqueWithoutOldBranchInput | CustomerReassignmentUpdateWithWhereUniqueWithoutOldBranchInput[]
    updateMany?: CustomerReassignmentUpdateManyWithWhereWithoutOldBranchInput | CustomerReassignmentUpdateManyWithWhereWithoutOldBranchInput[]
    deleteMany?: CustomerReassignmentScalarWhereInput | CustomerReassignmentScalarWhereInput[]
  }

  export type CustomerReassignmentUncheckedUpdateManyWithoutNewBranchNestedInput = {
    create?: XOR<CustomerReassignmentCreateWithoutNewBranchInput, CustomerReassignmentUncheckedCreateWithoutNewBranchInput> | CustomerReassignmentCreateWithoutNewBranchInput[] | CustomerReassignmentUncheckedCreateWithoutNewBranchInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutNewBranchInput | CustomerReassignmentCreateOrConnectWithoutNewBranchInput[]
    upsert?: CustomerReassignmentUpsertWithWhereUniqueWithoutNewBranchInput | CustomerReassignmentUpsertWithWhereUniqueWithoutNewBranchInput[]
    createMany?: CustomerReassignmentCreateManyNewBranchInputEnvelope
    set?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    disconnect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    delete?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    update?: CustomerReassignmentUpdateWithWhereUniqueWithoutNewBranchInput | CustomerReassignmentUpdateWithWhereUniqueWithoutNewBranchInput[]
    updateMany?: CustomerReassignmentUpdateManyWithWhereWithoutNewBranchInput | CustomerReassignmentUpdateManyWithWhereWithoutNewBranchInput[]
    deleteMany?: CustomerReassignmentScalarWhereInput | CustomerReassignmentScalarWhereInput[]
  }

  export type BranchCreateNestedOneWithoutUsersInput = {
    create?: XOR<BranchCreateWithoutUsersInput, BranchUncheckedCreateWithoutUsersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutUsersInput
    connect?: BranchWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutManagerInput = {
    create?: XOR<BranchCreateWithoutManagerInput, BranchUncheckedCreateWithoutManagerInput>
    connectOrCreate?: BranchCreateOrConnectWithoutManagerInput
    connect?: BranchWhereUniqueInput
  }

  export type LoanCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<LoanCreateWithoutCreatedByInput, LoanUncheckedCreateWithoutCreatedByInput> | LoanCreateWithoutCreatedByInput[] | LoanUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutCreatedByInput | LoanCreateOrConnectWithoutCreatedByInput[]
    createMany?: LoanCreateManyCreatedByInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type LoanCreateNestedManyWithoutAssignedOfficerInput = {
    create?: XOR<LoanCreateWithoutAssignedOfficerInput, LoanUncheckedCreateWithoutAssignedOfficerInput> | LoanCreateWithoutAssignedOfficerInput[] | LoanUncheckedCreateWithoutAssignedOfficerInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutAssignedOfficerInput | LoanCreateOrConnectWithoutAssignedOfficerInput[]
    createMany?: LoanCreateManyAssignedOfficerInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type CustomerCreateNestedManyWithoutCurrentOfficerInput = {
    create?: XOR<CustomerCreateWithoutCurrentOfficerInput, CustomerUncheckedCreateWithoutCurrentOfficerInput> | CustomerCreateWithoutCurrentOfficerInput[] | CustomerUncheckedCreateWithoutCurrentOfficerInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutCurrentOfficerInput | CustomerCreateOrConnectWithoutCurrentOfficerInput[]
    createMany?: CustomerCreateManyCurrentOfficerInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type RepaymentCreateNestedManyWithoutReceivedByInput = {
    create?: XOR<RepaymentCreateWithoutReceivedByInput, RepaymentUncheckedCreateWithoutReceivedByInput> | RepaymentCreateWithoutReceivedByInput[] | RepaymentUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: RepaymentCreateOrConnectWithoutReceivedByInput | RepaymentCreateOrConnectWithoutReceivedByInput[]
    createMany?: RepaymentCreateManyReceivedByInputEnvelope
    connect?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
  }

  export type StaffSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<StaffSessionCreateWithoutUserInput, StaffSessionUncheckedCreateWithoutUserInput> | StaffSessionCreateWithoutUserInput[] | StaffSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StaffSessionCreateOrConnectWithoutUserInput | StaffSessionCreateOrConnectWithoutUserInput[]
    createMany?: StaffSessionCreateManyUserInputEnvelope
    connect?: StaffSessionWhereUniqueInput | StaffSessionWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutActorInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type CustomerDocumentCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<CustomerDocumentCreateWithoutUploadedByInput, CustomerDocumentUncheckedCreateWithoutUploadedByInput> | CustomerDocumentCreateWithoutUploadedByInput[] | CustomerDocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: CustomerDocumentCreateOrConnectWithoutUploadedByInput | CustomerDocumentCreateOrConnectWithoutUploadedByInput[]
    createMany?: CustomerDocumentCreateManyUploadedByInputEnvelope
    connect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
  }

  export type LoanDocumentCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<LoanDocumentCreateWithoutUploadedByInput, LoanDocumentUncheckedCreateWithoutUploadedByInput> | LoanDocumentCreateWithoutUploadedByInput[] | LoanDocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: LoanDocumentCreateOrConnectWithoutUploadedByInput | LoanDocumentCreateOrConnectWithoutUploadedByInput[]
    createMany?: LoanDocumentCreateManyUploadedByInputEnvelope
    connect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
  }

  export type LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutOldOfficerInput, LoanAssignmentHistoryUncheckedCreateWithoutOldOfficerInput> | LoanAssignmentHistoryCreateWithoutOldOfficerInput[] | LoanAssignmentHistoryUncheckedCreateWithoutOldOfficerInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutOldOfficerInput | LoanAssignmentHistoryCreateOrConnectWithoutOldOfficerInput[]
    createMany?: LoanAssignmentHistoryCreateManyOldOfficerInputEnvelope
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
  }

  export type LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutNewOfficerInput, LoanAssignmentHistoryUncheckedCreateWithoutNewOfficerInput> | LoanAssignmentHistoryCreateWithoutNewOfficerInput[] | LoanAssignmentHistoryUncheckedCreateWithoutNewOfficerInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutNewOfficerInput | LoanAssignmentHistoryCreateOrConnectWithoutNewOfficerInput[]
    createMany?: LoanAssignmentHistoryCreateManyNewOfficerInputEnvelope
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
  }

  export type LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutChangedByInput, LoanAssignmentHistoryUncheckedCreateWithoutChangedByInput> | LoanAssignmentHistoryCreateWithoutChangedByInput[] | LoanAssignmentHistoryUncheckedCreateWithoutChangedByInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutChangedByInput | LoanAssignmentHistoryCreateOrConnectWithoutChangedByInput[]
    createMany?: LoanAssignmentHistoryCreateManyChangedByInputEnvelope
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
  }

  export type CustomerReassignmentCreateNestedManyWithoutOldOfficerInput = {
    create?: XOR<CustomerReassignmentCreateWithoutOldOfficerInput, CustomerReassignmentUncheckedCreateWithoutOldOfficerInput> | CustomerReassignmentCreateWithoutOldOfficerInput[] | CustomerReassignmentUncheckedCreateWithoutOldOfficerInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutOldOfficerInput | CustomerReassignmentCreateOrConnectWithoutOldOfficerInput[]
    createMany?: CustomerReassignmentCreateManyOldOfficerInputEnvelope
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
  }

  export type CustomerReassignmentCreateNestedManyWithoutNewOfficerInput = {
    create?: XOR<CustomerReassignmentCreateWithoutNewOfficerInput, CustomerReassignmentUncheckedCreateWithoutNewOfficerInput> | CustomerReassignmentCreateWithoutNewOfficerInput[] | CustomerReassignmentUncheckedCreateWithoutNewOfficerInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutNewOfficerInput | CustomerReassignmentCreateOrConnectWithoutNewOfficerInput[]
    createMany?: CustomerReassignmentCreateManyNewOfficerInputEnvelope
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
  }

  export type CustomerReassignmentCreateNestedManyWithoutChangedByInput = {
    create?: XOR<CustomerReassignmentCreateWithoutChangedByInput, CustomerReassignmentUncheckedCreateWithoutChangedByInput> | CustomerReassignmentCreateWithoutChangedByInput[] | CustomerReassignmentUncheckedCreateWithoutChangedByInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutChangedByInput | CustomerReassignmentCreateOrConnectWithoutChangedByInput[]
    createMany?: CustomerReassignmentCreateManyChangedByInputEnvelope
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
  }

  export type BranchUncheckedCreateNestedOneWithoutManagerInput = {
    create?: XOR<BranchCreateWithoutManagerInput, BranchUncheckedCreateWithoutManagerInput>
    connectOrCreate?: BranchCreateOrConnectWithoutManagerInput
    connect?: BranchWhereUniqueInput
  }

  export type LoanUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<LoanCreateWithoutCreatedByInput, LoanUncheckedCreateWithoutCreatedByInput> | LoanCreateWithoutCreatedByInput[] | LoanUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutCreatedByInput | LoanCreateOrConnectWithoutCreatedByInput[]
    createMany?: LoanCreateManyCreatedByInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput = {
    create?: XOR<LoanCreateWithoutAssignedOfficerInput, LoanUncheckedCreateWithoutAssignedOfficerInput> | LoanCreateWithoutAssignedOfficerInput[] | LoanUncheckedCreateWithoutAssignedOfficerInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutAssignedOfficerInput | LoanCreateOrConnectWithoutAssignedOfficerInput[]
    createMany?: LoanCreateManyAssignedOfficerInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput = {
    create?: XOR<CustomerCreateWithoutCurrentOfficerInput, CustomerUncheckedCreateWithoutCurrentOfficerInput> | CustomerCreateWithoutCurrentOfficerInput[] | CustomerUncheckedCreateWithoutCurrentOfficerInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutCurrentOfficerInput | CustomerCreateOrConnectWithoutCurrentOfficerInput[]
    createMany?: CustomerCreateManyCurrentOfficerInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type RepaymentUncheckedCreateNestedManyWithoutReceivedByInput = {
    create?: XOR<RepaymentCreateWithoutReceivedByInput, RepaymentUncheckedCreateWithoutReceivedByInput> | RepaymentCreateWithoutReceivedByInput[] | RepaymentUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: RepaymentCreateOrConnectWithoutReceivedByInput | RepaymentCreateOrConnectWithoutReceivedByInput[]
    createMany?: RepaymentCreateManyReceivedByInputEnvelope
    connect?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
  }

  export type StaffSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StaffSessionCreateWithoutUserInput, StaffSessionUncheckedCreateWithoutUserInput> | StaffSessionCreateWithoutUserInput[] | StaffSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StaffSessionCreateOrConnectWithoutUserInput | StaffSessionCreateOrConnectWithoutUserInput[]
    createMany?: StaffSessionCreateManyUserInputEnvelope
    connect?: StaffSessionWhereUniqueInput | StaffSessionWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutActorInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<CustomerDocumentCreateWithoutUploadedByInput, CustomerDocumentUncheckedCreateWithoutUploadedByInput> | CustomerDocumentCreateWithoutUploadedByInput[] | CustomerDocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: CustomerDocumentCreateOrConnectWithoutUploadedByInput | CustomerDocumentCreateOrConnectWithoutUploadedByInput[]
    createMany?: CustomerDocumentCreateManyUploadedByInputEnvelope
    connect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
  }

  export type LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<LoanDocumentCreateWithoutUploadedByInput, LoanDocumentUncheckedCreateWithoutUploadedByInput> | LoanDocumentCreateWithoutUploadedByInput[] | LoanDocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: LoanDocumentCreateOrConnectWithoutUploadedByInput | LoanDocumentCreateOrConnectWithoutUploadedByInput[]
    createMany?: LoanDocumentCreateManyUploadedByInputEnvelope
    connect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
  }

  export type LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutOldOfficerInput, LoanAssignmentHistoryUncheckedCreateWithoutOldOfficerInput> | LoanAssignmentHistoryCreateWithoutOldOfficerInput[] | LoanAssignmentHistoryUncheckedCreateWithoutOldOfficerInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutOldOfficerInput | LoanAssignmentHistoryCreateOrConnectWithoutOldOfficerInput[]
    createMany?: LoanAssignmentHistoryCreateManyOldOfficerInputEnvelope
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
  }

  export type LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutNewOfficerInput, LoanAssignmentHistoryUncheckedCreateWithoutNewOfficerInput> | LoanAssignmentHistoryCreateWithoutNewOfficerInput[] | LoanAssignmentHistoryUncheckedCreateWithoutNewOfficerInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutNewOfficerInput | LoanAssignmentHistoryCreateOrConnectWithoutNewOfficerInput[]
    createMany?: LoanAssignmentHistoryCreateManyNewOfficerInputEnvelope
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
  }

  export type LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutChangedByInput, LoanAssignmentHistoryUncheckedCreateWithoutChangedByInput> | LoanAssignmentHistoryCreateWithoutChangedByInput[] | LoanAssignmentHistoryUncheckedCreateWithoutChangedByInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutChangedByInput | LoanAssignmentHistoryCreateOrConnectWithoutChangedByInput[]
    createMany?: LoanAssignmentHistoryCreateManyChangedByInputEnvelope
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
  }

  export type CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput = {
    create?: XOR<CustomerReassignmentCreateWithoutOldOfficerInput, CustomerReassignmentUncheckedCreateWithoutOldOfficerInput> | CustomerReassignmentCreateWithoutOldOfficerInput[] | CustomerReassignmentUncheckedCreateWithoutOldOfficerInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutOldOfficerInput | CustomerReassignmentCreateOrConnectWithoutOldOfficerInput[]
    createMany?: CustomerReassignmentCreateManyOldOfficerInputEnvelope
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
  }

  export type CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput = {
    create?: XOR<CustomerReassignmentCreateWithoutNewOfficerInput, CustomerReassignmentUncheckedCreateWithoutNewOfficerInput> | CustomerReassignmentCreateWithoutNewOfficerInput[] | CustomerReassignmentUncheckedCreateWithoutNewOfficerInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutNewOfficerInput | CustomerReassignmentCreateOrConnectWithoutNewOfficerInput[]
    createMany?: CustomerReassignmentCreateManyNewOfficerInputEnvelope
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
  }

  export type CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput = {
    create?: XOR<CustomerReassignmentCreateWithoutChangedByInput, CustomerReassignmentUncheckedCreateWithoutChangedByInput> | CustomerReassignmentCreateWithoutChangedByInput[] | CustomerReassignmentUncheckedCreateWithoutChangedByInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutChangedByInput | CustomerReassignmentCreateOrConnectWithoutChangedByInput[]
    createMany?: CustomerReassignmentCreateManyChangedByInputEnvelope
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BranchUpdateOneWithoutUsersNestedInput = {
    create?: XOR<BranchCreateWithoutUsersInput, BranchUncheckedCreateWithoutUsersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutUsersInput
    upsert?: BranchUpsertWithoutUsersInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutUsersInput, BranchUpdateWithoutUsersInput>, BranchUncheckedUpdateWithoutUsersInput>
  }

  export type BranchUpdateOneWithoutManagerNestedInput = {
    create?: XOR<BranchCreateWithoutManagerInput, BranchUncheckedCreateWithoutManagerInput>
    connectOrCreate?: BranchCreateOrConnectWithoutManagerInput
    upsert?: BranchUpsertWithoutManagerInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutManagerInput, BranchUpdateWithoutManagerInput>, BranchUncheckedUpdateWithoutManagerInput>
  }

  export type LoanUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<LoanCreateWithoutCreatedByInput, LoanUncheckedCreateWithoutCreatedByInput> | LoanCreateWithoutCreatedByInput[] | LoanUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutCreatedByInput | LoanCreateOrConnectWithoutCreatedByInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutCreatedByInput | LoanUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: LoanCreateManyCreatedByInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutCreatedByInput | LoanUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutCreatedByInput | LoanUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type LoanUpdateManyWithoutAssignedOfficerNestedInput = {
    create?: XOR<LoanCreateWithoutAssignedOfficerInput, LoanUncheckedCreateWithoutAssignedOfficerInput> | LoanCreateWithoutAssignedOfficerInput[] | LoanUncheckedCreateWithoutAssignedOfficerInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutAssignedOfficerInput | LoanCreateOrConnectWithoutAssignedOfficerInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutAssignedOfficerInput | LoanUpsertWithWhereUniqueWithoutAssignedOfficerInput[]
    createMany?: LoanCreateManyAssignedOfficerInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutAssignedOfficerInput | LoanUpdateWithWhereUniqueWithoutAssignedOfficerInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutAssignedOfficerInput | LoanUpdateManyWithWhereWithoutAssignedOfficerInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type CustomerUpdateManyWithoutCurrentOfficerNestedInput = {
    create?: XOR<CustomerCreateWithoutCurrentOfficerInput, CustomerUncheckedCreateWithoutCurrentOfficerInput> | CustomerCreateWithoutCurrentOfficerInput[] | CustomerUncheckedCreateWithoutCurrentOfficerInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutCurrentOfficerInput | CustomerCreateOrConnectWithoutCurrentOfficerInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutCurrentOfficerInput | CustomerUpsertWithWhereUniqueWithoutCurrentOfficerInput[]
    createMany?: CustomerCreateManyCurrentOfficerInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutCurrentOfficerInput | CustomerUpdateWithWhereUniqueWithoutCurrentOfficerInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutCurrentOfficerInput | CustomerUpdateManyWithWhereWithoutCurrentOfficerInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type RepaymentUpdateManyWithoutReceivedByNestedInput = {
    create?: XOR<RepaymentCreateWithoutReceivedByInput, RepaymentUncheckedCreateWithoutReceivedByInput> | RepaymentCreateWithoutReceivedByInput[] | RepaymentUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: RepaymentCreateOrConnectWithoutReceivedByInput | RepaymentCreateOrConnectWithoutReceivedByInput[]
    upsert?: RepaymentUpsertWithWhereUniqueWithoutReceivedByInput | RepaymentUpsertWithWhereUniqueWithoutReceivedByInput[]
    createMany?: RepaymentCreateManyReceivedByInputEnvelope
    set?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    disconnect?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    delete?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    connect?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    update?: RepaymentUpdateWithWhereUniqueWithoutReceivedByInput | RepaymentUpdateWithWhereUniqueWithoutReceivedByInput[]
    updateMany?: RepaymentUpdateManyWithWhereWithoutReceivedByInput | RepaymentUpdateManyWithWhereWithoutReceivedByInput[]
    deleteMany?: RepaymentScalarWhereInput | RepaymentScalarWhereInput[]
  }

  export type StaffSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<StaffSessionCreateWithoutUserInput, StaffSessionUncheckedCreateWithoutUserInput> | StaffSessionCreateWithoutUserInput[] | StaffSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StaffSessionCreateOrConnectWithoutUserInput | StaffSessionCreateOrConnectWithoutUserInput[]
    upsert?: StaffSessionUpsertWithWhereUniqueWithoutUserInput | StaffSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StaffSessionCreateManyUserInputEnvelope
    set?: StaffSessionWhereUniqueInput | StaffSessionWhereUniqueInput[]
    disconnect?: StaffSessionWhereUniqueInput | StaffSessionWhereUniqueInput[]
    delete?: StaffSessionWhereUniqueInput | StaffSessionWhereUniqueInput[]
    connect?: StaffSessionWhereUniqueInput | StaffSessionWhereUniqueInput[]
    update?: StaffSessionUpdateWithWhereUniqueWithoutUserInput | StaffSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StaffSessionUpdateManyWithWhereWithoutUserInput | StaffSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StaffSessionScalarWhereInput | StaffSessionScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutActorNestedInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutActorInput | AuditLogUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutActorInput | AuditLogUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutActorInput | AuditLogUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type CustomerDocumentUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<CustomerDocumentCreateWithoutUploadedByInput, CustomerDocumentUncheckedCreateWithoutUploadedByInput> | CustomerDocumentCreateWithoutUploadedByInput[] | CustomerDocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: CustomerDocumentCreateOrConnectWithoutUploadedByInput | CustomerDocumentCreateOrConnectWithoutUploadedByInput[]
    upsert?: CustomerDocumentUpsertWithWhereUniqueWithoutUploadedByInput | CustomerDocumentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: CustomerDocumentCreateManyUploadedByInputEnvelope
    set?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    disconnect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    delete?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    connect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    update?: CustomerDocumentUpdateWithWhereUniqueWithoutUploadedByInput | CustomerDocumentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: CustomerDocumentUpdateManyWithWhereWithoutUploadedByInput | CustomerDocumentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: CustomerDocumentScalarWhereInput | CustomerDocumentScalarWhereInput[]
  }

  export type LoanDocumentUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<LoanDocumentCreateWithoutUploadedByInput, LoanDocumentUncheckedCreateWithoutUploadedByInput> | LoanDocumentCreateWithoutUploadedByInput[] | LoanDocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: LoanDocumentCreateOrConnectWithoutUploadedByInput | LoanDocumentCreateOrConnectWithoutUploadedByInput[]
    upsert?: LoanDocumentUpsertWithWhereUniqueWithoutUploadedByInput | LoanDocumentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: LoanDocumentCreateManyUploadedByInputEnvelope
    set?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    disconnect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    delete?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    connect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    update?: LoanDocumentUpdateWithWhereUniqueWithoutUploadedByInput | LoanDocumentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: LoanDocumentUpdateManyWithWhereWithoutUploadedByInput | LoanDocumentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: LoanDocumentScalarWhereInput | LoanDocumentScalarWhereInput[]
  }

  export type LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutOldOfficerInput, LoanAssignmentHistoryUncheckedCreateWithoutOldOfficerInput> | LoanAssignmentHistoryCreateWithoutOldOfficerInput[] | LoanAssignmentHistoryUncheckedCreateWithoutOldOfficerInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutOldOfficerInput | LoanAssignmentHistoryCreateOrConnectWithoutOldOfficerInput[]
    upsert?: LoanAssignmentHistoryUpsertWithWhereUniqueWithoutOldOfficerInput | LoanAssignmentHistoryUpsertWithWhereUniqueWithoutOldOfficerInput[]
    createMany?: LoanAssignmentHistoryCreateManyOldOfficerInputEnvelope
    set?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    disconnect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    delete?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    update?: LoanAssignmentHistoryUpdateWithWhereUniqueWithoutOldOfficerInput | LoanAssignmentHistoryUpdateWithWhereUniqueWithoutOldOfficerInput[]
    updateMany?: LoanAssignmentHistoryUpdateManyWithWhereWithoutOldOfficerInput | LoanAssignmentHistoryUpdateManyWithWhereWithoutOldOfficerInput[]
    deleteMany?: LoanAssignmentHistoryScalarWhereInput | LoanAssignmentHistoryScalarWhereInput[]
  }

  export type LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutNewOfficerInput, LoanAssignmentHistoryUncheckedCreateWithoutNewOfficerInput> | LoanAssignmentHistoryCreateWithoutNewOfficerInput[] | LoanAssignmentHistoryUncheckedCreateWithoutNewOfficerInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutNewOfficerInput | LoanAssignmentHistoryCreateOrConnectWithoutNewOfficerInput[]
    upsert?: LoanAssignmentHistoryUpsertWithWhereUniqueWithoutNewOfficerInput | LoanAssignmentHistoryUpsertWithWhereUniqueWithoutNewOfficerInput[]
    createMany?: LoanAssignmentHistoryCreateManyNewOfficerInputEnvelope
    set?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    disconnect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    delete?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    update?: LoanAssignmentHistoryUpdateWithWhereUniqueWithoutNewOfficerInput | LoanAssignmentHistoryUpdateWithWhereUniqueWithoutNewOfficerInput[]
    updateMany?: LoanAssignmentHistoryUpdateManyWithWhereWithoutNewOfficerInput | LoanAssignmentHistoryUpdateManyWithWhereWithoutNewOfficerInput[]
    deleteMany?: LoanAssignmentHistoryScalarWhereInput | LoanAssignmentHistoryScalarWhereInput[]
  }

  export type LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutChangedByInput, LoanAssignmentHistoryUncheckedCreateWithoutChangedByInput> | LoanAssignmentHistoryCreateWithoutChangedByInput[] | LoanAssignmentHistoryUncheckedCreateWithoutChangedByInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutChangedByInput | LoanAssignmentHistoryCreateOrConnectWithoutChangedByInput[]
    upsert?: LoanAssignmentHistoryUpsertWithWhereUniqueWithoutChangedByInput | LoanAssignmentHistoryUpsertWithWhereUniqueWithoutChangedByInput[]
    createMany?: LoanAssignmentHistoryCreateManyChangedByInputEnvelope
    set?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    disconnect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    delete?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    update?: LoanAssignmentHistoryUpdateWithWhereUniqueWithoutChangedByInput | LoanAssignmentHistoryUpdateWithWhereUniqueWithoutChangedByInput[]
    updateMany?: LoanAssignmentHistoryUpdateManyWithWhereWithoutChangedByInput | LoanAssignmentHistoryUpdateManyWithWhereWithoutChangedByInput[]
    deleteMany?: LoanAssignmentHistoryScalarWhereInput | LoanAssignmentHistoryScalarWhereInput[]
  }

  export type CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput = {
    create?: XOR<CustomerReassignmentCreateWithoutOldOfficerInput, CustomerReassignmentUncheckedCreateWithoutOldOfficerInput> | CustomerReassignmentCreateWithoutOldOfficerInput[] | CustomerReassignmentUncheckedCreateWithoutOldOfficerInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutOldOfficerInput | CustomerReassignmentCreateOrConnectWithoutOldOfficerInput[]
    upsert?: CustomerReassignmentUpsertWithWhereUniqueWithoutOldOfficerInput | CustomerReassignmentUpsertWithWhereUniqueWithoutOldOfficerInput[]
    createMany?: CustomerReassignmentCreateManyOldOfficerInputEnvelope
    set?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    disconnect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    delete?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    update?: CustomerReassignmentUpdateWithWhereUniqueWithoutOldOfficerInput | CustomerReassignmentUpdateWithWhereUniqueWithoutOldOfficerInput[]
    updateMany?: CustomerReassignmentUpdateManyWithWhereWithoutOldOfficerInput | CustomerReassignmentUpdateManyWithWhereWithoutOldOfficerInput[]
    deleteMany?: CustomerReassignmentScalarWhereInput | CustomerReassignmentScalarWhereInput[]
  }

  export type CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput = {
    create?: XOR<CustomerReassignmentCreateWithoutNewOfficerInput, CustomerReassignmentUncheckedCreateWithoutNewOfficerInput> | CustomerReassignmentCreateWithoutNewOfficerInput[] | CustomerReassignmentUncheckedCreateWithoutNewOfficerInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutNewOfficerInput | CustomerReassignmentCreateOrConnectWithoutNewOfficerInput[]
    upsert?: CustomerReassignmentUpsertWithWhereUniqueWithoutNewOfficerInput | CustomerReassignmentUpsertWithWhereUniqueWithoutNewOfficerInput[]
    createMany?: CustomerReassignmentCreateManyNewOfficerInputEnvelope
    set?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    disconnect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    delete?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    update?: CustomerReassignmentUpdateWithWhereUniqueWithoutNewOfficerInput | CustomerReassignmentUpdateWithWhereUniqueWithoutNewOfficerInput[]
    updateMany?: CustomerReassignmentUpdateManyWithWhereWithoutNewOfficerInput | CustomerReassignmentUpdateManyWithWhereWithoutNewOfficerInput[]
    deleteMany?: CustomerReassignmentScalarWhereInput | CustomerReassignmentScalarWhereInput[]
  }

  export type CustomerReassignmentUpdateManyWithoutChangedByNestedInput = {
    create?: XOR<CustomerReassignmentCreateWithoutChangedByInput, CustomerReassignmentUncheckedCreateWithoutChangedByInput> | CustomerReassignmentCreateWithoutChangedByInput[] | CustomerReassignmentUncheckedCreateWithoutChangedByInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutChangedByInput | CustomerReassignmentCreateOrConnectWithoutChangedByInput[]
    upsert?: CustomerReassignmentUpsertWithWhereUniqueWithoutChangedByInput | CustomerReassignmentUpsertWithWhereUniqueWithoutChangedByInput[]
    createMany?: CustomerReassignmentCreateManyChangedByInputEnvelope
    set?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    disconnect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    delete?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    update?: CustomerReassignmentUpdateWithWhereUniqueWithoutChangedByInput | CustomerReassignmentUpdateWithWhereUniqueWithoutChangedByInput[]
    updateMany?: CustomerReassignmentUpdateManyWithWhereWithoutChangedByInput | CustomerReassignmentUpdateManyWithWhereWithoutChangedByInput[]
    deleteMany?: CustomerReassignmentScalarWhereInput | CustomerReassignmentScalarWhereInput[]
  }

  export type BranchUncheckedUpdateOneWithoutManagerNestedInput = {
    create?: XOR<BranchCreateWithoutManagerInput, BranchUncheckedCreateWithoutManagerInput>
    connectOrCreate?: BranchCreateOrConnectWithoutManagerInput
    upsert?: BranchUpsertWithoutManagerInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutManagerInput, BranchUpdateWithoutManagerInput>, BranchUncheckedUpdateWithoutManagerInput>
  }

  export type LoanUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<LoanCreateWithoutCreatedByInput, LoanUncheckedCreateWithoutCreatedByInput> | LoanCreateWithoutCreatedByInput[] | LoanUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutCreatedByInput | LoanCreateOrConnectWithoutCreatedByInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutCreatedByInput | LoanUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: LoanCreateManyCreatedByInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutCreatedByInput | LoanUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutCreatedByInput | LoanUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput = {
    create?: XOR<LoanCreateWithoutAssignedOfficerInput, LoanUncheckedCreateWithoutAssignedOfficerInput> | LoanCreateWithoutAssignedOfficerInput[] | LoanUncheckedCreateWithoutAssignedOfficerInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutAssignedOfficerInput | LoanCreateOrConnectWithoutAssignedOfficerInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutAssignedOfficerInput | LoanUpsertWithWhereUniqueWithoutAssignedOfficerInput[]
    createMany?: LoanCreateManyAssignedOfficerInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutAssignedOfficerInput | LoanUpdateWithWhereUniqueWithoutAssignedOfficerInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutAssignedOfficerInput | LoanUpdateManyWithWhereWithoutAssignedOfficerInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput = {
    create?: XOR<CustomerCreateWithoutCurrentOfficerInput, CustomerUncheckedCreateWithoutCurrentOfficerInput> | CustomerCreateWithoutCurrentOfficerInput[] | CustomerUncheckedCreateWithoutCurrentOfficerInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutCurrentOfficerInput | CustomerCreateOrConnectWithoutCurrentOfficerInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutCurrentOfficerInput | CustomerUpsertWithWhereUniqueWithoutCurrentOfficerInput[]
    createMany?: CustomerCreateManyCurrentOfficerInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutCurrentOfficerInput | CustomerUpdateWithWhereUniqueWithoutCurrentOfficerInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutCurrentOfficerInput | CustomerUpdateManyWithWhereWithoutCurrentOfficerInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput = {
    create?: XOR<RepaymentCreateWithoutReceivedByInput, RepaymentUncheckedCreateWithoutReceivedByInput> | RepaymentCreateWithoutReceivedByInput[] | RepaymentUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: RepaymentCreateOrConnectWithoutReceivedByInput | RepaymentCreateOrConnectWithoutReceivedByInput[]
    upsert?: RepaymentUpsertWithWhereUniqueWithoutReceivedByInput | RepaymentUpsertWithWhereUniqueWithoutReceivedByInput[]
    createMany?: RepaymentCreateManyReceivedByInputEnvelope
    set?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    disconnect?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    delete?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    connect?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    update?: RepaymentUpdateWithWhereUniqueWithoutReceivedByInput | RepaymentUpdateWithWhereUniqueWithoutReceivedByInput[]
    updateMany?: RepaymentUpdateManyWithWhereWithoutReceivedByInput | RepaymentUpdateManyWithWhereWithoutReceivedByInput[]
    deleteMany?: RepaymentScalarWhereInput | RepaymentScalarWhereInput[]
  }

  export type StaffSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StaffSessionCreateWithoutUserInput, StaffSessionUncheckedCreateWithoutUserInput> | StaffSessionCreateWithoutUserInput[] | StaffSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StaffSessionCreateOrConnectWithoutUserInput | StaffSessionCreateOrConnectWithoutUserInput[]
    upsert?: StaffSessionUpsertWithWhereUniqueWithoutUserInput | StaffSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StaffSessionCreateManyUserInputEnvelope
    set?: StaffSessionWhereUniqueInput | StaffSessionWhereUniqueInput[]
    disconnect?: StaffSessionWhereUniqueInput | StaffSessionWhereUniqueInput[]
    delete?: StaffSessionWhereUniqueInput | StaffSessionWhereUniqueInput[]
    connect?: StaffSessionWhereUniqueInput | StaffSessionWhereUniqueInput[]
    update?: StaffSessionUpdateWithWhereUniqueWithoutUserInput | StaffSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StaffSessionUpdateManyWithWhereWithoutUserInput | StaffSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StaffSessionScalarWhereInput | StaffSessionScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutActorNestedInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutActorInput | AuditLogUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutActorInput | AuditLogUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutActorInput | AuditLogUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<CustomerDocumentCreateWithoutUploadedByInput, CustomerDocumentUncheckedCreateWithoutUploadedByInput> | CustomerDocumentCreateWithoutUploadedByInput[] | CustomerDocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: CustomerDocumentCreateOrConnectWithoutUploadedByInput | CustomerDocumentCreateOrConnectWithoutUploadedByInput[]
    upsert?: CustomerDocumentUpsertWithWhereUniqueWithoutUploadedByInput | CustomerDocumentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: CustomerDocumentCreateManyUploadedByInputEnvelope
    set?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    disconnect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    delete?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    connect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    update?: CustomerDocumentUpdateWithWhereUniqueWithoutUploadedByInput | CustomerDocumentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: CustomerDocumentUpdateManyWithWhereWithoutUploadedByInput | CustomerDocumentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: CustomerDocumentScalarWhereInput | CustomerDocumentScalarWhereInput[]
  }

  export type LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<LoanDocumentCreateWithoutUploadedByInput, LoanDocumentUncheckedCreateWithoutUploadedByInput> | LoanDocumentCreateWithoutUploadedByInput[] | LoanDocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: LoanDocumentCreateOrConnectWithoutUploadedByInput | LoanDocumentCreateOrConnectWithoutUploadedByInput[]
    upsert?: LoanDocumentUpsertWithWhereUniqueWithoutUploadedByInput | LoanDocumentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: LoanDocumentCreateManyUploadedByInputEnvelope
    set?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    disconnect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    delete?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    connect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    update?: LoanDocumentUpdateWithWhereUniqueWithoutUploadedByInput | LoanDocumentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: LoanDocumentUpdateManyWithWhereWithoutUploadedByInput | LoanDocumentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: LoanDocumentScalarWhereInput | LoanDocumentScalarWhereInput[]
  }

  export type LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutOldOfficerInput, LoanAssignmentHistoryUncheckedCreateWithoutOldOfficerInput> | LoanAssignmentHistoryCreateWithoutOldOfficerInput[] | LoanAssignmentHistoryUncheckedCreateWithoutOldOfficerInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutOldOfficerInput | LoanAssignmentHistoryCreateOrConnectWithoutOldOfficerInput[]
    upsert?: LoanAssignmentHistoryUpsertWithWhereUniqueWithoutOldOfficerInput | LoanAssignmentHistoryUpsertWithWhereUniqueWithoutOldOfficerInput[]
    createMany?: LoanAssignmentHistoryCreateManyOldOfficerInputEnvelope
    set?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    disconnect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    delete?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    update?: LoanAssignmentHistoryUpdateWithWhereUniqueWithoutOldOfficerInput | LoanAssignmentHistoryUpdateWithWhereUniqueWithoutOldOfficerInput[]
    updateMany?: LoanAssignmentHistoryUpdateManyWithWhereWithoutOldOfficerInput | LoanAssignmentHistoryUpdateManyWithWhereWithoutOldOfficerInput[]
    deleteMany?: LoanAssignmentHistoryScalarWhereInput | LoanAssignmentHistoryScalarWhereInput[]
  }

  export type LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutNewOfficerInput, LoanAssignmentHistoryUncheckedCreateWithoutNewOfficerInput> | LoanAssignmentHistoryCreateWithoutNewOfficerInput[] | LoanAssignmentHistoryUncheckedCreateWithoutNewOfficerInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutNewOfficerInput | LoanAssignmentHistoryCreateOrConnectWithoutNewOfficerInput[]
    upsert?: LoanAssignmentHistoryUpsertWithWhereUniqueWithoutNewOfficerInput | LoanAssignmentHistoryUpsertWithWhereUniqueWithoutNewOfficerInput[]
    createMany?: LoanAssignmentHistoryCreateManyNewOfficerInputEnvelope
    set?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    disconnect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    delete?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    update?: LoanAssignmentHistoryUpdateWithWhereUniqueWithoutNewOfficerInput | LoanAssignmentHistoryUpdateWithWhereUniqueWithoutNewOfficerInput[]
    updateMany?: LoanAssignmentHistoryUpdateManyWithWhereWithoutNewOfficerInput | LoanAssignmentHistoryUpdateManyWithWhereWithoutNewOfficerInput[]
    deleteMany?: LoanAssignmentHistoryScalarWhereInput | LoanAssignmentHistoryScalarWhereInput[]
  }

  export type LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutChangedByInput, LoanAssignmentHistoryUncheckedCreateWithoutChangedByInput> | LoanAssignmentHistoryCreateWithoutChangedByInput[] | LoanAssignmentHistoryUncheckedCreateWithoutChangedByInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutChangedByInput | LoanAssignmentHistoryCreateOrConnectWithoutChangedByInput[]
    upsert?: LoanAssignmentHistoryUpsertWithWhereUniqueWithoutChangedByInput | LoanAssignmentHistoryUpsertWithWhereUniqueWithoutChangedByInput[]
    createMany?: LoanAssignmentHistoryCreateManyChangedByInputEnvelope
    set?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    disconnect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    delete?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    update?: LoanAssignmentHistoryUpdateWithWhereUniqueWithoutChangedByInput | LoanAssignmentHistoryUpdateWithWhereUniqueWithoutChangedByInput[]
    updateMany?: LoanAssignmentHistoryUpdateManyWithWhereWithoutChangedByInput | LoanAssignmentHistoryUpdateManyWithWhereWithoutChangedByInput[]
    deleteMany?: LoanAssignmentHistoryScalarWhereInput | LoanAssignmentHistoryScalarWhereInput[]
  }

  export type CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput = {
    create?: XOR<CustomerReassignmentCreateWithoutOldOfficerInput, CustomerReassignmentUncheckedCreateWithoutOldOfficerInput> | CustomerReassignmentCreateWithoutOldOfficerInput[] | CustomerReassignmentUncheckedCreateWithoutOldOfficerInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutOldOfficerInput | CustomerReassignmentCreateOrConnectWithoutOldOfficerInput[]
    upsert?: CustomerReassignmentUpsertWithWhereUniqueWithoutOldOfficerInput | CustomerReassignmentUpsertWithWhereUniqueWithoutOldOfficerInput[]
    createMany?: CustomerReassignmentCreateManyOldOfficerInputEnvelope
    set?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    disconnect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    delete?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    update?: CustomerReassignmentUpdateWithWhereUniqueWithoutOldOfficerInput | CustomerReassignmentUpdateWithWhereUniqueWithoutOldOfficerInput[]
    updateMany?: CustomerReassignmentUpdateManyWithWhereWithoutOldOfficerInput | CustomerReassignmentUpdateManyWithWhereWithoutOldOfficerInput[]
    deleteMany?: CustomerReassignmentScalarWhereInput | CustomerReassignmentScalarWhereInput[]
  }

  export type CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput = {
    create?: XOR<CustomerReassignmentCreateWithoutNewOfficerInput, CustomerReassignmentUncheckedCreateWithoutNewOfficerInput> | CustomerReassignmentCreateWithoutNewOfficerInput[] | CustomerReassignmentUncheckedCreateWithoutNewOfficerInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutNewOfficerInput | CustomerReassignmentCreateOrConnectWithoutNewOfficerInput[]
    upsert?: CustomerReassignmentUpsertWithWhereUniqueWithoutNewOfficerInput | CustomerReassignmentUpsertWithWhereUniqueWithoutNewOfficerInput[]
    createMany?: CustomerReassignmentCreateManyNewOfficerInputEnvelope
    set?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    disconnect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    delete?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    update?: CustomerReassignmentUpdateWithWhereUniqueWithoutNewOfficerInput | CustomerReassignmentUpdateWithWhereUniqueWithoutNewOfficerInput[]
    updateMany?: CustomerReassignmentUpdateManyWithWhereWithoutNewOfficerInput | CustomerReassignmentUpdateManyWithWhereWithoutNewOfficerInput[]
    deleteMany?: CustomerReassignmentScalarWhereInput | CustomerReassignmentScalarWhereInput[]
  }

  export type CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput = {
    create?: XOR<CustomerReassignmentCreateWithoutChangedByInput, CustomerReassignmentUncheckedCreateWithoutChangedByInput> | CustomerReassignmentCreateWithoutChangedByInput[] | CustomerReassignmentUncheckedCreateWithoutChangedByInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutChangedByInput | CustomerReassignmentCreateOrConnectWithoutChangedByInput[]
    upsert?: CustomerReassignmentUpsertWithWhereUniqueWithoutChangedByInput | CustomerReassignmentUpsertWithWhereUniqueWithoutChangedByInput[]
    createMany?: CustomerReassignmentCreateManyChangedByInputEnvelope
    set?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    disconnect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    delete?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    update?: CustomerReassignmentUpdateWithWhereUniqueWithoutChangedByInput | CustomerReassignmentUpdateWithWhereUniqueWithoutChangedByInput[]
    updateMany?: CustomerReassignmentUpdateManyWithWhereWithoutChangedByInput | CustomerReassignmentUpdateManyWithWhereWithoutChangedByInput[]
    deleteMany?: CustomerReassignmentScalarWhereInput | CustomerReassignmentScalarWhereInput[]
  }

  export type BranchCreateNestedOneWithoutCustomersInput = {
    create?: XOR<BranchCreateWithoutCustomersInput, BranchUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutCustomersInput
    connect?: BranchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCurrentCustomersInput = {
    create?: XOR<UserCreateWithoutCurrentCustomersInput, UserUncheckedCreateWithoutCurrentCustomersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCurrentCustomersInput
    connect?: UserWhereUniqueInput
  }

  export type CustomerDocumentCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerDocumentCreateWithoutCustomerInput, CustomerDocumentUncheckedCreateWithoutCustomerInput> | CustomerDocumentCreateWithoutCustomerInput[] | CustomerDocumentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerDocumentCreateOrConnectWithoutCustomerInput | CustomerDocumentCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerDocumentCreateManyCustomerInputEnvelope
    connect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
  }

  export type LoanCreateNestedManyWithoutCustomerInput = {
    create?: XOR<LoanCreateWithoutCustomerInput, LoanUncheckedCreateWithoutCustomerInput> | LoanCreateWithoutCustomerInput[] | LoanUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutCustomerInput | LoanCreateOrConnectWithoutCustomerInput[]
    createMany?: LoanCreateManyCustomerInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type CustomerReassignmentCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerReassignmentCreateWithoutCustomerInput, CustomerReassignmentUncheckedCreateWithoutCustomerInput> | CustomerReassignmentCreateWithoutCustomerInput[] | CustomerReassignmentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutCustomerInput | CustomerReassignmentCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerReassignmentCreateManyCustomerInputEnvelope
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
  }

  export type CustomerDocumentUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerDocumentCreateWithoutCustomerInput, CustomerDocumentUncheckedCreateWithoutCustomerInput> | CustomerDocumentCreateWithoutCustomerInput[] | CustomerDocumentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerDocumentCreateOrConnectWithoutCustomerInput | CustomerDocumentCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerDocumentCreateManyCustomerInputEnvelope
    connect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
  }

  export type LoanUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<LoanCreateWithoutCustomerInput, LoanUncheckedCreateWithoutCustomerInput> | LoanCreateWithoutCustomerInput[] | LoanUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutCustomerInput | LoanCreateOrConnectWithoutCustomerInput[]
    createMany?: LoanCreateManyCustomerInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type CustomerReassignmentUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerReassignmentCreateWithoutCustomerInput, CustomerReassignmentUncheckedCreateWithoutCustomerInput> | CustomerReassignmentCreateWithoutCustomerInput[] | CustomerReassignmentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutCustomerInput | CustomerReassignmentCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerReassignmentCreateManyCustomerInputEnvelope
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
  }

  export type BranchUpdateOneRequiredWithoutCustomersNestedInput = {
    create?: XOR<BranchCreateWithoutCustomersInput, BranchUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutCustomersInput
    upsert?: BranchUpsertWithoutCustomersInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutCustomersInput, BranchUpdateWithoutCustomersInput>, BranchUncheckedUpdateWithoutCustomersInput>
  }

  export type UserUpdateOneWithoutCurrentCustomersNestedInput = {
    create?: XOR<UserCreateWithoutCurrentCustomersInput, UserUncheckedCreateWithoutCurrentCustomersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCurrentCustomersInput
    upsert?: UserUpsertWithoutCurrentCustomersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCurrentCustomersInput, UserUpdateWithoutCurrentCustomersInput>, UserUncheckedUpdateWithoutCurrentCustomersInput>
  }

  export type CustomerDocumentUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerDocumentCreateWithoutCustomerInput, CustomerDocumentUncheckedCreateWithoutCustomerInput> | CustomerDocumentCreateWithoutCustomerInput[] | CustomerDocumentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerDocumentCreateOrConnectWithoutCustomerInput | CustomerDocumentCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerDocumentUpsertWithWhereUniqueWithoutCustomerInput | CustomerDocumentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerDocumentCreateManyCustomerInputEnvelope
    set?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    disconnect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    delete?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    connect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    update?: CustomerDocumentUpdateWithWhereUniqueWithoutCustomerInput | CustomerDocumentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerDocumentUpdateManyWithWhereWithoutCustomerInput | CustomerDocumentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerDocumentScalarWhereInput | CustomerDocumentScalarWhereInput[]
  }

  export type LoanUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<LoanCreateWithoutCustomerInput, LoanUncheckedCreateWithoutCustomerInput> | LoanCreateWithoutCustomerInput[] | LoanUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutCustomerInput | LoanCreateOrConnectWithoutCustomerInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutCustomerInput | LoanUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: LoanCreateManyCustomerInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutCustomerInput | LoanUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutCustomerInput | LoanUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type CustomerReassignmentUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerReassignmentCreateWithoutCustomerInput, CustomerReassignmentUncheckedCreateWithoutCustomerInput> | CustomerReassignmentCreateWithoutCustomerInput[] | CustomerReassignmentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutCustomerInput | CustomerReassignmentCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerReassignmentUpsertWithWhereUniqueWithoutCustomerInput | CustomerReassignmentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerReassignmentCreateManyCustomerInputEnvelope
    set?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    disconnect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    delete?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    update?: CustomerReassignmentUpdateWithWhereUniqueWithoutCustomerInput | CustomerReassignmentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerReassignmentUpdateManyWithWhereWithoutCustomerInput | CustomerReassignmentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerReassignmentScalarWhereInput | CustomerReassignmentScalarWhereInput[]
  }

  export type CustomerDocumentUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerDocumentCreateWithoutCustomerInput, CustomerDocumentUncheckedCreateWithoutCustomerInput> | CustomerDocumentCreateWithoutCustomerInput[] | CustomerDocumentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerDocumentCreateOrConnectWithoutCustomerInput | CustomerDocumentCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerDocumentUpsertWithWhereUniqueWithoutCustomerInput | CustomerDocumentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerDocumentCreateManyCustomerInputEnvelope
    set?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    disconnect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    delete?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    connect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    update?: CustomerDocumentUpdateWithWhereUniqueWithoutCustomerInput | CustomerDocumentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerDocumentUpdateManyWithWhereWithoutCustomerInput | CustomerDocumentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerDocumentScalarWhereInput | CustomerDocumentScalarWhereInput[]
  }

  export type LoanUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<LoanCreateWithoutCustomerInput, LoanUncheckedCreateWithoutCustomerInput> | LoanCreateWithoutCustomerInput[] | LoanUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutCustomerInput | LoanCreateOrConnectWithoutCustomerInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutCustomerInput | LoanUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: LoanCreateManyCustomerInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutCustomerInput | LoanUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutCustomerInput | LoanUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type CustomerReassignmentUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerReassignmentCreateWithoutCustomerInput, CustomerReassignmentUncheckedCreateWithoutCustomerInput> | CustomerReassignmentCreateWithoutCustomerInput[] | CustomerReassignmentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerReassignmentCreateOrConnectWithoutCustomerInput | CustomerReassignmentCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerReassignmentUpsertWithWhereUniqueWithoutCustomerInput | CustomerReassignmentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerReassignmentCreateManyCustomerInputEnvelope
    set?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    disconnect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    delete?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    connect?: CustomerReassignmentWhereUniqueInput | CustomerReassignmentWhereUniqueInput[]
    update?: CustomerReassignmentUpdateWithWhereUniqueWithoutCustomerInput | CustomerReassignmentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerReassignmentUpdateManyWithWhereWithoutCustomerInput | CustomerReassignmentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerReassignmentScalarWhereInput | CustomerReassignmentScalarWhereInput[]
  }

  export type LoanCreateNestedManyWithoutLoanTypeInput = {
    create?: XOR<LoanCreateWithoutLoanTypeInput, LoanUncheckedCreateWithoutLoanTypeInput> | LoanCreateWithoutLoanTypeInput[] | LoanUncheckedCreateWithoutLoanTypeInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutLoanTypeInput | LoanCreateOrConnectWithoutLoanTypeInput[]
    createMany?: LoanCreateManyLoanTypeInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type LoanUncheckedCreateNestedManyWithoutLoanTypeInput = {
    create?: XOR<LoanCreateWithoutLoanTypeInput, LoanUncheckedCreateWithoutLoanTypeInput> | LoanCreateWithoutLoanTypeInput[] | LoanUncheckedCreateWithoutLoanTypeInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutLoanTypeInput | LoanCreateOrConnectWithoutLoanTypeInput[]
    createMany?: LoanCreateManyLoanTypeInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type LoanUpdateManyWithoutLoanTypeNestedInput = {
    create?: XOR<LoanCreateWithoutLoanTypeInput, LoanUncheckedCreateWithoutLoanTypeInput> | LoanCreateWithoutLoanTypeInput[] | LoanUncheckedCreateWithoutLoanTypeInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutLoanTypeInput | LoanCreateOrConnectWithoutLoanTypeInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutLoanTypeInput | LoanUpsertWithWhereUniqueWithoutLoanTypeInput[]
    createMany?: LoanCreateManyLoanTypeInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutLoanTypeInput | LoanUpdateWithWhereUniqueWithoutLoanTypeInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutLoanTypeInput | LoanUpdateManyWithWhereWithoutLoanTypeInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type LoanUncheckedUpdateManyWithoutLoanTypeNestedInput = {
    create?: XOR<LoanCreateWithoutLoanTypeInput, LoanUncheckedCreateWithoutLoanTypeInput> | LoanCreateWithoutLoanTypeInput[] | LoanUncheckedCreateWithoutLoanTypeInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutLoanTypeInput | LoanCreateOrConnectWithoutLoanTypeInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutLoanTypeInput | LoanUpsertWithWhereUniqueWithoutLoanTypeInput[]
    createMany?: LoanCreateManyLoanTypeInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutLoanTypeInput | LoanUpdateWithWhereUniqueWithoutLoanTypeInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutLoanTypeInput | LoanUpdateManyWithWhereWithoutLoanTypeInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutLoansInput = {
    create?: XOR<CustomerCreateWithoutLoansInput, CustomerUncheckedCreateWithoutLoansInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutLoansInput
    connect?: CustomerWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutLoansInput = {
    create?: XOR<BranchCreateWithoutLoansInput, BranchUncheckedCreateWithoutLoansInput>
    connectOrCreate?: BranchCreateOrConnectWithoutLoansInput
    connect?: BranchWhereUniqueInput
  }

  export type LoanTypeCreateNestedOneWithoutLoansInput = {
    create?: XOR<LoanTypeCreateWithoutLoansInput, LoanTypeUncheckedCreateWithoutLoansInput>
    connectOrCreate?: LoanTypeCreateOrConnectWithoutLoansInput
    connect?: LoanTypeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedLoansInput = {
    create?: XOR<UserCreateWithoutCreatedLoansInput, UserUncheckedCreateWithoutCreatedLoansInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedLoansInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedLoansInput = {
    create?: XOR<UserCreateWithoutAssignedLoansInput, UserUncheckedCreateWithoutAssignedLoansInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedLoansInput
    connect?: UserWhereUniqueInput
  }

  export type RepaymentScheduleItemCreateNestedManyWithoutLoanInput = {
    create?: XOR<RepaymentScheduleItemCreateWithoutLoanInput, RepaymentScheduleItemUncheckedCreateWithoutLoanInput> | RepaymentScheduleItemCreateWithoutLoanInput[] | RepaymentScheduleItemUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: RepaymentScheduleItemCreateOrConnectWithoutLoanInput | RepaymentScheduleItemCreateOrConnectWithoutLoanInput[]
    createMany?: RepaymentScheduleItemCreateManyLoanInputEnvelope
    connect?: RepaymentScheduleItemWhereUniqueInput | RepaymentScheduleItemWhereUniqueInput[]
  }

  export type RepaymentCreateNestedManyWithoutLoanInput = {
    create?: XOR<RepaymentCreateWithoutLoanInput, RepaymentUncheckedCreateWithoutLoanInput> | RepaymentCreateWithoutLoanInput[] | RepaymentUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: RepaymentCreateOrConnectWithoutLoanInput | RepaymentCreateOrConnectWithoutLoanInput[]
    createMany?: RepaymentCreateManyLoanInputEnvelope
    connect?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
  }

  export type LoanDocumentCreateNestedManyWithoutLoanInput = {
    create?: XOR<LoanDocumentCreateWithoutLoanInput, LoanDocumentUncheckedCreateWithoutLoanInput> | LoanDocumentCreateWithoutLoanInput[] | LoanDocumentUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: LoanDocumentCreateOrConnectWithoutLoanInput | LoanDocumentCreateOrConnectWithoutLoanInput[]
    createMany?: LoanDocumentCreateManyLoanInputEnvelope
    connect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
  }

  export type LoanAssignmentHistoryCreateNestedManyWithoutLoanInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutLoanInput, LoanAssignmentHistoryUncheckedCreateWithoutLoanInput> | LoanAssignmentHistoryCreateWithoutLoanInput[] | LoanAssignmentHistoryUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutLoanInput | LoanAssignmentHistoryCreateOrConnectWithoutLoanInput[]
    createMany?: LoanAssignmentHistoryCreateManyLoanInputEnvelope
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
  }

  export type RepaymentScheduleItemUncheckedCreateNestedManyWithoutLoanInput = {
    create?: XOR<RepaymentScheduleItemCreateWithoutLoanInput, RepaymentScheduleItemUncheckedCreateWithoutLoanInput> | RepaymentScheduleItemCreateWithoutLoanInput[] | RepaymentScheduleItemUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: RepaymentScheduleItemCreateOrConnectWithoutLoanInput | RepaymentScheduleItemCreateOrConnectWithoutLoanInput[]
    createMany?: RepaymentScheduleItemCreateManyLoanInputEnvelope
    connect?: RepaymentScheduleItemWhereUniqueInput | RepaymentScheduleItemWhereUniqueInput[]
  }

  export type RepaymentUncheckedCreateNestedManyWithoutLoanInput = {
    create?: XOR<RepaymentCreateWithoutLoanInput, RepaymentUncheckedCreateWithoutLoanInput> | RepaymentCreateWithoutLoanInput[] | RepaymentUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: RepaymentCreateOrConnectWithoutLoanInput | RepaymentCreateOrConnectWithoutLoanInput[]
    createMany?: RepaymentCreateManyLoanInputEnvelope
    connect?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
  }

  export type LoanDocumentUncheckedCreateNestedManyWithoutLoanInput = {
    create?: XOR<LoanDocumentCreateWithoutLoanInput, LoanDocumentUncheckedCreateWithoutLoanInput> | LoanDocumentCreateWithoutLoanInput[] | LoanDocumentUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: LoanDocumentCreateOrConnectWithoutLoanInput | LoanDocumentCreateOrConnectWithoutLoanInput[]
    createMany?: LoanDocumentCreateManyLoanInputEnvelope
    connect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
  }

  export type LoanAssignmentHistoryUncheckedCreateNestedManyWithoutLoanInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutLoanInput, LoanAssignmentHistoryUncheckedCreateWithoutLoanInput> | LoanAssignmentHistoryCreateWithoutLoanInput[] | LoanAssignmentHistoryUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutLoanInput | LoanAssignmentHistoryCreateOrConnectWithoutLoanInput[]
    createMany?: LoanAssignmentHistoryCreateManyLoanInputEnvelope
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumTermUnitFieldUpdateOperationsInput = {
    set?: $Enums.TermUnit
  }

  export type EnumLoanStatusFieldUpdateOperationsInput = {
    set?: $Enums.LoanStatus
  }

  export type CustomerUpdateOneRequiredWithoutLoansNestedInput = {
    create?: XOR<CustomerCreateWithoutLoansInput, CustomerUncheckedCreateWithoutLoansInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutLoansInput
    upsert?: CustomerUpsertWithoutLoansInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutLoansInput, CustomerUpdateWithoutLoansInput>, CustomerUncheckedUpdateWithoutLoansInput>
  }

  export type BranchUpdateOneRequiredWithoutLoansNestedInput = {
    create?: XOR<BranchCreateWithoutLoansInput, BranchUncheckedCreateWithoutLoansInput>
    connectOrCreate?: BranchCreateOrConnectWithoutLoansInput
    upsert?: BranchUpsertWithoutLoansInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutLoansInput, BranchUpdateWithoutLoansInput>, BranchUncheckedUpdateWithoutLoansInput>
  }

  export type LoanTypeUpdateOneWithoutLoansNestedInput = {
    create?: XOR<LoanTypeCreateWithoutLoansInput, LoanTypeUncheckedCreateWithoutLoansInput>
    connectOrCreate?: LoanTypeCreateOrConnectWithoutLoansInput
    upsert?: LoanTypeUpsertWithoutLoansInput
    disconnect?: LoanTypeWhereInput | boolean
    delete?: LoanTypeWhereInput | boolean
    connect?: LoanTypeWhereUniqueInput
    update?: XOR<XOR<LoanTypeUpdateToOneWithWhereWithoutLoansInput, LoanTypeUpdateWithoutLoansInput>, LoanTypeUncheckedUpdateWithoutLoansInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedLoansNestedInput = {
    create?: XOR<UserCreateWithoutCreatedLoansInput, UserUncheckedCreateWithoutCreatedLoansInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedLoansInput
    upsert?: UserUpsertWithoutCreatedLoansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedLoansInput, UserUpdateWithoutCreatedLoansInput>, UserUncheckedUpdateWithoutCreatedLoansInput>
  }

  export type UserUpdateOneRequiredWithoutAssignedLoansNestedInput = {
    create?: XOR<UserCreateWithoutAssignedLoansInput, UserUncheckedCreateWithoutAssignedLoansInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedLoansInput
    upsert?: UserUpsertWithoutAssignedLoansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedLoansInput, UserUpdateWithoutAssignedLoansInput>, UserUncheckedUpdateWithoutAssignedLoansInput>
  }

  export type RepaymentScheduleItemUpdateManyWithoutLoanNestedInput = {
    create?: XOR<RepaymentScheduleItemCreateWithoutLoanInput, RepaymentScheduleItemUncheckedCreateWithoutLoanInput> | RepaymentScheduleItemCreateWithoutLoanInput[] | RepaymentScheduleItemUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: RepaymentScheduleItemCreateOrConnectWithoutLoanInput | RepaymentScheduleItemCreateOrConnectWithoutLoanInput[]
    upsert?: RepaymentScheduleItemUpsertWithWhereUniqueWithoutLoanInput | RepaymentScheduleItemUpsertWithWhereUniqueWithoutLoanInput[]
    createMany?: RepaymentScheduleItemCreateManyLoanInputEnvelope
    set?: RepaymentScheduleItemWhereUniqueInput | RepaymentScheduleItemWhereUniqueInput[]
    disconnect?: RepaymentScheduleItemWhereUniqueInput | RepaymentScheduleItemWhereUniqueInput[]
    delete?: RepaymentScheduleItemWhereUniqueInput | RepaymentScheduleItemWhereUniqueInput[]
    connect?: RepaymentScheduleItemWhereUniqueInput | RepaymentScheduleItemWhereUniqueInput[]
    update?: RepaymentScheduleItemUpdateWithWhereUniqueWithoutLoanInput | RepaymentScheduleItemUpdateWithWhereUniqueWithoutLoanInput[]
    updateMany?: RepaymentScheduleItemUpdateManyWithWhereWithoutLoanInput | RepaymentScheduleItemUpdateManyWithWhereWithoutLoanInput[]
    deleteMany?: RepaymentScheduleItemScalarWhereInput | RepaymentScheduleItemScalarWhereInput[]
  }

  export type RepaymentUpdateManyWithoutLoanNestedInput = {
    create?: XOR<RepaymentCreateWithoutLoanInput, RepaymentUncheckedCreateWithoutLoanInput> | RepaymentCreateWithoutLoanInput[] | RepaymentUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: RepaymentCreateOrConnectWithoutLoanInput | RepaymentCreateOrConnectWithoutLoanInput[]
    upsert?: RepaymentUpsertWithWhereUniqueWithoutLoanInput | RepaymentUpsertWithWhereUniqueWithoutLoanInput[]
    createMany?: RepaymentCreateManyLoanInputEnvelope
    set?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    disconnect?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    delete?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    connect?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    update?: RepaymentUpdateWithWhereUniqueWithoutLoanInput | RepaymentUpdateWithWhereUniqueWithoutLoanInput[]
    updateMany?: RepaymentUpdateManyWithWhereWithoutLoanInput | RepaymentUpdateManyWithWhereWithoutLoanInput[]
    deleteMany?: RepaymentScalarWhereInput | RepaymentScalarWhereInput[]
  }

  export type LoanDocumentUpdateManyWithoutLoanNestedInput = {
    create?: XOR<LoanDocumentCreateWithoutLoanInput, LoanDocumentUncheckedCreateWithoutLoanInput> | LoanDocumentCreateWithoutLoanInput[] | LoanDocumentUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: LoanDocumentCreateOrConnectWithoutLoanInput | LoanDocumentCreateOrConnectWithoutLoanInput[]
    upsert?: LoanDocumentUpsertWithWhereUniqueWithoutLoanInput | LoanDocumentUpsertWithWhereUniqueWithoutLoanInput[]
    createMany?: LoanDocumentCreateManyLoanInputEnvelope
    set?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    disconnect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    delete?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    connect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    update?: LoanDocumentUpdateWithWhereUniqueWithoutLoanInput | LoanDocumentUpdateWithWhereUniqueWithoutLoanInput[]
    updateMany?: LoanDocumentUpdateManyWithWhereWithoutLoanInput | LoanDocumentUpdateManyWithWhereWithoutLoanInput[]
    deleteMany?: LoanDocumentScalarWhereInput | LoanDocumentScalarWhereInput[]
  }

  export type LoanAssignmentHistoryUpdateManyWithoutLoanNestedInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutLoanInput, LoanAssignmentHistoryUncheckedCreateWithoutLoanInput> | LoanAssignmentHistoryCreateWithoutLoanInput[] | LoanAssignmentHistoryUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutLoanInput | LoanAssignmentHistoryCreateOrConnectWithoutLoanInput[]
    upsert?: LoanAssignmentHistoryUpsertWithWhereUniqueWithoutLoanInput | LoanAssignmentHistoryUpsertWithWhereUniqueWithoutLoanInput[]
    createMany?: LoanAssignmentHistoryCreateManyLoanInputEnvelope
    set?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    disconnect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    delete?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    update?: LoanAssignmentHistoryUpdateWithWhereUniqueWithoutLoanInput | LoanAssignmentHistoryUpdateWithWhereUniqueWithoutLoanInput[]
    updateMany?: LoanAssignmentHistoryUpdateManyWithWhereWithoutLoanInput | LoanAssignmentHistoryUpdateManyWithWhereWithoutLoanInput[]
    deleteMany?: LoanAssignmentHistoryScalarWhereInput | LoanAssignmentHistoryScalarWhereInput[]
  }

  export type RepaymentScheduleItemUncheckedUpdateManyWithoutLoanNestedInput = {
    create?: XOR<RepaymentScheduleItemCreateWithoutLoanInput, RepaymentScheduleItemUncheckedCreateWithoutLoanInput> | RepaymentScheduleItemCreateWithoutLoanInput[] | RepaymentScheduleItemUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: RepaymentScheduleItemCreateOrConnectWithoutLoanInput | RepaymentScheduleItemCreateOrConnectWithoutLoanInput[]
    upsert?: RepaymentScheduleItemUpsertWithWhereUniqueWithoutLoanInput | RepaymentScheduleItemUpsertWithWhereUniqueWithoutLoanInput[]
    createMany?: RepaymentScheduleItemCreateManyLoanInputEnvelope
    set?: RepaymentScheduleItemWhereUniqueInput | RepaymentScheduleItemWhereUniqueInput[]
    disconnect?: RepaymentScheduleItemWhereUniqueInput | RepaymentScheduleItemWhereUniqueInput[]
    delete?: RepaymentScheduleItemWhereUniqueInput | RepaymentScheduleItemWhereUniqueInput[]
    connect?: RepaymentScheduleItemWhereUniqueInput | RepaymentScheduleItemWhereUniqueInput[]
    update?: RepaymentScheduleItemUpdateWithWhereUniqueWithoutLoanInput | RepaymentScheduleItemUpdateWithWhereUniqueWithoutLoanInput[]
    updateMany?: RepaymentScheduleItemUpdateManyWithWhereWithoutLoanInput | RepaymentScheduleItemUpdateManyWithWhereWithoutLoanInput[]
    deleteMany?: RepaymentScheduleItemScalarWhereInput | RepaymentScheduleItemScalarWhereInput[]
  }

  export type RepaymentUncheckedUpdateManyWithoutLoanNestedInput = {
    create?: XOR<RepaymentCreateWithoutLoanInput, RepaymentUncheckedCreateWithoutLoanInput> | RepaymentCreateWithoutLoanInput[] | RepaymentUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: RepaymentCreateOrConnectWithoutLoanInput | RepaymentCreateOrConnectWithoutLoanInput[]
    upsert?: RepaymentUpsertWithWhereUniqueWithoutLoanInput | RepaymentUpsertWithWhereUniqueWithoutLoanInput[]
    createMany?: RepaymentCreateManyLoanInputEnvelope
    set?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    disconnect?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    delete?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    connect?: RepaymentWhereUniqueInput | RepaymentWhereUniqueInput[]
    update?: RepaymentUpdateWithWhereUniqueWithoutLoanInput | RepaymentUpdateWithWhereUniqueWithoutLoanInput[]
    updateMany?: RepaymentUpdateManyWithWhereWithoutLoanInput | RepaymentUpdateManyWithWhereWithoutLoanInput[]
    deleteMany?: RepaymentScalarWhereInput | RepaymentScalarWhereInput[]
  }

  export type LoanDocumentUncheckedUpdateManyWithoutLoanNestedInput = {
    create?: XOR<LoanDocumentCreateWithoutLoanInput, LoanDocumentUncheckedCreateWithoutLoanInput> | LoanDocumentCreateWithoutLoanInput[] | LoanDocumentUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: LoanDocumentCreateOrConnectWithoutLoanInput | LoanDocumentCreateOrConnectWithoutLoanInput[]
    upsert?: LoanDocumentUpsertWithWhereUniqueWithoutLoanInput | LoanDocumentUpsertWithWhereUniqueWithoutLoanInput[]
    createMany?: LoanDocumentCreateManyLoanInputEnvelope
    set?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    disconnect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    delete?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    connect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    update?: LoanDocumentUpdateWithWhereUniqueWithoutLoanInput | LoanDocumentUpdateWithWhereUniqueWithoutLoanInput[]
    updateMany?: LoanDocumentUpdateManyWithWhereWithoutLoanInput | LoanDocumentUpdateManyWithWhereWithoutLoanInput[]
    deleteMany?: LoanDocumentScalarWhereInput | LoanDocumentScalarWhereInput[]
  }

  export type LoanAssignmentHistoryUncheckedUpdateManyWithoutLoanNestedInput = {
    create?: XOR<LoanAssignmentHistoryCreateWithoutLoanInput, LoanAssignmentHistoryUncheckedCreateWithoutLoanInput> | LoanAssignmentHistoryCreateWithoutLoanInput[] | LoanAssignmentHistoryUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: LoanAssignmentHistoryCreateOrConnectWithoutLoanInput | LoanAssignmentHistoryCreateOrConnectWithoutLoanInput[]
    upsert?: LoanAssignmentHistoryUpsertWithWhereUniqueWithoutLoanInput | LoanAssignmentHistoryUpsertWithWhereUniqueWithoutLoanInput[]
    createMany?: LoanAssignmentHistoryCreateManyLoanInputEnvelope
    set?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    disconnect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    delete?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    connect?: LoanAssignmentHistoryWhereUniqueInput | LoanAssignmentHistoryWhereUniqueInput[]
    update?: LoanAssignmentHistoryUpdateWithWhereUniqueWithoutLoanInput | LoanAssignmentHistoryUpdateWithWhereUniqueWithoutLoanInput[]
    updateMany?: LoanAssignmentHistoryUpdateManyWithWhereWithoutLoanInput | LoanAssignmentHistoryUpdateManyWithWhereWithoutLoanInput[]
    deleteMany?: LoanAssignmentHistoryScalarWhereInput | LoanAssignmentHistoryScalarWhereInput[]
  }

  export type LoanCreateNestedOneWithoutScheduleItemsInput = {
    create?: XOR<LoanCreateWithoutScheduleItemsInput, LoanUncheckedCreateWithoutScheduleItemsInput>
    connectOrCreate?: LoanCreateOrConnectWithoutScheduleItemsInput
    connect?: LoanWhereUniqueInput
  }

  export type RepaymentAllocationCreateNestedManyWithoutScheduleItemInput = {
    create?: XOR<RepaymentAllocationCreateWithoutScheduleItemInput, RepaymentAllocationUncheckedCreateWithoutScheduleItemInput> | RepaymentAllocationCreateWithoutScheduleItemInput[] | RepaymentAllocationUncheckedCreateWithoutScheduleItemInput[]
    connectOrCreate?: RepaymentAllocationCreateOrConnectWithoutScheduleItemInput | RepaymentAllocationCreateOrConnectWithoutScheduleItemInput[]
    createMany?: RepaymentAllocationCreateManyScheduleItemInputEnvelope
    connect?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
  }

  export type RepaymentAllocationUncheckedCreateNestedManyWithoutScheduleItemInput = {
    create?: XOR<RepaymentAllocationCreateWithoutScheduleItemInput, RepaymentAllocationUncheckedCreateWithoutScheduleItemInput> | RepaymentAllocationCreateWithoutScheduleItemInput[] | RepaymentAllocationUncheckedCreateWithoutScheduleItemInput[]
    connectOrCreate?: RepaymentAllocationCreateOrConnectWithoutScheduleItemInput | RepaymentAllocationCreateOrConnectWithoutScheduleItemInput[]
    createMany?: RepaymentAllocationCreateManyScheduleItemInputEnvelope
    connect?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
  }

  export type EnumScheduleStatusFieldUpdateOperationsInput = {
    set?: $Enums.ScheduleStatus
  }

  export type LoanUpdateOneRequiredWithoutScheduleItemsNestedInput = {
    create?: XOR<LoanCreateWithoutScheduleItemsInput, LoanUncheckedCreateWithoutScheduleItemsInput>
    connectOrCreate?: LoanCreateOrConnectWithoutScheduleItemsInput
    upsert?: LoanUpsertWithoutScheduleItemsInput
    connect?: LoanWhereUniqueInput
    update?: XOR<XOR<LoanUpdateToOneWithWhereWithoutScheduleItemsInput, LoanUpdateWithoutScheduleItemsInput>, LoanUncheckedUpdateWithoutScheduleItemsInput>
  }

  export type RepaymentAllocationUpdateManyWithoutScheduleItemNestedInput = {
    create?: XOR<RepaymentAllocationCreateWithoutScheduleItemInput, RepaymentAllocationUncheckedCreateWithoutScheduleItemInput> | RepaymentAllocationCreateWithoutScheduleItemInput[] | RepaymentAllocationUncheckedCreateWithoutScheduleItemInput[]
    connectOrCreate?: RepaymentAllocationCreateOrConnectWithoutScheduleItemInput | RepaymentAllocationCreateOrConnectWithoutScheduleItemInput[]
    upsert?: RepaymentAllocationUpsertWithWhereUniqueWithoutScheduleItemInput | RepaymentAllocationUpsertWithWhereUniqueWithoutScheduleItemInput[]
    createMany?: RepaymentAllocationCreateManyScheduleItemInputEnvelope
    set?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    disconnect?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    delete?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    connect?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    update?: RepaymentAllocationUpdateWithWhereUniqueWithoutScheduleItemInput | RepaymentAllocationUpdateWithWhereUniqueWithoutScheduleItemInput[]
    updateMany?: RepaymentAllocationUpdateManyWithWhereWithoutScheduleItemInput | RepaymentAllocationUpdateManyWithWhereWithoutScheduleItemInput[]
    deleteMany?: RepaymentAllocationScalarWhereInput | RepaymentAllocationScalarWhereInput[]
  }

  export type RepaymentAllocationUncheckedUpdateManyWithoutScheduleItemNestedInput = {
    create?: XOR<RepaymentAllocationCreateWithoutScheduleItemInput, RepaymentAllocationUncheckedCreateWithoutScheduleItemInput> | RepaymentAllocationCreateWithoutScheduleItemInput[] | RepaymentAllocationUncheckedCreateWithoutScheduleItemInput[]
    connectOrCreate?: RepaymentAllocationCreateOrConnectWithoutScheduleItemInput | RepaymentAllocationCreateOrConnectWithoutScheduleItemInput[]
    upsert?: RepaymentAllocationUpsertWithWhereUniqueWithoutScheduleItemInput | RepaymentAllocationUpsertWithWhereUniqueWithoutScheduleItemInput[]
    createMany?: RepaymentAllocationCreateManyScheduleItemInputEnvelope
    set?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    disconnect?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    delete?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    connect?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    update?: RepaymentAllocationUpdateWithWhereUniqueWithoutScheduleItemInput | RepaymentAllocationUpdateWithWhereUniqueWithoutScheduleItemInput[]
    updateMany?: RepaymentAllocationUpdateManyWithWhereWithoutScheduleItemInput | RepaymentAllocationUpdateManyWithWhereWithoutScheduleItemInput[]
    deleteMany?: RepaymentAllocationScalarWhereInput | RepaymentAllocationScalarWhereInput[]
  }

  export type LoanCreateNestedOneWithoutRepaymentsInput = {
    create?: XOR<LoanCreateWithoutRepaymentsInput, LoanUncheckedCreateWithoutRepaymentsInput>
    connectOrCreate?: LoanCreateOrConnectWithoutRepaymentsInput
    connect?: LoanWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRepaymentsInput = {
    create?: XOR<UserCreateWithoutRepaymentsInput, UserUncheckedCreateWithoutRepaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRepaymentsInput
    connect?: UserWhereUniqueInput
  }

  export type RepaymentAllocationCreateNestedManyWithoutRepaymentInput = {
    create?: XOR<RepaymentAllocationCreateWithoutRepaymentInput, RepaymentAllocationUncheckedCreateWithoutRepaymentInput> | RepaymentAllocationCreateWithoutRepaymentInput[] | RepaymentAllocationUncheckedCreateWithoutRepaymentInput[]
    connectOrCreate?: RepaymentAllocationCreateOrConnectWithoutRepaymentInput | RepaymentAllocationCreateOrConnectWithoutRepaymentInput[]
    createMany?: RepaymentAllocationCreateManyRepaymentInputEnvelope
    connect?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
  }

  export type RepaymentAllocationUncheckedCreateNestedManyWithoutRepaymentInput = {
    create?: XOR<RepaymentAllocationCreateWithoutRepaymentInput, RepaymentAllocationUncheckedCreateWithoutRepaymentInput> | RepaymentAllocationCreateWithoutRepaymentInput[] | RepaymentAllocationUncheckedCreateWithoutRepaymentInput[]
    connectOrCreate?: RepaymentAllocationCreateOrConnectWithoutRepaymentInput | RepaymentAllocationCreateOrConnectWithoutRepaymentInput[]
    createMany?: RepaymentAllocationCreateManyRepaymentInputEnvelope
    connect?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
  }

  export type EnumRepaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.RepaymentMethod
  }

  export type LoanUpdateOneRequiredWithoutRepaymentsNestedInput = {
    create?: XOR<LoanCreateWithoutRepaymentsInput, LoanUncheckedCreateWithoutRepaymentsInput>
    connectOrCreate?: LoanCreateOrConnectWithoutRepaymentsInput
    upsert?: LoanUpsertWithoutRepaymentsInput
    connect?: LoanWhereUniqueInput
    update?: XOR<XOR<LoanUpdateToOneWithWhereWithoutRepaymentsInput, LoanUpdateWithoutRepaymentsInput>, LoanUncheckedUpdateWithoutRepaymentsInput>
  }

  export type UserUpdateOneRequiredWithoutRepaymentsNestedInput = {
    create?: XOR<UserCreateWithoutRepaymentsInput, UserUncheckedCreateWithoutRepaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRepaymentsInput
    upsert?: UserUpsertWithoutRepaymentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRepaymentsInput, UserUpdateWithoutRepaymentsInput>, UserUncheckedUpdateWithoutRepaymentsInput>
  }

  export type RepaymentAllocationUpdateManyWithoutRepaymentNestedInput = {
    create?: XOR<RepaymentAllocationCreateWithoutRepaymentInput, RepaymentAllocationUncheckedCreateWithoutRepaymentInput> | RepaymentAllocationCreateWithoutRepaymentInput[] | RepaymentAllocationUncheckedCreateWithoutRepaymentInput[]
    connectOrCreate?: RepaymentAllocationCreateOrConnectWithoutRepaymentInput | RepaymentAllocationCreateOrConnectWithoutRepaymentInput[]
    upsert?: RepaymentAllocationUpsertWithWhereUniqueWithoutRepaymentInput | RepaymentAllocationUpsertWithWhereUniqueWithoutRepaymentInput[]
    createMany?: RepaymentAllocationCreateManyRepaymentInputEnvelope
    set?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    disconnect?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    delete?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    connect?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    update?: RepaymentAllocationUpdateWithWhereUniqueWithoutRepaymentInput | RepaymentAllocationUpdateWithWhereUniqueWithoutRepaymentInput[]
    updateMany?: RepaymentAllocationUpdateManyWithWhereWithoutRepaymentInput | RepaymentAllocationUpdateManyWithWhereWithoutRepaymentInput[]
    deleteMany?: RepaymentAllocationScalarWhereInput | RepaymentAllocationScalarWhereInput[]
  }

  export type RepaymentAllocationUncheckedUpdateManyWithoutRepaymentNestedInput = {
    create?: XOR<RepaymentAllocationCreateWithoutRepaymentInput, RepaymentAllocationUncheckedCreateWithoutRepaymentInput> | RepaymentAllocationCreateWithoutRepaymentInput[] | RepaymentAllocationUncheckedCreateWithoutRepaymentInput[]
    connectOrCreate?: RepaymentAllocationCreateOrConnectWithoutRepaymentInput | RepaymentAllocationCreateOrConnectWithoutRepaymentInput[]
    upsert?: RepaymentAllocationUpsertWithWhereUniqueWithoutRepaymentInput | RepaymentAllocationUpsertWithWhereUniqueWithoutRepaymentInput[]
    createMany?: RepaymentAllocationCreateManyRepaymentInputEnvelope
    set?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    disconnect?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    delete?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    connect?: RepaymentAllocationWhereUniqueInput | RepaymentAllocationWhereUniqueInput[]
    update?: RepaymentAllocationUpdateWithWhereUniqueWithoutRepaymentInput | RepaymentAllocationUpdateWithWhereUniqueWithoutRepaymentInput[]
    updateMany?: RepaymentAllocationUpdateManyWithWhereWithoutRepaymentInput | RepaymentAllocationUpdateManyWithWhereWithoutRepaymentInput[]
    deleteMany?: RepaymentAllocationScalarWhereInput | RepaymentAllocationScalarWhereInput[]
  }

  export type RepaymentCreateNestedOneWithoutAllocationsInput = {
    create?: XOR<RepaymentCreateWithoutAllocationsInput, RepaymentUncheckedCreateWithoutAllocationsInput>
    connectOrCreate?: RepaymentCreateOrConnectWithoutAllocationsInput
    connect?: RepaymentWhereUniqueInput
  }

  export type RepaymentScheduleItemCreateNestedOneWithoutAllocationsInput = {
    create?: XOR<RepaymentScheduleItemCreateWithoutAllocationsInput, RepaymentScheduleItemUncheckedCreateWithoutAllocationsInput>
    connectOrCreate?: RepaymentScheduleItemCreateOrConnectWithoutAllocationsInput
    connect?: RepaymentScheduleItemWhereUniqueInput
  }

  export type RepaymentUpdateOneRequiredWithoutAllocationsNestedInput = {
    create?: XOR<RepaymentCreateWithoutAllocationsInput, RepaymentUncheckedCreateWithoutAllocationsInput>
    connectOrCreate?: RepaymentCreateOrConnectWithoutAllocationsInput
    upsert?: RepaymentUpsertWithoutAllocationsInput
    connect?: RepaymentWhereUniqueInput
    update?: XOR<XOR<RepaymentUpdateToOneWithWhereWithoutAllocationsInput, RepaymentUpdateWithoutAllocationsInput>, RepaymentUncheckedUpdateWithoutAllocationsInput>
  }

  export type RepaymentScheduleItemUpdateOneRequiredWithoutAllocationsNestedInput = {
    create?: XOR<RepaymentScheduleItemCreateWithoutAllocationsInput, RepaymentScheduleItemUncheckedCreateWithoutAllocationsInput>
    connectOrCreate?: RepaymentScheduleItemCreateOrConnectWithoutAllocationsInput
    upsert?: RepaymentScheduleItemUpsertWithoutAllocationsInput
    connect?: RepaymentScheduleItemWhereUniqueInput
    update?: XOR<XOR<RepaymentScheduleItemUpdateToOneWithWhereWithoutAllocationsInput, RepaymentScheduleItemUpdateWithoutAllocationsInput>, RepaymentScheduleItemUncheckedUpdateWithoutAllocationsInput>
  }

  export type LoanCreateNestedOneWithoutAssignmentHistoryInput = {
    create?: XOR<LoanCreateWithoutAssignmentHistoryInput, LoanUncheckedCreateWithoutAssignmentHistoryInput>
    connectOrCreate?: LoanCreateOrConnectWithoutAssignmentHistoryInput
    connect?: LoanWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOldLoanAssignmentsInput = {
    create?: XOR<UserCreateWithoutOldLoanAssignmentsInput, UserUncheckedCreateWithoutOldLoanAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOldLoanAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutNewLoanAssignmentsInput = {
    create?: XOR<UserCreateWithoutNewLoanAssignmentsInput, UserUncheckedCreateWithoutNewLoanAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNewLoanAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutOldLoanBranchesInput = {
    create?: XOR<BranchCreateWithoutOldLoanBranchesInput, BranchUncheckedCreateWithoutOldLoanBranchesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutOldLoanBranchesInput
    connect?: BranchWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutNewLoanBranchesInput = {
    create?: XOR<BranchCreateWithoutNewLoanBranchesInput, BranchUncheckedCreateWithoutNewLoanBranchesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNewLoanBranchesInput
    connect?: BranchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChangedLoanAssignmentsInput = {
    create?: XOR<UserCreateWithoutChangedLoanAssignmentsInput, UserUncheckedCreateWithoutChangedLoanAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChangedLoanAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type LoanUpdateOneRequiredWithoutAssignmentHistoryNestedInput = {
    create?: XOR<LoanCreateWithoutAssignmentHistoryInput, LoanUncheckedCreateWithoutAssignmentHistoryInput>
    connectOrCreate?: LoanCreateOrConnectWithoutAssignmentHistoryInput
    upsert?: LoanUpsertWithoutAssignmentHistoryInput
    connect?: LoanWhereUniqueInput
    update?: XOR<XOR<LoanUpdateToOneWithWhereWithoutAssignmentHistoryInput, LoanUpdateWithoutAssignmentHistoryInput>, LoanUncheckedUpdateWithoutAssignmentHistoryInput>
  }

  export type UserUpdateOneWithoutOldLoanAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutOldLoanAssignmentsInput, UserUncheckedCreateWithoutOldLoanAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOldLoanAssignmentsInput
    upsert?: UserUpsertWithoutOldLoanAssignmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOldLoanAssignmentsInput, UserUpdateWithoutOldLoanAssignmentsInput>, UserUncheckedUpdateWithoutOldLoanAssignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutNewLoanAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutNewLoanAssignmentsInput, UserUncheckedCreateWithoutNewLoanAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNewLoanAssignmentsInput
    upsert?: UserUpsertWithoutNewLoanAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNewLoanAssignmentsInput, UserUpdateWithoutNewLoanAssignmentsInput>, UserUncheckedUpdateWithoutNewLoanAssignmentsInput>
  }

  export type BranchUpdateOneWithoutOldLoanBranchesNestedInput = {
    create?: XOR<BranchCreateWithoutOldLoanBranchesInput, BranchUncheckedCreateWithoutOldLoanBranchesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutOldLoanBranchesInput
    upsert?: BranchUpsertWithoutOldLoanBranchesInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutOldLoanBranchesInput, BranchUpdateWithoutOldLoanBranchesInput>, BranchUncheckedUpdateWithoutOldLoanBranchesInput>
  }

  export type BranchUpdateOneWithoutNewLoanBranchesNestedInput = {
    create?: XOR<BranchCreateWithoutNewLoanBranchesInput, BranchUncheckedCreateWithoutNewLoanBranchesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNewLoanBranchesInput
    upsert?: BranchUpsertWithoutNewLoanBranchesInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutNewLoanBranchesInput, BranchUpdateWithoutNewLoanBranchesInput>, BranchUncheckedUpdateWithoutNewLoanBranchesInput>
  }

  export type UserUpdateOneRequiredWithoutChangedLoanAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutChangedLoanAssignmentsInput, UserUncheckedCreateWithoutChangedLoanAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChangedLoanAssignmentsInput
    upsert?: UserUpsertWithoutChangedLoanAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChangedLoanAssignmentsInput, UserUpdateWithoutChangedLoanAssignmentsInput>, UserUncheckedUpdateWithoutChangedLoanAssignmentsInput>
  }

  export type CustomerCreateNestedOneWithoutReassignmentsInput = {
    create?: XOR<CustomerCreateWithoutReassignmentsInput, CustomerUncheckedCreateWithoutReassignmentsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutReassignmentsInput
    connect?: CustomerWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutOldCustomerBranchesInput = {
    create?: XOR<BranchCreateWithoutOldCustomerBranchesInput, BranchUncheckedCreateWithoutOldCustomerBranchesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutOldCustomerBranchesInput
    connect?: BranchWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutNewCustomerBranchesInput = {
    create?: XOR<BranchCreateWithoutNewCustomerBranchesInput, BranchUncheckedCreateWithoutNewCustomerBranchesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNewCustomerBranchesInput
    connect?: BranchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOldCustomerAssignmentsInput = {
    create?: XOR<UserCreateWithoutOldCustomerAssignmentsInput, UserUncheckedCreateWithoutOldCustomerAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOldCustomerAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutNewCustomerAssignmentsInput = {
    create?: XOR<UserCreateWithoutNewCustomerAssignmentsInput, UserUncheckedCreateWithoutNewCustomerAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNewCustomerAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChangedCustomerAssignmentsInput = {
    create?: XOR<UserCreateWithoutChangedCustomerAssignmentsInput, UserUncheckedCreateWithoutChangedCustomerAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChangedCustomerAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutReassignmentsNestedInput = {
    create?: XOR<CustomerCreateWithoutReassignmentsInput, CustomerUncheckedCreateWithoutReassignmentsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutReassignmentsInput
    upsert?: CustomerUpsertWithoutReassignmentsInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutReassignmentsInput, CustomerUpdateWithoutReassignmentsInput>, CustomerUncheckedUpdateWithoutReassignmentsInput>
  }

  export type BranchUpdateOneWithoutOldCustomerBranchesNestedInput = {
    create?: XOR<BranchCreateWithoutOldCustomerBranchesInput, BranchUncheckedCreateWithoutOldCustomerBranchesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutOldCustomerBranchesInput
    upsert?: BranchUpsertWithoutOldCustomerBranchesInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutOldCustomerBranchesInput, BranchUpdateWithoutOldCustomerBranchesInput>, BranchUncheckedUpdateWithoutOldCustomerBranchesInput>
  }

  export type BranchUpdateOneRequiredWithoutNewCustomerBranchesNestedInput = {
    create?: XOR<BranchCreateWithoutNewCustomerBranchesInput, BranchUncheckedCreateWithoutNewCustomerBranchesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNewCustomerBranchesInput
    upsert?: BranchUpsertWithoutNewCustomerBranchesInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutNewCustomerBranchesInput, BranchUpdateWithoutNewCustomerBranchesInput>, BranchUncheckedUpdateWithoutNewCustomerBranchesInput>
  }

  export type UserUpdateOneWithoutOldCustomerAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutOldCustomerAssignmentsInput, UserUncheckedCreateWithoutOldCustomerAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOldCustomerAssignmentsInput
    upsert?: UserUpsertWithoutOldCustomerAssignmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOldCustomerAssignmentsInput, UserUpdateWithoutOldCustomerAssignmentsInput>, UserUncheckedUpdateWithoutOldCustomerAssignmentsInput>
  }

  export type UserUpdateOneWithoutNewCustomerAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutNewCustomerAssignmentsInput, UserUncheckedCreateWithoutNewCustomerAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNewCustomerAssignmentsInput
    upsert?: UserUpsertWithoutNewCustomerAssignmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNewCustomerAssignmentsInput, UserUpdateWithoutNewCustomerAssignmentsInput>, UserUncheckedUpdateWithoutNewCustomerAssignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutChangedCustomerAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutChangedCustomerAssignmentsInput, UserUncheckedCreateWithoutChangedCustomerAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChangedCustomerAssignmentsInput
    upsert?: UserUpsertWithoutChangedCustomerAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChangedCustomerAssignmentsInput, UserUpdateWithoutChangedCustomerAssignmentsInput>, UserUncheckedUpdateWithoutChangedCustomerAssignmentsInput>
  }

  export type CustomerDocumentCreateNestedManyWithoutDocumentTypeInput = {
    create?: XOR<CustomerDocumentCreateWithoutDocumentTypeInput, CustomerDocumentUncheckedCreateWithoutDocumentTypeInput> | CustomerDocumentCreateWithoutDocumentTypeInput[] | CustomerDocumentUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: CustomerDocumentCreateOrConnectWithoutDocumentTypeInput | CustomerDocumentCreateOrConnectWithoutDocumentTypeInput[]
    createMany?: CustomerDocumentCreateManyDocumentTypeInputEnvelope
    connect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
  }

  export type LoanDocumentCreateNestedManyWithoutDocumentTypeInput = {
    create?: XOR<LoanDocumentCreateWithoutDocumentTypeInput, LoanDocumentUncheckedCreateWithoutDocumentTypeInput> | LoanDocumentCreateWithoutDocumentTypeInput[] | LoanDocumentUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: LoanDocumentCreateOrConnectWithoutDocumentTypeInput | LoanDocumentCreateOrConnectWithoutDocumentTypeInput[]
    createMany?: LoanDocumentCreateManyDocumentTypeInputEnvelope
    connect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
  }

  export type CustomerDocumentUncheckedCreateNestedManyWithoutDocumentTypeInput = {
    create?: XOR<CustomerDocumentCreateWithoutDocumentTypeInput, CustomerDocumentUncheckedCreateWithoutDocumentTypeInput> | CustomerDocumentCreateWithoutDocumentTypeInput[] | CustomerDocumentUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: CustomerDocumentCreateOrConnectWithoutDocumentTypeInput | CustomerDocumentCreateOrConnectWithoutDocumentTypeInput[]
    createMany?: CustomerDocumentCreateManyDocumentTypeInputEnvelope
    connect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
  }

  export type LoanDocumentUncheckedCreateNestedManyWithoutDocumentTypeInput = {
    create?: XOR<LoanDocumentCreateWithoutDocumentTypeInput, LoanDocumentUncheckedCreateWithoutDocumentTypeInput> | LoanDocumentCreateWithoutDocumentTypeInput[] | LoanDocumentUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: LoanDocumentCreateOrConnectWithoutDocumentTypeInput | LoanDocumentCreateOrConnectWithoutDocumentTypeInput[]
    createMany?: LoanDocumentCreateManyDocumentTypeInputEnvelope
    connect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
  }

  export type CustomerDocumentUpdateManyWithoutDocumentTypeNestedInput = {
    create?: XOR<CustomerDocumentCreateWithoutDocumentTypeInput, CustomerDocumentUncheckedCreateWithoutDocumentTypeInput> | CustomerDocumentCreateWithoutDocumentTypeInput[] | CustomerDocumentUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: CustomerDocumentCreateOrConnectWithoutDocumentTypeInput | CustomerDocumentCreateOrConnectWithoutDocumentTypeInput[]
    upsert?: CustomerDocumentUpsertWithWhereUniqueWithoutDocumentTypeInput | CustomerDocumentUpsertWithWhereUniqueWithoutDocumentTypeInput[]
    createMany?: CustomerDocumentCreateManyDocumentTypeInputEnvelope
    set?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    disconnect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    delete?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    connect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    update?: CustomerDocumentUpdateWithWhereUniqueWithoutDocumentTypeInput | CustomerDocumentUpdateWithWhereUniqueWithoutDocumentTypeInput[]
    updateMany?: CustomerDocumentUpdateManyWithWhereWithoutDocumentTypeInput | CustomerDocumentUpdateManyWithWhereWithoutDocumentTypeInput[]
    deleteMany?: CustomerDocumentScalarWhereInput | CustomerDocumentScalarWhereInput[]
  }

  export type LoanDocumentUpdateManyWithoutDocumentTypeNestedInput = {
    create?: XOR<LoanDocumentCreateWithoutDocumentTypeInput, LoanDocumentUncheckedCreateWithoutDocumentTypeInput> | LoanDocumentCreateWithoutDocumentTypeInput[] | LoanDocumentUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: LoanDocumentCreateOrConnectWithoutDocumentTypeInput | LoanDocumentCreateOrConnectWithoutDocumentTypeInput[]
    upsert?: LoanDocumentUpsertWithWhereUniqueWithoutDocumentTypeInput | LoanDocumentUpsertWithWhereUniqueWithoutDocumentTypeInput[]
    createMany?: LoanDocumentCreateManyDocumentTypeInputEnvelope
    set?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    disconnect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    delete?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    connect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    update?: LoanDocumentUpdateWithWhereUniqueWithoutDocumentTypeInput | LoanDocumentUpdateWithWhereUniqueWithoutDocumentTypeInput[]
    updateMany?: LoanDocumentUpdateManyWithWhereWithoutDocumentTypeInput | LoanDocumentUpdateManyWithWhereWithoutDocumentTypeInput[]
    deleteMany?: LoanDocumentScalarWhereInput | LoanDocumentScalarWhereInput[]
  }

  export type CustomerDocumentUncheckedUpdateManyWithoutDocumentTypeNestedInput = {
    create?: XOR<CustomerDocumentCreateWithoutDocumentTypeInput, CustomerDocumentUncheckedCreateWithoutDocumentTypeInput> | CustomerDocumentCreateWithoutDocumentTypeInput[] | CustomerDocumentUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: CustomerDocumentCreateOrConnectWithoutDocumentTypeInput | CustomerDocumentCreateOrConnectWithoutDocumentTypeInput[]
    upsert?: CustomerDocumentUpsertWithWhereUniqueWithoutDocumentTypeInput | CustomerDocumentUpsertWithWhereUniqueWithoutDocumentTypeInput[]
    createMany?: CustomerDocumentCreateManyDocumentTypeInputEnvelope
    set?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    disconnect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    delete?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    connect?: CustomerDocumentWhereUniqueInput | CustomerDocumentWhereUniqueInput[]
    update?: CustomerDocumentUpdateWithWhereUniqueWithoutDocumentTypeInput | CustomerDocumentUpdateWithWhereUniqueWithoutDocumentTypeInput[]
    updateMany?: CustomerDocumentUpdateManyWithWhereWithoutDocumentTypeInput | CustomerDocumentUpdateManyWithWhereWithoutDocumentTypeInput[]
    deleteMany?: CustomerDocumentScalarWhereInput | CustomerDocumentScalarWhereInput[]
  }

  export type LoanDocumentUncheckedUpdateManyWithoutDocumentTypeNestedInput = {
    create?: XOR<LoanDocumentCreateWithoutDocumentTypeInput, LoanDocumentUncheckedCreateWithoutDocumentTypeInput> | LoanDocumentCreateWithoutDocumentTypeInput[] | LoanDocumentUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: LoanDocumentCreateOrConnectWithoutDocumentTypeInput | LoanDocumentCreateOrConnectWithoutDocumentTypeInput[]
    upsert?: LoanDocumentUpsertWithWhereUniqueWithoutDocumentTypeInput | LoanDocumentUpsertWithWhereUniqueWithoutDocumentTypeInput[]
    createMany?: LoanDocumentCreateManyDocumentTypeInputEnvelope
    set?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    disconnect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    delete?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    connect?: LoanDocumentWhereUniqueInput | LoanDocumentWhereUniqueInput[]
    update?: LoanDocumentUpdateWithWhereUniqueWithoutDocumentTypeInput | LoanDocumentUpdateWithWhereUniqueWithoutDocumentTypeInput[]
    updateMany?: LoanDocumentUpdateManyWithWhereWithoutDocumentTypeInput | LoanDocumentUpdateManyWithWhereWithoutDocumentTypeInput[]
    deleteMany?: LoanDocumentScalarWhereInput | LoanDocumentScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<CustomerCreateWithoutDocumentsInput, CustomerUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutDocumentsInput
    connect?: CustomerWhereUniqueInput
  }

  export type DocumentTypeCreateNestedOneWithoutCustomerDocsInput = {
    create?: XOR<DocumentTypeCreateWithoutCustomerDocsInput, DocumentTypeUncheckedCreateWithoutCustomerDocsInput>
    connectOrCreate?: DocumentTypeCreateOrConnectWithoutCustomerDocsInput
    connect?: DocumentTypeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUploadedCustDocsInput = {
    create?: XOR<UserCreateWithoutUploadedCustDocsInput, UserUncheckedCreateWithoutUploadedCustDocsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedCustDocsInput
    connect?: UserWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<CustomerCreateWithoutDocumentsInput, CustomerUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutDocumentsInput
    upsert?: CustomerUpsertWithoutDocumentsInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutDocumentsInput, CustomerUpdateWithoutDocumentsInput>, CustomerUncheckedUpdateWithoutDocumentsInput>
  }

  export type DocumentTypeUpdateOneRequiredWithoutCustomerDocsNestedInput = {
    create?: XOR<DocumentTypeCreateWithoutCustomerDocsInput, DocumentTypeUncheckedCreateWithoutCustomerDocsInput>
    connectOrCreate?: DocumentTypeCreateOrConnectWithoutCustomerDocsInput
    upsert?: DocumentTypeUpsertWithoutCustomerDocsInput
    connect?: DocumentTypeWhereUniqueInput
    update?: XOR<XOR<DocumentTypeUpdateToOneWithWhereWithoutCustomerDocsInput, DocumentTypeUpdateWithoutCustomerDocsInput>, DocumentTypeUncheckedUpdateWithoutCustomerDocsInput>
  }

  export type UserUpdateOneRequiredWithoutUploadedCustDocsNestedInput = {
    create?: XOR<UserCreateWithoutUploadedCustDocsInput, UserUncheckedCreateWithoutUploadedCustDocsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedCustDocsInput
    upsert?: UserUpsertWithoutUploadedCustDocsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUploadedCustDocsInput, UserUpdateWithoutUploadedCustDocsInput>, UserUncheckedUpdateWithoutUploadedCustDocsInput>
  }

  export type LoanCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<LoanCreateWithoutDocumentsInput, LoanUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: LoanCreateOrConnectWithoutDocumentsInput
    connect?: LoanWhereUniqueInput
  }

  export type DocumentTypeCreateNestedOneWithoutLoanDocsInput = {
    create?: XOR<DocumentTypeCreateWithoutLoanDocsInput, DocumentTypeUncheckedCreateWithoutLoanDocsInput>
    connectOrCreate?: DocumentTypeCreateOrConnectWithoutLoanDocsInput
    connect?: DocumentTypeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUploadedLoanDocsInput = {
    create?: XOR<UserCreateWithoutUploadedLoanDocsInput, UserUncheckedCreateWithoutUploadedLoanDocsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedLoanDocsInput
    connect?: UserWhereUniqueInput
  }

  export type LoanUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<LoanCreateWithoutDocumentsInput, LoanUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: LoanCreateOrConnectWithoutDocumentsInput
    upsert?: LoanUpsertWithoutDocumentsInput
    connect?: LoanWhereUniqueInput
    update?: XOR<XOR<LoanUpdateToOneWithWhereWithoutDocumentsInput, LoanUpdateWithoutDocumentsInput>, LoanUncheckedUpdateWithoutDocumentsInput>
  }

  export type DocumentTypeUpdateOneRequiredWithoutLoanDocsNestedInput = {
    create?: XOR<DocumentTypeCreateWithoutLoanDocsInput, DocumentTypeUncheckedCreateWithoutLoanDocsInput>
    connectOrCreate?: DocumentTypeCreateOrConnectWithoutLoanDocsInput
    upsert?: DocumentTypeUpsertWithoutLoanDocsInput
    connect?: DocumentTypeWhereUniqueInput
    update?: XOR<XOR<DocumentTypeUpdateToOneWithWhereWithoutLoanDocsInput, DocumentTypeUpdateWithoutLoanDocsInput>, DocumentTypeUncheckedUpdateWithoutLoanDocsInput>
  }

  export type UserUpdateOneRequiredWithoutUploadedLoanDocsNestedInput = {
    create?: XOR<UserCreateWithoutUploadedLoanDocsInput, UserUncheckedCreateWithoutUploadedLoanDocsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedLoanDocsInput
    upsert?: UserUpsertWithoutUploadedLoanDocsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUploadedLoanDocsInput, UserUpdateWithoutUploadedLoanDocsInput>, UserUncheckedUpdateWithoutUploadedLoanDocsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumTermUnitFilter<$PrismaModel = never> = {
    equals?: $Enums.TermUnit | EnumTermUnitFieldRefInput<$PrismaModel>
    in?: $Enums.TermUnit[] | ListEnumTermUnitFieldRefInput<$PrismaModel>
    notIn?: $Enums.TermUnit[] | ListEnumTermUnitFieldRefInput<$PrismaModel>
    not?: NestedEnumTermUnitFilter<$PrismaModel> | $Enums.TermUnit
  }

  export type NestedEnumLoanStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LoanStatus | EnumLoanStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LoanStatus[] | ListEnumLoanStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LoanStatus[] | ListEnumLoanStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLoanStatusFilter<$PrismaModel> | $Enums.LoanStatus
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumTermUnitWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TermUnit | EnumTermUnitFieldRefInput<$PrismaModel>
    in?: $Enums.TermUnit[] | ListEnumTermUnitFieldRefInput<$PrismaModel>
    notIn?: $Enums.TermUnit[] | ListEnumTermUnitFieldRefInput<$PrismaModel>
    not?: NestedEnumTermUnitWithAggregatesFilter<$PrismaModel> | $Enums.TermUnit
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTermUnitFilter<$PrismaModel>
    _max?: NestedEnumTermUnitFilter<$PrismaModel>
  }

  export type NestedEnumLoanStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LoanStatus | EnumLoanStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LoanStatus[] | ListEnumLoanStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LoanStatus[] | ListEnumLoanStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLoanStatusWithAggregatesFilter<$PrismaModel> | $Enums.LoanStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLoanStatusFilter<$PrismaModel>
    _max?: NestedEnumLoanStatusFilter<$PrismaModel>
  }

  export type NestedEnumScheduleStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ScheduleStatus | EnumScheduleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ScheduleStatus[] | ListEnumScheduleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScheduleStatus[] | ListEnumScheduleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumScheduleStatusFilter<$PrismaModel> | $Enums.ScheduleStatus
  }

  export type NestedEnumScheduleStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScheduleStatus | EnumScheduleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ScheduleStatus[] | ListEnumScheduleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScheduleStatus[] | ListEnumScheduleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumScheduleStatusWithAggregatesFilter<$PrismaModel> | $Enums.ScheduleStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScheduleStatusFilter<$PrismaModel>
    _max?: NestedEnumScheduleStatusFilter<$PrismaModel>
  }

  export type NestedEnumRepaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.RepaymentMethod | EnumRepaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.RepaymentMethod[] | ListEnumRepaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.RepaymentMethod[] | ListEnumRepaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumRepaymentMethodFilter<$PrismaModel> | $Enums.RepaymentMethod
  }

  export type NestedEnumRepaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RepaymentMethod | EnumRepaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.RepaymentMethod[] | ListEnumRepaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.RepaymentMethod[] | ListEnumRepaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumRepaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.RepaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRepaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumRepaymentMethodFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserCreateWithoutManagedBranchInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutManagedBranchInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutManagedBranchInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutManagedBranchInput, UserUncheckedCreateWithoutManagedBranchInput>
  }

  export type UserCreateWithoutBranchInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutBranchInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutBranchInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput>
  }

  export type UserCreateManyBranchInputEnvelope = {
    data: UserCreateManyBranchInput | UserCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutBranchInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    currentOfficer?: UserCreateNestedOneWithoutCurrentCustomersInput
    documents?: CustomerDocumentCreateNestedManyWithoutCustomerInput
    loans?: LoanCreateNestedManyWithoutCustomerInput
    reassignments?: CustomerReassignmentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutBranchInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    currentOfficerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    documents?: CustomerDocumentUncheckedCreateNestedManyWithoutCustomerInput
    loans?: LoanUncheckedCreateNestedManyWithoutCustomerInput
    reassignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutBranchInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutBranchInput, CustomerUncheckedCreateWithoutBranchInput>
  }

  export type CustomerCreateManyBranchInputEnvelope = {
    data: CustomerCreateManyBranchInput | CustomerCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type LoanCreateWithoutBranchInput = {
    id?: string
    loanNumber: string
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    customer: CustomerCreateNestedOneWithoutLoansInput
    loanType?: LoanTypeCreateNestedOneWithoutLoansInput
    createdBy: UserCreateNestedOneWithoutCreatedLoansInput
    assignedOfficer: UserCreateNestedOneWithoutAssignedLoansInput
    scheduleItems?: RepaymentScheduleItemCreateNestedManyWithoutLoanInput
    repayments?: RepaymentCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutBranchInput = {
    id?: string
    loanNumber: string
    customerId: string
    loanTypeId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    createdByUserId: string
    assignedOfficerId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedCreateNestedManyWithoutLoanInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentUncheckedCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutBranchInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutBranchInput, LoanUncheckedCreateWithoutBranchInput>
  }

  export type LoanCreateManyBranchInputEnvelope = {
    data: LoanCreateManyBranchInput | LoanCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type LoanAssignmentHistoryCreateWithoutOldBranchInput = {
    id?: string
    reason?: string | null
    changedAt?: Date | string
    loan: LoanCreateNestedOneWithoutAssignmentHistoryInput
    oldOfficer?: UserCreateNestedOneWithoutOldLoanAssignmentsInput
    newOfficer: UserCreateNestedOneWithoutNewLoanAssignmentsInput
    newBranch?: BranchCreateNestedOneWithoutNewLoanBranchesInput
    changedBy: UserCreateNestedOneWithoutChangedLoanAssignmentsInput
  }

  export type LoanAssignmentHistoryUncheckedCreateWithoutOldBranchInput = {
    id?: string
    loanId: string
    oldOfficerId?: string | null
    newOfficerId: string
    newBranchId?: string | null
    changedByUserId: string
    reason?: string | null
    changedAt?: Date | string
  }

  export type LoanAssignmentHistoryCreateOrConnectWithoutOldBranchInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    create: XOR<LoanAssignmentHistoryCreateWithoutOldBranchInput, LoanAssignmentHistoryUncheckedCreateWithoutOldBranchInput>
  }

  export type LoanAssignmentHistoryCreateManyOldBranchInputEnvelope = {
    data: LoanAssignmentHistoryCreateManyOldBranchInput | LoanAssignmentHistoryCreateManyOldBranchInput[]
    skipDuplicates?: boolean
  }

  export type LoanAssignmentHistoryCreateWithoutNewBranchInput = {
    id?: string
    reason?: string | null
    changedAt?: Date | string
    loan: LoanCreateNestedOneWithoutAssignmentHistoryInput
    oldOfficer?: UserCreateNestedOneWithoutOldLoanAssignmentsInput
    newOfficer: UserCreateNestedOneWithoutNewLoanAssignmentsInput
    oldBranch?: BranchCreateNestedOneWithoutOldLoanBranchesInput
    changedBy: UserCreateNestedOneWithoutChangedLoanAssignmentsInput
  }

  export type LoanAssignmentHistoryUncheckedCreateWithoutNewBranchInput = {
    id?: string
    loanId: string
    oldOfficerId?: string | null
    newOfficerId: string
    oldBranchId?: string | null
    changedByUserId: string
    reason?: string | null
    changedAt?: Date | string
  }

  export type LoanAssignmentHistoryCreateOrConnectWithoutNewBranchInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    create: XOR<LoanAssignmentHistoryCreateWithoutNewBranchInput, LoanAssignmentHistoryUncheckedCreateWithoutNewBranchInput>
  }

  export type LoanAssignmentHistoryCreateManyNewBranchInputEnvelope = {
    data: LoanAssignmentHistoryCreateManyNewBranchInput | LoanAssignmentHistoryCreateManyNewBranchInput[]
    skipDuplicates?: boolean
  }

  export type CustomerReassignmentCreateWithoutOldBranchInput = {
    id?: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutReassignmentsInput
    newBranch: BranchCreateNestedOneWithoutNewCustomerBranchesInput
    oldOfficer?: UserCreateNestedOneWithoutOldCustomerAssignmentsInput
    newOfficer?: UserCreateNestedOneWithoutNewCustomerAssignmentsInput
    changedBy: UserCreateNestedOneWithoutChangedCustomerAssignmentsInput
  }

  export type CustomerReassignmentUncheckedCreateWithoutOldBranchInput = {
    id?: string
    customerId: string
    newBranchId: string
    oldOfficerId?: string | null
    newOfficerId?: string | null
    changedByUserId: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
  }

  export type CustomerReassignmentCreateOrConnectWithoutOldBranchInput = {
    where: CustomerReassignmentWhereUniqueInput
    create: XOR<CustomerReassignmentCreateWithoutOldBranchInput, CustomerReassignmentUncheckedCreateWithoutOldBranchInput>
  }

  export type CustomerReassignmentCreateManyOldBranchInputEnvelope = {
    data: CustomerReassignmentCreateManyOldBranchInput | CustomerReassignmentCreateManyOldBranchInput[]
    skipDuplicates?: boolean
  }

  export type CustomerReassignmentCreateWithoutNewBranchInput = {
    id?: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutReassignmentsInput
    oldBranch?: BranchCreateNestedOneWithoutOldCustomerBranchesInput
    oldOfficer?: UserCreateNestedOneWithoutOldCustomerAssignmentsInput
    newOfficer?: UserCreateNestedOneWithoutNewCustomerAssignmentsInput
    changedBy: UserCreateNestedOneWithoutChangedCustomerAssignmentsInput
  }

  export type CustomerReassignmentUncheckedCreateWithoutNewBranchInput = {
    id?: string
    customerId: string
    oldBranchId?: string | null
    oldOfficerId?: string | null
    newOfficerId?: string | null
    changedByUserId: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
  }

  export type CustomerReassignmentCreateOrConnectWithoutNewBranchInput = {
    where: CustomerReassignmentWhereUniqueInput
    create: XOR<CustomerReassignmentCreateWithoutNewBranchInput, CustomerReassignmentUncheckedCreateWithoutNewBranchInput>
  }

  export type CustomerReassignmentCreateManyNewBranchInputEnvelope = {
    data: CustomerReassignmentCreateManyNewBranchInput | CustomerReassignmentCreateManyNewBranchInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutManagedBranchInput = {
    update: XOR<UserUpdateWithoutManagedBranchInput, UserUncheckedUpdateWithoutManagedBranchInput>
    create: XOR<UserCreateWithoutManagedBranchInput, UserUncheckedCreateWithoutManagedBranchInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutManagedBranchInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutManagedBranchInput, UserUncheckedUpdateWithoutManagedBranchInput>
  }

  export type UserUpdateWithoutManagedBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutManagedBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutBranchInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutBranchInput, UserUncheckedUpdateWithoutBranchInput>
    create: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput>
  }

  export type UserUpdateWithWhereUniqueWithoutBranchInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutBranchInput, UserUncheckedUpdateWithoutBranchInput>
  }

  export type UserUpdateManyWithWhereWithoutBranchInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutBranchInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isActive?: BoolFilter<"User"> | boolean
    branchId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type CustomerUpsertWithWhereUniqueWithoutBranchInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutBranchInput, CustomerUncheckedUpdateWithoutBranchInput>
    create: XOR<CustomerCreateWithoutBranchInput, CustomerUncheckedCreateWithoutBranchInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutBranchInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutBranchInput, CustomerUncheckedUpdateWithoutBranchInput>
  }

  export type CustomerUpdateManyWithWhereWithoutBranchInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutBranchInput>
  }

  export type CustomerScalarWhereInput = {
    AND?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    OR?: CustomerScalarWhereInput[]
    NOT?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    id?: StringFilter<"Customer"> | string
    code?: StringNullableFilter<"Customer"> | string | null
    firstName?: StringFilter<"Customer"> | string
    lastName?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    email?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    branchId?: StringFilter<"Customer"> | string
    currentOfficerId?: StringNullableFilter<"Customer"> | string | null
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Customer"> | Date | string | null
  }

  export type LoanUpsertWithWhereUniqueWithoutBranchInput = {
    where: LoanWhereUniqueInput
    update: XOR<LoanUpdateWithoutBranchInput, LoanUncheckedUpdateWithoutBranchInput>
    create: XOR<LoanCreateWithoutBranchInput, LoanUncheckedCreateWithoutBranchInput>
  }

  export type LoanUpdateWithWhereUniqueWithoutBranchInput = {
    where: LoanWhereUniqueInput
    data: XOR<LoanUpdateWithoutBranchInput, LoanUncheckedUpdateWithoutBranchInput>
  }

  export type LoanUpdateManyWithWhereWithoutBranchInput = {
    where: LoanScalarWhereInput
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyWithoutBranchInput>
  }

  export type LoanScalarWhereInput = {
    AND?: LoanScalarWhereInput | LoanScalarWhereInput[]
    OR?: LoanScalarWhereInput[]
    NOT?: LoanScalarWhereInput | LoanScalarWhereInput[]
    id?: StringFilter<"Loan"> | string
    loanNumber?: StringFilter<"Loan"> | string
    customerId?: StringFilter<"Loan"> | string
    branchId?: StringFilter<"Loan"> | string
    loanTypeId?: StringNullableFilter<"Loan"> | string | null
    principalAmount?: DecimalFilter<"Loan"> | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFilter<"Loan"> | string
    termCount?: IntFilter<"Loan"> | number
    termUnit?: EnumTermUnitFilter<"Loan"> | $Enums.TermUnit
    startDate?: DateTimeFilter<"Loan"> | Date | string
    endDate?: DateTimeNullableFilter<"Loan"> | Date | string | null
    processingFeeAmount?: DecimalFilter<"Loan"> | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFilter<"Loan"> | boolean
    penaltyFeePerDayAmount?: DecimalFilter<"Loan"> | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFilter<"Loan"> | $Enums.LoanStatus
    createdByUserId?: StringFilter<"Loan"> | string
    assignedOfficerId?: StringFilter<"Loan"> | string
    disbursedAt?: DateTimeNullableFilter<"Loan"> | Date | string | null
    closedAt?: DateTimeNullableFilter<"Loan"> | Date | string | null
    notes?: StringNullableFilter<"Loan"> | string | null
    createdAt?: DateTimeFilter<"Loan"> | Date | string
    updatedAt?: DateTimeFilter<"Loan"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Loan"> | Date | string | null
  }

  export type LoanAssignmentHistoryUpsertWithWhereUniqueWithoutOldBranchInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    update: XOR<LoanAssignmentHistoryUpdateWithoutOldBranchInput, LoanAssignmentHistoryUncheckedUpdateWithoutOldBranchInput>
    create: XOR<LoanAssignmentHistoryCreateWithoutOldBranchInput, LoanAssignmentHistoryUncheckedCreateWithoutOldBranchInput>
  }

  export type LoanAssignmentHistoryUpdateWithWhereUniqueWithoutOldBranchInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    data: XOR<LoanAssignmentHistoryUpdateWithoutOldBranchInput, LoanAssignmentHistoryUncheckedUpdateWithoutOldBranchInput>
  }

  export type LoanAssignmentHistoryUpdateManyWithWhereWithoutOldBranchInput = {
    where: LoanAssignmentHistoryScalarWhereInput
    data: XOR<LoanAssignmentHistoryUpdateManyMutationInput, LoanAssignmentHistoryUncheckedUpdateManyWithoutOldBranchInput>
  }

  export type LoanAssignmentHistoryScalarWhereInput = {
    AND?: LoanAssignmentHistoryScalarWhereInput | LoanAssignmentHistoryScalarWhereInput[]
    OR?: LoanAssignmentHistoryScalarWhereInput[]
    NOT?: LoanAssignmentHistoryScalarWhereInput | LoanAssignmentHistoryScalarWhereInput[]
    id?: StringFilter<"LoanAssignmentHistory"> | string
    loanId?: StringFilter<"LoanAssignmentHistory"> | string
    oldOfficerId?: StringNullableFilter<"LoanAssignmentHistory"> | string | null
    newOfficerId?: StringFilter<"LoanAssignmentHistory"> | string
    oldBranchId?: StringNullableFilter<"LoanAssignmentHistory"> | string | null
    newBranchId?: StringNullableFilter<"LoanAssignmentHistory"> | string | null
    changedByUserId?: StringFilter<"LoanAssignmentHistory"> | string
    reason?: StringNullableFilter<"LoanAssignmentHistory"> | string | null
    changedAt?: DateTimeFilter<"LoanAssignmentHistory"> | Date | string
  }

  export type LoanAssignmentHistoryUpsertWithWhereUniqueWithoutNewBranchInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    update: XOR<LoanAssignmentHistoryUpdateWithoutNewBranchInput, LoanAssignmentHistoryUncheckedUpdateWithoutNewBranchInput>
    create: XOR<LoanAssignmentHistoryCreateWithoutNewBranchInput, LoanAssignmentHistoryUncheckedCreateWithoutNewBranchInput>
  }

  export type LoanAssignmentHistoryUpdateWithWhereUniqueWithoutNewBranchInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    data: XOR<LoanAssignmentHistoryUpdateWithoutNewBranchInput, LoanAssignmentHistoryUncheckedUpdateWithoutNewBranchInput>
  }

  export type LoanAssignmentHistoryUpdateManyWithWhereWithoutNewBranchInput = {
    where: LoanAssignmentHistoryScalarWhereInput
    data: XOR<LoanAssignmentHistoryUpdateManyMutationInput, LoanAssignmentHistoryUncheckedUpdateManyWithoutNewBranchInput>
  }

  export type CustomerReassignmentUpsertWithWhereUniqueWithoutOldBranchInput = {
    where: CustomerReassignmentWhereUniqueInput
    update: XOR<CustomerReassignmentUpdateWithoutOldBranchInput, CustomerReassignmentUncheckedUpdateWithoutOldBranchInput>
    create: XOR<CustomerReassignmentCreateWithoutOldBranchInput, CustomerReassignmentUncheckedCreateWithoutOldBranchInput>
  }

  export type CustomerReassignmentUpdateWithWhereUniqueWithoutOldBranchInput = {
    where: CustomerReassignmentWhereUniqueInput
    data: XOR<CustomerReassignmentUpdateWithoutOldBranchInput, CustomerReassignmentUncheckedUpdateWithoutOldBranchInput>
  }

  export type CustomerReassignmentUpdateManyWithWhereWithoutOldBranchInput = {
    where: CustomerReassignmentScalarWhereInput
    data: XOR<CustomerReassignmentUpdateManyMutationInput, CustomerReassignmentUncheckedUpdateManyWithoutOldBranchInput>
  }

  export type CustomerReassignmentScalarWhereInput = {
    AND?: CustomerReassignmentScalarWhereInput | CustomerReassignmentScalarWhereInput[]
    OR?: CustomerReassignmentScalarWhereInput[]
    NOT?: CustomerReassignmentScalarWhereInput | CustomerReassignmentScalarWhereInput[]
    id?: StringFilter<"CustomerReassignment"> | string
    customerId?: StringFilter<"CustomerReassignment"> | string
    oldBranchId?: StringNullableFilter<"CustomerReassignment"> | string | null
    newBranchId?: StringFilter<"CustomerReassignment"> | string
    oldOfficerId?: StringNullableFilter<"CustomerReassignment"> | string | null
    newOfficerId?: StringNullableFilter<"CustomerReassignment"> | string | null
    changedByUserId?: StringFilter<"CustomerReassignment"> | string
    reason?: StringNullableFilter<"CustomerReassignment"> | string | null
    previousOfficerEndAt?: DateTimeNullableFilter<"CustomerReassignment"> | Date | string | null
    newOfficerStartAt?: DateTimeNullableFilter<"CustomerReassignment"> | Date | string | null
    changedAt?: DateTimeFilter<"CustomerReassignment"> | Date | string
  }

  export type CustomerReassignmentUpsertWithWhereUniqueWithoutNewBranchInput = {
    where: CustomerReassignmentWhereUniqueInput
    update: XOR<CustomerReassignmentUpdateWithoutNewBranchInput, CustomerReassignmentUncheckedUpdateWithoutNewBranchInput>
    create: XOR<CustomerReassignmentCreateWithoutNewBranchInput, CustomerReassignmentUncheckedCreateWithoutNewBranchInput>
  }

  export type CustomerReassignmentUpdateWithWhereUniqueWithoutNewBranchInput = {
    where: CustomerReassignmentWhereUniqueInput
    data: XOR<CustomerReassignmentUpdateWithoutNewBranchInput, CustomerReassignmentUncheckedUpdateWithoutNewBranchInput>
  }

  export type CustomerReassignmentUpdateManyWithWhereWithoutNewBranchInput = {
    where: CustomerReassignmentScalarWhereInput
    data: XOR<CustomerReassignmentUpdateManyMutationInput, CustomerReassignmentUncheckedUpdateManyWithoutNewBranchInput>
  }

  export type BranchCreateWithoutUsersInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    manager?: UserCreateNestedOneWithoutManagedBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    loans?: LoanCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutOldBranchInput
    newLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutNewBranchInput
    oldCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutOldBranchInput
    newCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutNewBranchInput
  }

  export type BranchUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    code: string
    managerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldBranchInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewBranchInput
    oldCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldBranchInput
    newCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewBranchInput
  }

  export type BranchCreateOrConnectWithoutUsersInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutUsersInput, BranchUncheckedCreateWithoutUsersInput>
  }

  export type BranchCreateWithoutManagerInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    loans?: LoanCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutOldBranchInput
    newLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutNewBranchInput
    oldCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutOldBranchInput
    newCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutNewBranchInput
  }

  export type BranchUncheckedCreateWithoutManagerInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldBranchInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewBranchInput
    oldCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldBranchInput
    newCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewBranchInput
  }

  export type BranchCreateOrConnectWithoutManagerInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutManagerInput, BranchUncheckedCreateWithoutManagerInput>
  }

  export type LoanCreateWithoutCreatedByInput = {
    id?: string
    loanNumber: string
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    customer: CustomerCreateNestedOneWithoutLoansInput
    branch: BranchCreateNestedOneWithoutLoansInput
    loanType?: LoanTypeCreateNestedOneWithoutLoansInput
    assignedOfficer: UserCreateNestedOneWithoutAssignedLoansInput
    scheduleItems?: RepaymentScheduleItemCreateNestedManyWithoutLoanInput
    repayments?: RepaymentCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutCreatedByInput = {
    id?: string
    loanNumber: string
    customerId: string
    branchId: string
    loanTypeId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    assignedOfficerId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedCreateNestedManyWithoutLoanInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentUncheckedCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutCreatedByInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutCreatedByInput, LoanUncheckedCreateWithoutCreatedByInput>
  }

  export type LoanCreateManyCreatedByInputEnvelope = {
    data: LoanCreateManyCreatedByInput | LoanCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type LoanCreateWithoutAssignedOfficerInput = {
    id?: string
    loanNumber: string
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    customer: CustomerCreateNestedOneWithoutLoansInput
    branch: BranchCreateNestedOneWithoutLoansInput
    loanType?: LoanTypeCreateNestedOneWithoutLoansInput
    createdBy: UserCreateNestedOneWithoutCreatedLoansInput
    scheduleItems?: RepaymentScheduleItemCreateNestedManyWithoutLoanInput
    repayments?: RepaymentCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutAssignedOfficerInput = {
    id?: string
    loanNumber: string
    customerId: string
    branchId: string
    loanTypeId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    createdByUserId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedCreateNestedManyWithoutLoanInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentUncheckedCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutAssignedOfficerInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutAssignedOfficerInput, LoanUncheckedCreateWithoutAssignedOfficerInput>
  }

  export type LoanCreateManyAssignedOfficerInputEnvelope = {
    data: LoanCreateManyAssignedOfficerInput | LoanCreateManyAssignedOfficerInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutCurrentOfficerInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutCustomersInput
    documents?: CustomerDocumentCreateNestedManyWithoutCustomerInput
    loans?: LoanCreateNestedManyWithoutCustomerInput
    reassignments?: CustomerReassignmentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutCurrentOfficerInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    documents?: CustomerDocumentUncheckedCreateNestedManyWithoutCustomerInput
    loans?: LoanUncheckedCreateNestedManyWithoutCustomerInput
    reassignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutCurrentOfficerInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutCurrentOfficerInput, CustomerUncheckedCreateWithoutCurrentOfficerInput>
  }

  export type CustomerCreateManyCurrentOfficerInputEnvelope = {
    data: CustomerCreateManyCurrentOfficerInput | CustomerCreateManyCurrentOfficerInput[]
    skipDuplicates?: boolean
  }

  export type RepaymentCreateWithoutReceivedByInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    paidAt: Date | string
    method: $Enums.RepaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    loan: LoanCreateNestedOneWithoutRepaymentsInput
    allocations?: RepaymentAllocationCreateNestedManyWithoutRepaymentInput
  }

  export type RepaymentUncheckedCreateWithoutReceivedByInput = {
    id?: string
    loanId: string
    amount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    paidAt: Date | string
    method: $Enums.RepaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    allocations?: RepaymentAllocationUncheckedCreateNestedManyWithoutRepaymentInput
  }

  export type RepaymentCreateOrConnectWithoutReceivedByInput = {
    where: RepaymentWhereUniqueInput
    create: XOR<RepaymentCreateWithoutReceivedByInput, RepaymentUncheckedCreateWithoutReceivedByInput>
  }

  export type RepaymentCreateManyReceivedByInputEnvelope = {
    data: RepaymentCreateManyReceivedByInput | RepaymentCreateManyReceivedByInput[]
    skipDuplicates?: boolean
  }

  export type StaffSessionCreateWithoutUserInput = {
    id?: string
    jwtId: string
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    revokedAt?: Date | string | null
  }

  export type StaffSessionUncheckedCreateWithoutUserInput = {
    id?: string
    jwtId: string
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    revokedAt?: Date | string | null
  }

  export type StaffSessionCreateOrConnectWithoutUserInput = {
    where: StaffSessionWhereUniqueInput
    create: XOR<StaffSessionCreateWithoutUserInput, StaffSessionUncheckedCreateWithoutUserInput>
  }

  export type StaffSessionCreateManyUserInputEnvelope = {
    data: StaffSessionCreateManyUserInput | StaffSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutActorInput = {
    id?: string
    action: string
    entityName: string
    entityId: string
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutActorInput = {
    id?: string
    action: string
    entityName: string
    entityId: string
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutActorInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput>
  }

  export type AuditLogCreateManyActorInputEnvelope = {
    data: AuditLogCreateManyActorInput | AuditLogCreateManyActorInput[]
    skipDuplicates?: boolean
  }

  export type CustomerDocumentCreateWithoutUploadedByInput = {
    id?: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
    customer: CustomerCreateNestedOneWithoutDocumentsInput
    documentType: DocumentTypeCreateNestedOneWithoutCustomerDocsInput
  }

  export type CustomerDocumentUncheckedCreateWithoutUploadedByInput = {
    id?: string
    customerId: string
    documentTypeId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type CustomerDocumentCreateOrConnectWithoutUploadedByInput = {
    where: CustomerDocumentWhereUniqueInput
    create: XOR<CustomerDocumentCreateWithoutUploadedByInput, CustomerDocumentUncheckedCreateWithoutUploadedByInput>
  }

  export type CustomerDocumentCreateManyUploadedByInputEnvelope = {
    data: CustomerDocumentCreateManyUploadedByInput | CustomerDocumentCreateManyUploadedByInput[]
    skipDuplicates?: boolean
  }

  export type LoanDocumentCreateWithoutUploadedByInput = {
    id?: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
    loan: LoanCreateNestedOneWithoutDocumentsInput
    documentType: DocumentTypeCreateNestedOneWithoutLoanDocsInput
  }

  export type LoanDocumentUncheckedCreateWithoutUploadedByInput = {
    id?: string
    loanId: string
    documentTypeId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanDocumentCreateOrConnectWithoutUploadedByInput = {
    where: LoanDocumentWhereUniqueInput
    create: XOR<LoanDocumentCreateWithoutUploadedByInput, LoanDocumentUncheckedCreateWithoutUploadedByInput>
  }

  export type LoanDocumentCreateManyUploadedByInputEnvelope = {
    data: LoanDocumentCreateManyUploadedByInput | LoanDocumentCreateManyUploadedByInput[]
    skipDuplicates?: boolean
  }

  export type LoanAssignmentHistoryCreateWithoutOldOfficerInput = {
    id?: string
    reason?: string | null
    changedAt?: Date | string
    loan: LoanCreateNestedOneWithoutAssignmentHistoryInput
    newOfficer: UserCreateNestedOneWithoutNewLoanAssignmentsInput
    oldBranch?: BranchCreateNestedOneWithoutOldLoanBranchesInput
    newBranch?: BranchCreateNestedOneWithoutNewLoanBranchesInput
    changedBy: UserCreateNestedOneWithoutChangedLoanAssignmentsInput
  }

  export type LoanAssignmentHistoryUncheckedCreateWithoutOldOfficerInput = {
    id?: string
    loanId: string
    newOfficerId: string
    oldBranchId?: string | null
    newBranchId?: string | null
    changedByUserId: string
    reason?: string | null
    changedAt?: Date | string
  }

  export type LoanAssignmentHistoryCreateOrConnectWithoutOldOfficerInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    create: XOR<LoanAssignmentHistoryCreateWithoutOldOfficerInput, LoanAssignmentHistoryUncheckedCreateWithoutOldOfficerInput>
  }

  export type LoanAssignmentHistoryCreateManyOldOfficerInputEnvelope = {
    data: LoanAssignmentHistoryCreateManyOldOfficerInput | LoanAssignmentHistoryCreateManyOldOfficerInput[]
    skipDuplicates?: boolean
  }

  export type LoanAssignmentHistoryCreateWithoutNewOfficerInput = {
    id?: string
    reason?: string | null
    changedAt?: Date | string
    loan: LoanCreateNestedOneWithoutAssignmentHistoryInput
    oldOfficer?: UserCreateNestedOneWithoutOldLoanAssignmentsInput
    oldBranch?: BranchCreateNestedOneWithoutOldLoanBranchesInput
    newBranch?: BranchCreateNestedOneWithoutNewLoanBranchesInput
    changedBy: UserCreateNestedOneWithoutChangedLoanAssignmentsInput
  }

  export type LoanAssignmentHistoryUncheckedCreateWithoutNewOfficerInput = {
    id?: string
    loanId: string
    oldOfficerId?: string | null
    oldBranchId?: string | null
    newBranchId?: string | null
    changedByUserId: string
    reason?: string | null
    changedAt?: Date | string
  }

  export type LoanAssignmentHistoryCreateOrConnectWithoutNewOfficerInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    create: XOR<LoanAssignmentHistoryCreateWithoutNewOfficerInput, LoanAssignmentHistoryUncheckedCreateWithoutNewOfficerInput>
  }

  export type LoanAssignmentHistoryCreateManyNewOfficerInputEnvelope = {
    data: LoanAssignmentHistoryCreateManyNewOfficerInput | LoanAssignmentHistoryCreateManyNewOfficerInput[]
    skipDuplicates?: boolean
  }

  export type LoanAssignmentHistoryCreateWithoutChangedByInput = {
    id?: string
    reason?: string | null
    changedAt?: Date | string
    loan: LoanCreateNestedOneWithoutAssignmentHistoryInput
    oldOfficer?: UserCreateNestedOneWithoutOldLoanAssignmentsInput
    newOfficer: UserCreateNestedOneWithoutNewLoanAssignmentsInput
    oldBranch?: BranchCreateNestedOneWithoutOldLoanBranchesInput
    newBranch?: BranchCreateNestedOneWithoutNewLoanBranchesInput
  }

  export type LoanAssignmentHistoryUncheckedCreateWithoutChangedByInput = {
    id?: string
    loanId: string
    oldOfficerId?: string | null
    newOfficerId: string
    oldBranchId?: string | null
    newBranchId?: string | null
    reason?: string | null
    changedAt?: Date | string
  }

  export type LoanAssignmentHistoryCreateOrConnectWithoutChangedByInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    create: XOR<LoanAssignmentHistoryCreateWithoutChangedByInput, LoanAssignmentHistoryUncheckedCreateWithoutChangedByInput>
  }

  export type LoanAssignmentHistoryCreateManyChangedByInputEnvelope = {
    data: LoanAssignmentHistoryCreateManyChangedByInput | LoanAssignmentHistoryCreateManyChangedByInput[]
    skipDuplicates?: boolean
  }

  export type CustomerReassignmentCreateWithoutOldOfficerInput = {
    id?: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutReassignmentsInput
    oldBranch?: BranchCreateNestedOneWithoutOldCustomerBranchesInput
    newBranch: BranchCreateNestedOneWithoutNewCustomerBranchesInput
    newOfficer?: UserCreateNestedOneWithoutNewCustomerAssignmentsInput
    changedBy: UserCreateNestedOneWithoutChangedCustomerAssignmentsInput
  }

  export type CustomerReassignmentUncheckedCreateWithoutOldOfficerInput = {
    id?: string
    customerId: string
    oldBranchId?: string | null
    newBranchId: string
    newOfficerId?: string | null
    changedByUserId: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
  }

  export type CustomerReassignmentCreateOrConnectWithoutOldOfficerInput = {
    where: CustomerReassignmentWhereUniqueInput
    create: XOR<CustomerReassignmentCreateWithoutOldOfficerInput, CustomerReassignmentUncheckedCreateWithoutOldOfficerInput>
  }

  export type CustomerReassignmentCreateManyOldOfficerInputEnvelope = {
    data: CustomerReassignmentCreateManyOldOfficerInput | CustomerReassignmentCreateManyOldOfficerInput[]
    skipDuplicates?: boolean
  }

  export type CustomerReassignmentCreateWithoutNewOfficerInput = {
    id?: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutReassignmentsInput
    oldBranch?: BranchCreateNestedOneWithoutOldCustomerBranchesInput
    newBranch: BranchCreateNestedOneWithoutNewCustomerBranchesInput
    oldOfficer?: UserCreateNestedOneWithoutOldCustomerAssignmentsInput
    changedBy: UserCreateNestedOneWithoutChangedCustomerAssignmentsInput
  }

  export type CustomerReassignmentUncheckedCreateWithoutNewOfficerInput = {
    id?: string
    customerId: string
    oldBranchId?: string | null
    newBranchId: string
    oldOfficerId?: string | null
    changedByUserId: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
  }

  export type CustomerReassignmentCreateOrConnectWithoutNewOfficerInput = {
    where: CustomerReassignmentWhereUniqueInput
    create: XOR<CustomerReassignmentCreateWithoutNewOfficerInput, CustomerReassignmentUncheckedCreateWithoutNewOfficerInput>
  }

  export type CustomerReassignmentCreateManyNewOfficerInputEnvelope = {
    data: CustomerReassignmentCreateManyNewOfficerInput | CustomerReassignmentCreateManyNewOfficerInput[]
    skipDuplicates?: boolean
  }

  export type CustomerReassignmentCreateWithoutChangedByInput = {
    id?: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutReassignmentsInput
    oldBranch?: BranchCreateNestedOneWithoutOldCustomerBranchesInput
    newBranch: BranchCreateNestedOneWithoutNewCustomerBranchesInput
    oldOfficer?: UserCreateNestedOneWithoutOldCustomerAssignmentsInput
    newOfficer?: UserCreateNestedOneWithoutNewCustomerAssignmentsInput
  }

  export type CustomerReassignmentUncheckedCreateWithoutChangedByInput = {
    id?: string
    customerId: string
    oldBranchId?: string | null
    newBranchId: string
    oldOfficerId?: string | null
    newOfficerId?: string | null
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
  }

  export type CustomerReassignmentCreateOrConnectWithoutChangedByInput = {
    where: CustomerReassignmentWhereUniqueInput
    create: XOR<CustomerReassignmentCreateWithoutChangedByInput, CustomerReassignmentUncheckedCreateWithoutChangedByInput>
  }

  export type CustomerReassignmentCreateManyChangedByInputEnvelope = {
    data: CustomerReassignmentCreateManyChangedByInput | CustomerReassignmentCreateManyChangedByInput[]
    skipDuplicates?: boolean
  }

  export type BranchUpsertWithoutUsersInput = {
    update: XOR<BranchUpdateWithoutUsersInput, BranchUncheckedUpdateWithoutUsersInput>
    create: XOR<BranchCreateWithoutUsersInput, BranchUncheckedCreateWithoutUsersInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutUsersInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutUsersInput, BranchUncheckedUpdateWithoutUsersInput>
  }

  export type BranchUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manager?: UserUpdateOneWithoutManagedBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    loans?: LoanUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutOldBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutNewBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUpdateManyWithoutOldBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUpdateManyWithoutNewBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutOldBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutNewBranchNestedInput
  }

  export type BranchUpsertWithoutManagerInput = {
    update: XOR<BranchUpdateWithoutManagerInput, BranchUncheckedUpdateWithoutManagerInput>
    create: XOR<BranchCreateWithoutManagerInput, BranchUncheckedCreateWithoutManagerInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutManagerInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutManagerInput, BranchUncheckedUpdateWithoutManagerInput>
  }

  export type BranchUpdateWithoutManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    loans?: LoanUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutOldBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutNewBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUpdateManyWithoutOldBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUpdateManyWithoutNewBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutOldBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutNewBranchNestedInput
  }

  export type LoanUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: LoanWhereUniqueInput
    update: XOR<LoanUpdateWithoutCreatedByInput, LoanUncheckedUpdateWithoutCreatedByInput>
    create: XOR<LoanCreateWithoutCreatedByInput, LoanUncheckedCreateWithoutCreatedByInput>
  }

  export type LoanUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: LoanWhereUniqueInput
    data: XOR<LoanUpdateWithoutCreatedByInput, LoanUncheckedUpdateWithoutCreatedByInput>
  }

  export type LoanUpdateManyWithWhereWithoutCreatedByInput = {
    where: LoanScalarWhereInput
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type LoanUpsertWithWhereUniqueWithoutAssignedOfficerInput = {
    where: LoanWhereUniqueInput
    update: XOR<LoanUpdateWithoutAssignedOfficerInput, LoanUncheckedUpdateWithoutAssignedOfficerInput>
    create: XOR<LoanCreateWithoutAssignedOfficerInput, LoanUncheckedCreateWithoutAssignedOfficerInput>
  }

  export type LoanUpdateWithWhereUniqueWithoutAssignedOfficerInput = {
    where: LoanWhereUniqueInput
    data: XOR<LoanUpdateWithoutAssignedOfficerInput, LoanUncheckedUpdateWithoutAssignedOfficerInput>
  }

  export type LoanUpdateManyWithWhereWithoutAssignedOfficerInput = {
    where: LoanScalarWhereInput
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyWithoutAssignedOfficerInput>
  }

  export type CustomerUpsertWithWhereUniqueWithoutCurrentOfficerInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutCurrentOfficerInput, CustomerUncheckedUpdateWithoutCurrentOfficerInput>
    create: XOR<CustomerCreateWithoutCurrentOfficerInput, CustomerUncheckedCreateWithoutCurrentOfficerInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutCurrentOfficerInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutCurrentOfficerInput, CustomerUncheckedUpdateWithoutCurrentOfficerInput>
  }

  export type CustomerUpdateManyWithWhereWithoutCurrentOfficerInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutCurrentOfficerInput>
  }

  export type RepaymentUpsertWithWhereUniqueWithoutReceivedByInput = {
    where: RepaymentWhereUniqueInput
    update: XOR<RepaymentUpdateWithoutReceivedByInput, RepaymentUncheckedUpdateWithoutReceivedByInput>
    create: XOR<RepaymentCreateWithoutReceivedByInput, RepaymentUncheckedCreateWithoutReceivedByInput>
  }

  export type RepaymentUpdateWithWhereUniqueWithoutReceivedByInput = {
    where: RepaymentWhereUniqueInput
    data: XOR<RepaymentUpdateWithoutReceivedByInput, RepaymentUncheckedUpdateWithoutReceivedByInput>
  }

  export type RepaymentUpdateManyWithWhereWithoutReceivedByInput = {
    where: RepaymentScalarWhereInput
    data: XOR<RepaymentUpdateManyMutationInput, RepaymentUncheckedUpdateManyWithoutReceivedByInput>
  }

  export type RepaymentScalarWhereInput = {
    AND?: RepaymentScalarWhereInput | RepaymentScalarWhereInput[]
    OR?: RepaymentScalarWhereInput[]
    NOT?: RepaymentScalarWhereInput | RepaymentScalarWhereInput[]
    id?: StringFilter<"Repayment"> | string
    loanId?: StringFilter<"Repayment"> | string
    receivedByUserId?: StringFilter<"Repayment"> | string
    amount?: DecimalFilter<"Repayment"> | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFilter<"Repayment"> | string
    paidAt?: DateTimeFilter<"Repayment"> | Date | string
    method?: EnumRepaymentMethodFilter<"Repayment"> | $Enums.RepaymentMethod
    reference?: StringNullableFilter<"Repayment"> | string | null
    notes?: StringNullableFilter<"Repayment"> | string | null
    createdAt?: DateTimeFilter<"Repayment"> | Date | string
    updatedAt?: DateTimeFilter<"Repayment"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Repayment"> | Date | string | null
  }

  export type StaffSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: StaffSessionWhereUniqueInput
    update: XOR<StaffSessionUpdateWithoutUserInput, StaffSessionUncheckedUpdateWithoutUserInput>
    create: XOR<StaffSessionCreateWithoutUserInput, StaffSessionUncheckedCreateWithoutUserInput>
  }

  export type StaffSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: StaffSessionWhereUniqueInput
    data: XOR<StaffSessionUpdateWithoutUserInput, StaffSessionUncheckedUpdateWithoutUserInput>
  }

  export type StaffSessionUpdateManyWithWhereWithoutUserInput = {
    where: StaffSessionScalarWhereInput
    data: XOR<StaffSessionUpdateManyMutationInput, StaffSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type StaffSessionScalarWhereInput = {
    AND?: StaffSessionScalarWhereInput | StaffSessionScalarWhereInput[]
    OR?: StaffSessionScalarWhereInput[]
    NOT?: StaffSessionScalarWhereInput | StaffSessionScalarWhereInput[]
    id?: StringFilter<"StaffSession"> | string
    userId?: StringFilter<"StaffSession"> | string
    jwtId?: StringFilter<"StaffSession"> | string
    userAgent?: StringNullableFilter<"StaffSession"> | string | null
    ipAddress?: StringNullableFilter<"StaffSession"> | string | null
    createdAt?: DateTimeFilter<"StaffSession"> | Date | string
    expiresAt?: DateTimeFilter<"StaffSession"> | Date | string
    revokedAt?: DateTimeNullableFilter<"StaffSession"> | Date | string | null
  }

  export type AuditLogUpsertWithWhereUniqueWithoutActorInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutActorInput, AuditLogUncheckedUpdateWithoutActorInput>
    create: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutActorInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutActorInput, AuditLogUncheckedUpdateWithoutActorInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutActorInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutActorInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    actorUserId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entityName?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    before?: JsonNullableFilter<"AuditLog">
    after?: JsonNullableFilter<"AuditLog">
    metadata?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type CustomerDocumentUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: CustomerDocumentWhereUniqueInput
    update: XOR<CustomerDocumentUpdateWithoutUploadedByInput, CustomerDocumentUncheckedUpdateWithoutUploadedByInput>
    create: XOR<CustomerDocumentCreateWithoutUploadedByInput, CustomerDocumentUncheckedCreateWithoutUploadedByInput>
  }

  export type CustomerDocumentUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: CustomerDocumentWhereUniqueInput
    data: XOR<CustomerDocumentUpdateWithoutUploadedByInput, CustomerDocumentUncheckedUpdateWithoutUploadedByInput>
  }

  export type CustomerDocumentUpdateManyWithWhereWithoutUploadedByInput = {
    where: CustomerDocumentScalarWhereInput
    data: XOR<CustomerDocumentUpdateManyMutationInput, CustomerDocumentUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type CustomerDocumentScalarWhereInput = {
    AND?: CustomerDocumentScalarWhereInput | CustomerDocumentScalarWhereInput[]
    OR?: CustomerDocumentScalarWhereInput[]
    NOT?: CustomerDocumentScalarWhereInput | CustomerDocumentScalarWhereInput[]
    id?: StringFilter<"CustomerDocument"> | string
    customerId?: StringFilter<"CustomerDocument"> | string
    documentTypeId?: StringFilter<"CustomerDocument"> | string
    fileUrl?: StringFilter<"CustomerDocument"> | string
    issuingAuthority?: StringNullableFilter<"CustomerDocument"> | string | null
    issueDate?: DateTimeNullableFilter<"CustomerDocument"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"CustomerDocument"> | Date | string | null
    verified?: BoolFilter<"CustomerDocument"> | boolean
    verificationNotes?: StringNullableFilter<"CustomerDocument"> | string | null
    uploadedByUserId?: StringFilter<"CustomerDocument"> | string
    uploadedAt?: DateTimeFilter<"CustomerDocument"> | Date | string
    deletedAt?: DateTimeNullableFilter<"CustomerDocument"> | Date | string | null
  }

  export type LoanDocumentUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: LoanDocumentWhereUniqueInput
    update: XOR<LoanDocumentUpdateWithoutUploadedByInput, LoanDocumentUncheckedUpdateWithoutUploadedByInput>
    create: XOR<LoanDocumentCreateWithoutUploadedByInput, LoanDocumentUncheckedCreateWithoutUploadedByInput>
  }

  export type LoanDocumentUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: LoanDocumentWhereUniqueInput
    data: XOR<LoanDocumentUpdateWithoutUploadedByInput, LoanDocumentUncheckedUpdateWithoutUploadedByInput>
  }

  export type LoanDocumentUpdateManyWithWhereWithoutUploadedByInput = {
    where: LoanDocumentScalarWhereInput
    data: XOR<LoanDocumentUpdateManyMutationInput, LoanDocumentUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type LoanDocumentScalarWhereInput = {
    AND?: LoanDocumentScalarWhereInput | LoanDocumentScalarWhereInput[]
    OR?: LoanDocumentScalarWhereInput[]
    NOT?: LoanDocumentScalarWhereInput | LoanDocumentScalarWhereInput[]
    id?: StringFilter<"LoanDocument"> | string
    loanId?: StringFilter<"LoanDocument"> | string
    documentTypeId?: StringFilter<"LoanDocument"> | string
    fileUrl?: StringFilter<"LoanDocument"> | string
    issuingAuthority?: StringNullableFilter<"LoanDocument"> | string | null
    issueDate?: DateTimeNullableFilter<"LoanDocument"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"LoanDocument"> | Date | string | null
    verified?: BoolFilter<"LoanDocument"> | boolean
    verificationNotes?: StringNullableFilter<"LoanDocument"> | string | null
    uploadedByUserId?: StringFilter<"LoanDocument"> | string
    uploadedAt?: DateTimeFilter<"LoanDocument"> | Date | string
    deletedAt?: DateTimeNullableFilter<"LoanDocument"> | Date | string | null
  }

  export type LoanAssignmentHistoryUpsertWithWhereUniqueWithoutOldOfficerInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    update: XOR<LoanAssignmentHistoryUpdateWithoutOldOfficerInput, LoanAssignmentHistoryUncheckedUpdateWithoutOldOfficerInput>
    create: XOR<LoanAssignmentHistoryCreateWithoutOldOfficerInput, LoanAssignmentHistoryUncheckedCreateWithoutOldOfficerInput>
  }

  export type LoanAssignmentHistoryUpdateWithWhereUniqueWithoutOldOfficerInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    data: XOR<LoanAssignmentHistoryUpdateWithoutOldOfficerInput, LoanAssignmentHistoryUncheckedUpdateWithoutOldOfficerInput>
  }

  export type LoanAssignmentHistoryUpdateManyWithWhereWithoutOldOfficerInput = {
    where: LoanAssignmentHistoryScalarWhereInput
    data: XOR<LoanAssignmentHistoryUpdateManyMutationInput, LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerInput>
  }

  export type LoanAssignmentHistoryUpsertWithWhereUniqueWithoutNewOfficerInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    update: XOR<LoanAssignmentHistoryUpdateWithoutNewOfficerInput, LoanAssignmentHistoryUncheckedUpdateWithoutNewOfficerInput>
    create: XOR<LoanAssignmentHistoryCreateWithoutNewOfficerInput, LoanAssignmentHistoryUncheckedCreateWithoutNewOfficerInput>
  }

  export type LoanAssignmentHistoryUpdateWithWhereUniqueWithoutNewOfficerInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    data: XOR<LoanAssignmentHistoryUpdateWithoutNewOfficerInput, LoanAssignmentHistoryUncheckedUpdateWithoutNewOfficerInput>
  }

  export type LoanAssignmentHistoryUpdateManyWithWhereWithoutNewOfficerInput = {
    where: LoanAssignmentHistoryScalarWhereInput
    data: XOR<LoanAssignmentHistoryUpdateManyMutationInput, LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerInput>
  }

  export type LoanAssignmentHistoryUpsertWithWhereUniqueWithoutChangedByInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    update: XOR<LoanAssignmentHistoryUpdateWithoutChangedByInput, LoanAssignmentHistoryUncheckedUpdateWithoutChangedByInput>
    create: XOR<LoanAssignmentHistoryCreateWithoutChangedByInput, LoanAssignmentHistoryUncheckedCreateWithoutChangedByInput>
  }

  export type LoanAssignmentHistoryUpdateWithWhereUniqueWithoutChangedByInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    data: XOR<LoanAssignmentHistoryUpdateWithoutChangedByInput, LoanAssignmentHistoryUncheckedUpdateWithoutChangedByInput>
  }

  export type LoanAssignmentHistoryUpdateManyWithWhereWithoutChangedByInput = {
    where: LoanAssignmentHistoryScalarWhereInput
    data: XOR<LoanAssignmentHistoryUpdateManyMutationInput, LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByInput>
  }

  export type CustomerReassignmentUpsertWithWhereUniqueWithoutOldOfficerInput = {
    where: CustomerReassignmentWhereUniqueInput
    update: XOR<CustomerReassignmentUpdateWithoutOldOfficerInput, CustomerReassignmentUncheckedUpdateWithoutOldOfficerInput>
    create: XOR<CustomerReassignmentCreateWithoutOldOfficerInput, CustomerReassignmentUncheckedCreateWithoutOldOfficerInput>
  }

  export type CustomerReassignmentUpdateWithWhereUniqueWithoutOldOfficerInput = {
    where: CustomerReassignmentWhereUniqueInput
    data: XOR<CustomerReassignmentUpdateWithoutOldOfficerInput, CustomerReassignmentUncheckedUpdateWithoutOldOfficerInput>
  }

  export type CustomerReassignmentUpdateManyWithWhereWithoutOldOfficerInput = {
    where: CustomerReassignmentScalarWhereInput
    data: XOR<CustomerReassignmentUpdateManyMutationInput, CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerInput>
  }

  export type CustomerReassignmentUpsertWithWhereUniqueWithoutNewOfficerInput = {
    where: CustomerReassignmentWhereUniqueInput
    update: XOR<CustomerReassignmentUpdateWithoutNewOfficerInput, CustomerReassignmentUncheckedUpdateWithoutNewOfficerInput>
    create: XOR<CustomerReassignmentCreateWithoutNewOfficerInput, CustomerReassignmentUncheckedCreateWithoutNewOfficerInput>
  }

  export type CustomerReassignmentUpdateWithWhereUniqueWithoutNewOfficerInput = {
    where: CustomerReassignmentWhereUniqueInput
    data: XOR<CustomerReassignmentUpdateWithoutNewOfficerInput, CustomerReassignmentUncheckedUpdateWithoutNewOfficerInput>
  }

  export type CustomerReassignmentUpdateManyWithWhereWithoutNewOfficerInput = {
    where: CustomerReassignmentScalarWhereInput
    data: XOR<CustomerReassignmentUpdateManyMutationInput, CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerInput>
  }

  export type CustomerReassignmentUpsertWithWhereUniqueWithoutChangedByInput = {
    where: CustomerReassignmentWhereUniqueInput
    update: XOR<CustomerReassignmentUpdateWithoutChangedByInput, CustomerReassignmentUncheckedUpdateWithoutChangedByInput>
    create: XOR<CustomerReassignmentCreateWithoutChangedByInput, CustomerReassignmentUncheckedCreateWithoutChangedByInput>
  }

  export type CustomerReassignmentUpdateWithWhereUniqueWithoutChangedByInput = {
    where: CustomerReassignmentWhereUniqueInput
    data: XOR<CustomerReassignmentUpdateWithoutChangedByInput, CustomerReassignmentUncheckedUpdateWithoutChangedByInput>
  }

  export type CustomerReassignmentUpdateManyWithWhereWithoutChangedByInput = {
    where: CustomerReassignmentScalarWhereInput
    data: XOR<CustomerReassignmentUpdateManyMutationInput, CustomerReassignmentUncheckedUpdateManyWithoutChangedByInput>
  }

  export type BranchCreateWithoutCustomersInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    manager?: UserCreateNestedOneWithoutManagedBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    loans?: LoanCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutOldBranchInput
    newLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutNewBranchInput
    oldCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutOldBranchInput
    newCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutNewBranchInput
  }

  export type BranchUncheckedCreateWithoutCustomersInput = {
    id?: string
    name: string
    code: string
    managerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldBranchInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewBranchInput
    oldCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldBranchInput
    newCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewBranchInput
  }

  export type BranchCreateOrConnectWithoutCustomersInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutCustomersInput, BranchUncheckedCreateWithoutCustomersInput>
  }

  export type UserCreateWithoutCurrentCustomersInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutCurrentCustomersInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutCurrentCustomersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCurrentCustomersInput, UserUncheckedCreateWithoutCurrentCustomersInput>
  }

  export type CustomerDocumentCreateWithoutCustomerInput = {
    id?: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
    documentType: DocumentTypeCreateNestedOneWithoutCustomerDocsInput
    uploadedBy: UserCreateNestedOneWithoutUploadedCustDocsInput
  }

  export type CustomerDocumentUncheckedCreateWithoutCustomerInput = {
    id?: string
    documentTypeId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedByUserId: string
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type CustomerDocumentCreateOrConnectWithoutCustomerInput = {
    where: CustomerDocumentWhereUniqueInput
    create: XOR<CustomerDocumentCreateWithoutCustomerInput, CustomerDocumentUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerDocumentCreateManyCustomerInputEnvelope = {
    data: CustomerDocumentCreateManyCustomerInput | CustomerDocumentCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type LoanCreateWithoutCustomerInput = {
    id?: string
    loanNumber: string
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutLoansInput
    loanType?: LoanTypeCreateNestedOneWithoutLoansInput
    createdBy: UserCreateNestedOneWithoutCreatedLoansInput
    assignedOfficer: UserCreateNestedOneWithoutAssignedLoansInput
    scheduleItems?: RepaymentScheduleItemCreateNestedManyWithoutLoanInput
    repayments?: RepaymentCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutCustomerInput = {
    id?: string
    loanNumber: string
    branchId: string
    loanTypeId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    createdByUserId: string
    assignedOfficerId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedCreateNestedManyWithoutLoanInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentUncheckedCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutCustomerInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutCustomerInput, LoanUncheckedCreateWithoutCustomerInput>
  }

  export type LoanCreateManyCustomerInputEnvelope = {
    data: LoanCreateManyCustomerInput | LoanCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type CustomerReassignmentCreateWithoutCustomerInput = {
    id?: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
    oldBranch?: BranchCreateNestedOneWithoutOldCustomerBranchesInput
    newBranch: BranchCreateNestedOneWithoutNewCustomerBranchesInput
    oldOfficer?: UserCreateNestedOneWithoutOldCustomerAssignmentsInput
    newOfficer?: UserCreateNestedOneWithoutNewCustomerAssignmentsInput
    changedBy: UserCreateNestedOneWithoutChangedCustomerAssignmentsInput
  }

  export type CustomerReassignmentUncheckedCreateWithoutCustomerInput = {
    id?: string
    oldBranchId?: string | null
    newBranchId: string
    oldOfficerId?: string | null
    newOfficerId?: string | null
    changedByUserId: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
  }

  export type CustomerReassignmentCreateOrConnectWithoutCustomerInput = {
    where: CustomerReassignmentWhereUniqueInput
    create: XOR<CustomerReassignmentCreateWithoutCustomerInput, CustomerReassignmentUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerReassignmentCreateManyCustomerInputEnvelope = {
    data: CustomerReassignmentCreateManyCustomerInput | CustomerReassignmentCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type BranchUpsertWithoutCustomersInput = {
    update: XOR<BranchUpdateWithoutCustomersInput, BranchUncheckedUpdateWithoutCustomersInput>
    create: XOR<BranchCreateWithoutCustomersInput, BranchUncheckedCreateWithoutCustomersInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutCustomersInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutCustomersInput, BranchUncheckedUpdateWithoutCustomersInput>
  }

  export type BranchUpdateWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manager?: UserUpdateOneWithoutManagedBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    loans?: LoanUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutOldBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutNewBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUpdateManyWithoutOldBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUpdateManyWithoutNewBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutOldBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutNewBranchNestedInput
  }

  export type UserUpsertWithoutCurrentCustomersInput = {
    update: XOR<UserUpdateWithoutCurrentCustomersInput, UserUncheckedUpdateWithoutCurrentCustomersInput>
    create: XOR<UserCreateWithoutCurrentCustomersInput, UserUncheckedCreateWithoutCurrentCustomersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCurrentCustomersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCurrentCustomersInput, UserUncheckedUpdateWithoutCurrentCustomersInput>
  }

  export type UserUpdateWithoutCurrentCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCurrentCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type CustomerDocumentUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CustomerDocumentWhereUniqueInput
    update: XOR<CustomerDocumentUpdateWithoutCustomerInput, CustomerDocumentUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerDocumentCreateWithoutCustomerInput, CustomerDocumentUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerDocumentUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CustomerDocumentWhereUniqueInput
    data: XOR<CustomerDocumentUpdateWithoutCustomerInput, CustomerDocumentUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerDocumentUpdateManyWithWhereWithoutCustomerInput = {
    where: CustomerDocumentScalarWhereInput
    data: XOR<CustomerDocumentUpdateManyMutationInput, CustomerDocumentUncheckedUpdateManyWithoutCustomerInput>
  }

  export type LoanUpsertWithWhereUniqueWithoutCustomerInput = {
    where: LoanWhereUniqueInput
    update: XOR<LoanUpdateWithoutCustomerInput, LoanUncheckedUpdateWithoutCustomerInput>
    create: XOR<LoanCreateWithoutCustomerInput, LoanUncheckedCreateWithoutCustomerInput>
  }

  export type LoanUpdateWithWhereUniqueWithoutCustomerInput = {
    where: LoanWhereUniqueInput
    data: XOR<LoanUpdateWithoutCustomerInput, LoanUncheckedUpdateWithoutCustomerInput>
  }

  export type LoanUpdateManyWithWhereWithoutCustomerInput = {
    where: LoanScalarWhereInput
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerReassignmentUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CustomerReassignmentWhereUniqueInput
    update: XOR<CustomerReassignmentUpdateWithoutCustomerInput, CustomerReassignmentUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerReassignmentCreateWithoutCustomerInput, CustomerReassignmentUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerReassignmentUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CustomerReassignmentWhereUniqueInput
    data: XOR<CustomerReassignmentUpdateWithoutCustomerInput, CustomerReassignmentUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerReassignmentUpdateManyWithWhereWithoutCustomerInput = {
    where: CustomerReassignmentScalarWhereInput
    data: XOR<CustomerReassignmentUpdateManyMutationInput, CustomerReassignmentUncheckedUpdateManyWithoutCustomerInput>
  }

  export type LoanCreateWithoutLoanTypeInput = {
    id?: string
    loanNumber: string
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    customer: CustomerCreateNestedOneWithoutLoansInput
    branch: BranchCreateNestedOneWithoutLoansInput
    createdBy: UserCreateNestedOneWithoutCreatedLoansInput
    assignedOfficer: UserCreateNestedOneWithoutAssignedLoansInput
    scheduleItems?: RepaymentScheduleItemCreateNestedManyWithoutLoanInput
    repayments?: RepaymentCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutLoanTypeInput = {
    id?: string
    loanNumber: string
    customerId: string
    branchId: string
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    createdByUserId: string
    assignedOfficerId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedCreateNestedManyWithoutLoanInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentUncheckedCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutLoanTypeInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutLoanTypeInput, LoanUncheckedCreateWithoutLoanTypeInput>
  }

  export type LoanCreateManyLoanTypeInputEnvelope = {
    data: LoanCreateManyLoanTypeInput | LoanCreateManyLoanTypeInput[]
    skipDuplicates?: boolean
  }

  export type LoanUpsertWithWhereUniqueWithoutLoanTypeInput = {
    where: LoanWhereUniqueInput
    update: XOR<LoanUpdateWithoutLoanTypeInput, LoanUncheckedUpdateWithoutLoanTypeInput>
    create: XOR<LoanCreateWithoutLoanTypeInput, LoanUncheckedCreateWithoutLoanTypeInput>
  }

  export type LoanUpdateWithWhereUniqueWithoutLoanTypeInput = {
    where: LoanWhereUniqueInput
    data: XOR<LoanUpdateWithoutLoanTypeInput, LoanUncheckedUpdateWithoutLoanTypeInput>
  }

  export type LoanUpdateManyWithWhereWithoutLoanTypeInput = {
    where: LoanScalarWhereInput
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyWithoutLoanTypeInput>
  }

  export type CustomerCreateWithoutLoansInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutCustomersInput
    currentOfficer?: UserCreateNestedOneWithoutCurrentCustomersInput
    documents?: CustomerDocumentCreateNestedManyWithoutCustomerInput
    reassignments?: CustomerReassignmentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutLoansInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    branchId: string
    currentOfficerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    documents?: CustomerDocumentUncheckedCreateNestedManyWithoutCustomerInput
    reassignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutLoansInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutLoansInput, CustomerUncheckedCreateWithoutLoansInput>
  }

  export type BranchCreateWithoutLoansInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    manager?: UserCreateNestedOneWithoutManagedBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutOldBranchInput
    newLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutNewBranchInput
    oldCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutOldBranchInput
    newCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutNewBranchInput
  }

  export type BranchUncheckedCreateWithoutLoansInput = {
    id?: string
    name: string
    code: string
    managerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldBranchInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewBranchInput
    oldCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldBranchInput
    newCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewBranchInput
  }

  export type BranchCreateOrConnectWithoutLoansInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutLoansInput, BranchUncheckedCreateWithoutLoansInput>
  }

  export type LoanTypeCreateWithoutLoansInput = {
    id?: string
    name: string
    description?: string | null
    minAmount: Decimal | DecimalJsLike | number | string
    maxAmount: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanTypeUncheckedCreateWithoutLoansInput = {
    id?: string
    name: string
    description?: string | null
    minAmount: Decimal | DecimalJsLike | number | string
    maxAmount: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanTypeCreateOrConnectWithoutLoansInput = {
    where: LoanTypeWhereUniqueInput
    create: XOR<LoanTypeCreateWithoutLoansInput, LoanTypeUncheckedCreateWithoutLoansInput>
  }

  export type UserCreateWithoutCreatedLoansInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutCreatedLoansInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutCreatedLoansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedLoansInput, UserUncheckedCreateWithoutCreatedLoansInput>
  }

  export type UserCreateWithoutAssignedLoansInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutAssignedLoansInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutAssignedLoansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedLoansInput, UserUncheckedCreateWithoutAssignedLoansInput>
  }

  export type RepaymentScheduleItemCreateWithoutLoanInput = {
    id?: string
    sequence: number
    dueDate: Date | string
    principalDue: Decimal | DecimalJsLike | number | string
    interestDue?: Decimal | DecimalJsLike | number | string
    feeDue?: Decimal | DecimalJsLike | number | string
    totalDue: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    status?: $Enums.ScheduleStatus
    closedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    allocations?: RepaymentAllocationCreateNestedManyWithoutScheduleItemInput
  }

  export type RepaymentScheduleItemUncheckedCreateWithoutLoanInput = {
    id?: string
    sequence: number
    dueDate: Date | string
    principalDue: Decimal | DecimalJsLike | number | string
    interestDue?: Decimal | DecimalJsLike | number | string
    feeDue?: Decimal | DecimalJsLike | number | string
    totalDue: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    status?: $Enums.ScheduleStatus
    closedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    allocations?: RepaymentAllocationUncheckedCreateNestedManyWithoutScheduleItemInput
  }

  export type RepaymentScheduleItemCreateOrConnectWithoutLoanInput = {
    where: RepaymentScheduleItemWhereUniqueInput
    create: XOR<RepaymentScheduleItemCreateWithoutLoanInput, RepaymentScheduleItemUncheckedCreateWithoutLoanInput>
  }

  export type RepaymentScheduleItemCreateManyLoanInputEnvelope = {
    data: RepaymentScheduleItemCreateManyLoanInput | RepaymentScheduleItemCreateManyLoanInput[]
    skipDuplicates?: boolean
  }

  export type RepaymentCreateWithoutLoanInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    paidAt: Date | string
    method: $Enums.RepaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    receivedBy: UserCreateNestedOneWithoutRepaymentsInput
    allocations?: RepaymentAllocationCreateNestedManyWithoutRepaymentInput
  }

  export type RepaymentUncheckedCreateWithoutLoanInput = {
    id?: string
    receivedByUserId: string
    amount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    paidAt: Date | string
    method: $Enums.RepaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    allocations?: RepaymentAllocationUncheckedCreateNestedManyWithoutRepaymentInput
  }

  export type RepaymentCreateOrConnectWithoutLoanInput = {
    where: RepaymentWhereUniqueInput
    create: XOR<RepaymentCreateWithoutLoanInput, RepaymentUncheckedCreateWithoutLoanInput>
  }

  export type RepaymentCreateManyLoanInputEnvelope = {
    data: RepaymentCreateManyLoanInput | RepaymentCreateManyLoanInput[]
    skipDuplicates?: boolean
  }

  export type LoanDocumentCreateWithoutLoanInput = {
    id?: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
    documentType: DocumentTypeCreateNestedOneWithoutLoanDocsInput
    uploadedBy: UserCreateNestedOneWithoutUploadedLoanDocsInput
  }

  export type LoanDocumentUncheckedCreateWithoutLoanInput = {
    id?: string
    documentTypeId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedByUserId: string
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanDocumentCreateOrConnectWithoutLoanInput = {
    where: LoanDocumentWhereUniqueInput
    create: XOR<LoanDocumentCreateWithoutLoanInput, LoanDocumentUncheckedCreateWithoutLoanInput>
  }

  export type LoanDocumentCreateManyLoanInputEnvelope = {
    data: LoanDocumentCreateManyLoanInput | LoanDocumentCreateManyLoanInput[]
    skipDuplicates?: boolean
  }

  export type LoanAssignmentHistoryCreateWithoutLoanInput = {
    id?: string
    reason?: string | null
    changedAt?: Date | string
    oldOfficer?: UserCreateNestedOneWithoutOldLoanAssignmentsInput
    newOfficer: UserCreateNestedOneWithoutNewLoanAssignmentsInput
    oldBranch?: BranchCreateNestedOneWithoutOldLoanBranchesInput
    newBranch?: BranchCreateNestedOneWithoutNewLoanBranchesInput
    changedBy: UserCreateNestedOneWithoutChangedLoanAssignmentsInput
  }

  export type LoanAssignmentHistoryUncheckedCreateWithoutLoanInput = {
    id?: string
    oldOfficerId?: string | null
    newOfficerId: string
    oldBranchId?: string | null
    newBranchId?: string | null
    changedByUserId: string
    reason?: string | null
    changedAt?: Date | string
  }

  export type LoanAssignmentHistoryCreateOrConnectWithoutLoanInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    create: XOR<LoanAssignmentHistoryCreateWithoutLoanInput, LoanAssignmentHistoryUncheckedCreateWithoutLoanInput>
  }

  export type LoanAssignmentHistoryCreateManyLoanInputEnvelope = {
    data: LoanAssignmentHistoryCreateManyLoanInput | LoanAssignmentHistoryCreateManyLoanInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithoutLoansInput = {
    update: XOR<CustomerUpdateWithoutLoansInput, CustomerUncheckedUpdateWithoutLoansInput>
    create: XOR<CustomerCreateWithoutLoansInput, CustomerUncheckedCreateWithoutLoansInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutLoansInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutLoansInput, CustomerUncheckedUpdateWithoutLoansInput>
  }

  export type CustomerUpdateWithoutLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutCustomersNestedInput
    currentOfficer?: UserUpdateOneWithoutCurrentCustomersNestedInput
    documents?: CustomerDocumentUpdateManyWithoutCustomerNestedInput
    reassignments?: CustomerReassignmentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    currentOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documents?: CustomerDocumentUncheckedUpdateManyWithoutCustomerNestedInput
    reassignments?: CustomerReassignmentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type BranchUpsertWithoutLoansInput = {
    update: XOR<BranchUpdateWithoutLoansInput, BranchUncheckedUpdateWithoutLoansInput>
    create: XOR<BranchCreateWithoutLoansInput, BranchUncheckedCreateWithoutLoansInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutLoansInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutLoansInput, BranchUncheckedUpdateWithoutLoansInput>
  }

  export type BranchUpdateWithoutLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manager?: UserUpdateOneWithoutManagedBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutOldBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutNewBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUpdateManyWithoutOldBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUpdateManyWithoutNewBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutOldBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutNewBranchNestedInput
  }

  export type LoanTypeUpsertWithoutLoansInput = {
    update: XOR<LoanTypeUpdateWithoutLoansInput, LoanTypeUncheckedUpdateWithoutLoansInput>
    create: XOR<LoanTypeCreateWithoutLoansInput, LoanTypeUncheckedCreateWithoutLoansInput>
    where?: LoanTypeWhereInput
  }

  export type LoanTypeUpdateToOneWithWhereWithoutLoansInput = {
    where?: LoanTypeWhereInput
    data: XOR<LoanTypeUpdateWithoutLoansInput, LoanTypeUncheckedUpdateWithoutLoansInput>
  }

  export type LoanTypeUpdateWithoutLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanTypeUncheckedUpdateWithoutLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpsertWithoutCreatedLoansInput = {
    update: XOR<UserUpdateWithoutCreatedLoansInput, UserUncheckedUpdateWithoutCreatedLoansInput>
    create: XOR<UserCreateWithoutCreatedLoansInput, UserUncheckedCreateWithoutCreatedLoansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedLoansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedLoansInput, UserUncheckedUpdateWithoutCreatedLoansInput>
  }

  export type UserUpdateWithoutCreatedLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type UserUpsertWithoutAssignedLoansInput = {
    update: XOR<UserUpdateWithoutAssignedLoansInput, UserUncheckedUpdateWithoutAssignedLoansInput>
    create: XOR<UserCreateWithoutAssignedLoansInput, UserUncheckedCreateWithoutAssignedLoansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedLoansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedLoansInput, UserUncheckedUpdateWithoutAssignedLoansInput>
  }

  export type UserUpdateWithoutAssignedLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type RepaymentScheduleItemUpsertWithWhereUniqueWithoutLoanInput = {
    where: RepaymentScheduleItemWhereUniqueInput
    update: XOR<RepaymentScheduleItemUpdateWithoutLoanInput, RepaymentScheduleItemUncheckedUpdateWithoutLoanInput>
    create: XOR<RepaymentScheduleItemCreateWithoutLoanInput, RepaymentScheduleItemUncheckedCreateWithoutLoanInput>
  }

  export type RepaymentScheduleItemUpdateWithWhereUniqueWithoutLoanInput = {
    where: RepaymentScheduleItemWhereUniqueInput
    data: XOR<RepaymentScheduleItemUpdateWithoutLoanInput, RepaymentScheduleItemUncheckedUpdateWithoutLoanInput>
  }

  export type RepaymentScheduleItemUpdateManyWithWhereWithoutLoanInput = {
    where: RepaymentScheduleItemScalarWhereInput
    data: XOR<RepaymentScheduleItemUpdateManyMutationInput, RepaymentScheduleItemUncheckedUpdateManyWithoutLoanInput>
  }

  export type RepaymentScheduleItemScalarWhereInput = {
    AND?: RepaymentScheduleItemScalarWhereInput | RepaymentScheduleItemScalarWhereInput[]
    OR?: RepaymentScheduleItemScalarWhereInput[]
    NOT?: RepaymentScheduleItemScalarWhereInput | RepaymentScheduleItemScalarWhereInput[]
    id?: StringFilter<"RepaymentScheduleItem"> | string
    loanId?: StringFilter<"RepaymentScheduleItem"> | string
    sequence?: IntFilter<"RepaymentScheduleItem"> | number
    dueDate?: DateTimeFilter<"RepaymentScheduleItem"> | Date | string
    principalDue?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    interestDue?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    feeDue?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    totalDue?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFilter<"RepaymentScheduleItem"> | Decimal | DecimalJsLike | number | string
    status?: EnumScheduleStatusFilter<"RepaymentScheduleItem"> | $Enums.ScheduleStatus
    closedAt?: DateTimeNullableFilter<"RepaymentScheduleItem"> | Date | string | null
    createdAt?: DateTimeFilter<"RepaymentScheduleItem"> | Date | string
    updatedAt?: DateTimeFilter<"RepaymentScheduleItem"> | Date | string
    deletedAt?: DateTimeNullableFilter<"RepaymentScheduleItem"> | Date | string | null
  }

  export type RepaymentUpsertWithWhereUniqueWithoutLoanInput = {
    where: RepaymentWhereUniqueInput
    update: XOR<RepaymentUpdateWithoutLoanInput, RepaymentUncheckedUpdateWithoutLoanInput>
    create: XOR<RepaymentCreateWithoutLoanInput, RepaymentUncheckedCreateWithoutLoanInput>
  }

  export type RepaymentUpdateWithWhereUniqueWithoutLoanInput = {
    where: RepaymentWhereUniqueInput
    data: XOR<RepaymentUpdateWithoutLoanInput, RepaymentUncheckedUpdateWithoutLoanInput>
  }

  export type RepaymentUpdateManyWithWhereWithoutLoanInput = {
    where: RepaymentScalarWhereInput
    data: XOR<RepaymentUpdateManyMutationInput, RepaymentUncheckedUpdateManyWithoutLoanInput>
  }

  export type LoanDocumentUpsertWithWhereUniqueWithoutLoanInput = {
    where: LoanDocumentWhereUniqueInput
    update: XOR<LoanDocumentUpdateWithoutLoanInput, LoanDocumentUncheckedUpdateWithoutLoanInput>
    create: XOR<LoanDocumentCreateWithoutLoanInput, LoanDocumentUncheckedCreateWithoutLoanInput>
  }

  export type LoanDocumentUpdateWithWhereUniqueWithoutLoanInput = {
    where: LoanDocumentWhereUniqueInput
    data: XOR<LoanDocumentUpdateWithoutLoanInput, LoanDocumentUncheckedUpdateWithoutLoanInput>
  }

  export type LoanDocumentUpdateManyWithWhereWithoutLoanInput = {
    where: LoanDocumentScalarWhereInput
    data: XOR<LoanDocumentUpdateManyMutationInput, LoanDocumentUncheckedUpdateManyWithoutLoanInput>
  }

  export type LoanAssignmentHistoryUpsertWithWhereUniqueWithoutLoanInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    update: XOR<LoanAssignmentHistoryUpdateWithoutLoanInput, LoanAssignmentHistoryUncheckedUpdateWithoutLoanInput>
    create: XOR<LoanAssignmentHistoryCreateWithoutLoanInput, LoanAssignmentHistoryUncheckedCreateWithoutLoanInput>
  }

  export type LoanAssignmentHistoryUpdateWithWhereUniqueWithoutLoanInput = {
    where: LoanAssignmentHistoryWhereUniqueInput
    data: XOR<LoanAssignmentHistoryUpdateWithoutLoanInput, LoanAssignmentHistoryUncheckedUpdateWithoutLoanInput>
  }

  export type LoanAssignmentHistoryUpdateManyWithWhereWithoutLoanInput = {
    where: LoanAssignmentHistoryScalarWhereInput
    data: XOR<LoanAssignmentHistoryUpdateManyMutationInput, LoanAssignmentHistoryUncheckedUpdateManyWithoutLoanInput>
  }

  export type LoanCreateWithoutScheduleItemsInput = {
    id?: string
    loanNumber: string
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    customer: CustomerCreateNestedOneWithoutLoansInput
    branch: BranchCreateNestedOneWithoutLoansInput
    loanType?: LoanTypeCreateNestedOneWithoutLoansInput
    createdBy: UserCreateNestedOneWithoutCreatedLoansInput
    assignedOfficer: UserCreateNestedOneWithoutAssignedLoansInput
    repayments?: RepaymentCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutScheduleItemsInput = {
    id?: string
    loanNumber: string
    customerId: string
    branchId: string
    loanTypeId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    createdByUserId: string
    assignedOfficerId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    repayments?: RepaymentUncheckedCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentUncheckedCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutScheduleItemsInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutScheduleItemsInput, LoanUncheckedCreateWithoutScheduleItemsInput>
  }

  export type RepaymentAllocationCreateWithoutScheduleItemInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    repayment: RepaymentCreateNestedOneWithoutAllocationsInput
  }

  export type RepaymentAllocationUncheckedCreateWithoutScheduleItemInput = {
    id?: string
    repaymentId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type RepaymentAllocationCreateOrConnectWithoutScheduleItemInput = {
    where: RepaymentAllocationWhereUniqueInput
    create: XOR<RepaymentAllocationCreateWithoutScheduleItemInput, RepaymentAllocationUncheckedCreateWithoutScheduleItemInput>
  }

  export type RepaymentAllocationCreateManyScheduleItemInputEnvelope = {
    data: RepaymentAllocationCreateManyScheduleItemInput | RepaymentAllocationCreateManyScheduleItemInput[]
    skipDuplicates?: boolean
  }

  export type LoanUpsertWithoutScheduleItemsInput = {
    update: XOR<LoanUpdateWithoutScheduleItemsInput, LoanUncheckedUpdateWithoutScheduleItemsInput>
    create: XOR<LoanCreateWithoutScheduleItemsInput, LoanUncheckedCreateWithoutScheduleItemsInput>
    where?: LoanWhereInput
  }

  export type LoanUpdateToOneWithWhereWithoutScheduleItemsInput = {
    where?: LoanWhereInput
    data: XOR<LoanUpdateWithoutScheduleItemsInput, LoanUncheckedUpdateWithoutScheduleItemsInput>
  }

  export type LoanUpdateWithoutScheduleItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneRequiredWithoutLoansNestedInput
    branch?: BranchUpdateOneRequiredWithoutLoansNestedInput
    loanType?: LoanTypeUpdateOneWithoutLoansNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedLoansNestedInput
    assignedOfficer?: UserUpdateOneRequiredWithoutAssignedLoansNestedInput
    repayments?: RepaymentUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutScheduleItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    loanTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    createdByUserId?: StringFieldUpdateOperationsInput | string
    assignedOfficerId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repayments?: RepaymentUncheckedUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUncheckedUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type RepaymentAllocationUpsertWithWhereUniqueWithoutScheduleItemInput = {
    where: RepaymentAllocationWhereUniqueInput
    update: XOR<RepaymentAllocationUpdateWithoutScheduleItemInput, RepaymentAllocationUncheckedUpdateWithoutScheduleItemInput>
    create: XOR<RepaymentAllocationCreateWithoutScheduleItemInput, RepaymentAllocationUncheckedCreateWithoutScheduleItemInput>
  }

  export type RepaymentAllocationUpdateWithWhereUniqueWithoutScheduleItemInput = {
    where: RepaymentAllocationWhereUniqueInput
    data: XOR<RepaymentAllocationUpdateWithoutScheduleItemInput, RepaymentAllocationUncheckedUpdateWithoutScheduleItemInput>
  }

  export type RepaymentAllocationUpdateManyWithWhereWithoutScheduleItemInput = {
    where: RepaymentAllocationScalarWhereInput
    data: XOR<RepaymentAllocationUpdateManyMutationInput, RepaymentAllocationUncheckedUpdateManyWithoutScheduleItemInput>
  }

  export type RepaymentAllocationScalarWhereInput = {
    AND?: RepaymentAllocationScalarWhereInput | RepaymentAllocationScalarWhereInput[]
    OR?: RepaymentAllocationScalarWhereInput[]
    NOT?: RepaymentAllocationScalarWhereInput | RepaymentAllocationScalarWhereInput[]
    id?: StringFilter<"RepaymentAllocation"> | string
    repaymentId?: StringFilter<"RepaymentAllocation"> | string
    scheduleItemId?: StringFilter<"RepaymentAllocation"> | string
    amount?: DecimalFilter<"RepaymentAllocation"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"RepaymentAllocation"> | Date | string
  }

  export type LoanCreateWithoutRepaymentsInput = {
    id?: string
    loanNumber: string
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    customer: CustomerCreateNestedOneWithoutLoansInput
    branch: BranchCreateNestedOneWithoutLoansInput
    loanType?: LoanTypeCreateNestedOneWithoutLoansInput
    createdBy: UserCreateNestedOneWithoutCreatedLoansInput
    assignedOfficer: UserCreateNestedOneWithoutAssignedLoansInput
    scheduleItems?: RepaymentScheduleItemCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutRepaymentsInput = {
    id?: string
    loanNumber: string
    customerId: string
    branchId: string
    loanTypeId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    createdByUserId: string
    assignedOfficerId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentUncheckedCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutRepaymentsInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutRepaymentsInput, LoanUncheckedCreateWithoutRepaymentsInput>
  }

  export type UserCreateWithoutRepaymentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutRepaymentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutRepaymentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRepaymentsInput, UserUncheckedCreateWithoutRepaymentsInput>
  }

  export type RepaymentAllocationCreateWithoutRepaymentInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    scheduleItem: RepaymentScheduleItemCreateNestedOneWithoutAllocationsInput
  }

  export type RepaymentAllocationUncheckedCreateWithoutRepaymentInput = {
    id?: string
    scheduleItemId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type RepaymentAllocationCreateOrConnectWithoutRepaymentInput = {
    where: RepaymentAllocationWhereUniqueInput
    create: XOR<RepaymentAllocationCreateWithoutRepaymentInput, RepaymentAllocationUncheckedCreateWithoutRepaymentInput>
  }

  export type RepaymentAllocationCreateManyRepaymentInputEnvelope = {
    data: RepaymentAllocationCreateManyRepaymentInput | RepaymentAllocationCreateManyRepaymentInput[]
    skipDuplicates?: boolean
  }

  export type LoanUpsertWithoutRepaymentsInput = {
    update: XOR<LoanUpdateWithoutRepaymentsInput, LoanUncheckedUpdateWithoutRepaymentsInput>
    create: XOR<LoanCreateWithoutRepaymentsInput, LoanUncheckedCreateWithoutRepaymentsInput>
    where?: LoanWhereInput
  }

  export type LoanUpdateToOneWithWhereWithoutRepaymentsInput = {
    where?: LoanWhereInput
    data: XOR<LoanUpdateWithoutRepaymentsInput, LoanUncheckedUpdateWithoutRepaymentsInput>
  }

  export type LoanUpdateWithoutRepaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneRequiredWithoutLoansNestedInput
    branch?: BranchUpdateOneRequiredWithoutLoansNestedInput
    loanType?: LoanTypeUpdateOneWithoutLoansNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedLoansNestedInput
    assignedOfficer?: UserUpdateOneRequiredWithoutAssignedLoansNestedInput
    scheduleItems?: RepaymentScheduleItemUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutRepaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    loanTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    createdByUserId?: StringFieldUpdateOperationsInput | string
    assignedOfficerId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUncheckedUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type UserUpsertWithoutRepaymentsInput = {
    update: XOR<UserUpdateWithoutRepaymentsInput, UserUncheckedUpdateWithoutRepaymentsInput>
    create: XOR<UserCreateWithoutRepaymentsInput, UserUncheckedCreateWithoutRepaymentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRepaymentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRepaymentsInput, UserUncheckedUpdateWithoutRepaymentsInput>
  }

  export type UserUpdateWithoutRepaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutRepaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type RepaymentAllocationUpsertWithWhereUniqueWithoutRepaymentInput = {
    where: RepaymentAllocationWhereUniqueInput
    update: XOR<RepaymentAllocationUpdateWithoutRepaymentInput, RepaymentAllocationUncheckedUpdateWithoutRepaymentInput>
    create: XOR<RepaymentAllocationCreateWithoutRepaymentInput, RepaymentAllocationUncheckedCreateWithoutRepaymentInput>
  }

  export type RepaymentAllocationUpdateWithWhereUniqueWithoutRepaymentInput = {
    where: RepaymentAllocationWhereUniqueInput
    data: XOR<RepaymentAllocationUpdateWithoutRepaymentInput, RepaymentAllocationUncheckedUpdateWithoutRepaymentInput>
  }

  export type RepaymentAllocationUpdateManyWithWhereWithoutRepaymentInput = {
    where: RepaymentAllocationScalarWhereInput
    data: XOR<RepaymentAllocationUpdateManyMutationInput, RepaymentAllocationUncheckedUpdateManyWithoutRepaymentInput>
  }

  export type RepaymentCreateWithoutAllocationsInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    paidAt: Date | string
    method: $Enums.RepaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    loan: LoanCreateNestedOneWithoutRepaymentsInput
    receivedBy: UserCreateNestedOneWithoutRepaymentsInput
  }

  export type RepaymentUncheckedCreateWithoutAllocationsInput = {
    id?: string
    loanId: string
    receivedByUserId: string
    amount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    paidAt: Date | string
    method: $Enums.RepaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type RepaymentCreateOrConnectWithoutAllocationsInput = {
    where: RepaymentWhereUniqueInput
    create: XOR<RepaymentCreateWithoutAllocationsInput, RepaymentUncheckedCreateWithoutAllocationsInput>
  }

  export type RepaymentScheduleItemCreateWithoutAllocationsInput = {
    id?: string
    sequence: number
    dueDate: Date | string
    principalDue: Decimal | DecimalJsLike | number | string
    interestDue?: Decimal | DecimalJsLike | number | string
    feeDue?: Decimal | DecimalJsLike | number | string
    totalDue: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    status?: $Enums.ScheduleStatus
    closedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    loan: LoanCreateNestedOneWithoutScheduleItemsInput
  }

  export type RepaymentScheduleItemUncheckedCreateWithoutAllocationsInput = {
    id?: string
    loanId: string
    sequence: number
    dueDate: Date | string
    principalDue: Decimal | DecimalJsLike | number | string
    interestDue?: Decimal | DecimalJsLike | number | string
    feeDue?: Decimal | DecimalJsLike | number | string
    totalDue: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    status?: $Enums.ScheduleStatus
    closedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type RepaymentScheduleItemCreateOrConnectWithoutAllocationsInput = {
    where: RepaymentScheduleItemWhereUniqueInput
    create: XOR<RepaymentScheduleItemCreateWithoutAllocationsInput, RepaymentScheduleItemUncheckedCreateWithoutAllocationsInput>
  }

  export type RepaymentUpsertWithoutAllocationsInput = {
    update: XOR<RepaymentUpdateWithoutAllocationsInput, RepaymentUncheckedUpdateWithoutAllocationsInput>
    create: XOR<RepaymentCreateWithoutAllocationsInput, RepaymentUncheckedCreateWithoutAllocationsInput>
    where?: RepaymentWhereInput
  }

  export type RepaymentUpdateToOneWithWhereWithoutAllocationsInput = {
    where?: RepaymentWhereInput
    data: XOR<RepaymentUpdateWithoutAllocationsInput, RepaymentUncheckedUpdateWithoutAllocationsInput>
  }

  export type RepaymentUpdateWithoutAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: EnumRepaymentMethodFieldUpdateOperationsInput | $Enums.RepaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loan?: LoanUpdateOneRequiredWithoutRepaymentsNestedInput
    receivedBy?: UserUpdateOneRequiredWithoutRepaymentsNestedInput
  }

  export type RepaymentUncheckedUpdateWithoutAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    receivedByUserId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: EnumRepaymentMethodFieldUpdateOperationsInput | $Enums.RepaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RepaymentScheduleItemUpsertWithoutAllocationsInput = {
    update: XOR<RepaymentScheduleItemUpdateWithoutAllocationsInput, RepaymentScheduleItemUncheckedUpdateWithoutAllocationsInput>
    create: XOR<RepaymentScheduleItemCreateWithoutAllocationsInput, RepaymentScheduleItemUncheckedCreateWithoutAllocationsInput>
    where?: RepaymentScheduleItemWhereInput
  }

  export type RepaymentScheduleItemUpdateToOneWithWhereWithoutAllocationsInput = {
    where?: RepaymentScheduleItemWhereInput
    data: XOR<RepaymentScheduleItemUpdateWithoutAllocationsInput, RepaymentScheduleItemUncheckedUpdateWithoutAllocationsInput>
  }

  export type RepaymentScheduleItemUpdateWithoutAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    interestDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loan?: LoanUpdateOneRequiredWithoutScheduleItemsNestedInput
  }

  export type RepaymentScheduleItemUncheckedUpdateWithoutAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    interestDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanCreateWithoutAssignmentHistoryInput = {
    id?: string
    loanNumber: string
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    customer: CustomerCreateNestedOneWithoutLoansInput
    branch: BranchCreateNestedOneWithoutLoansInput
    loanType?: LoanTypeCreateNestedOneWithoutLoansInput
    createdBy: UserCreateNestedOneWithoutCreatedLoansInput
    assignedOfficer: UserCreateNestedOneWithoutAssignedLoansInput
    scheduleItems?: RepaymentScheduleItemCreateNestedManyWithoutLoanInput
    repayments?: RepaymentCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutAssignmentHistoryInput = {
    id?: string
    loanNumber: string
    customerId: string
    branchId: string
    loanTypeId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    createdByUserId: string
    assignedOfficerId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedCreateNestedManyWithoutLoanInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutLoanInput
    documents?: LoanDocumentUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutAssignmentHistoryInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutAssignmentHistoryInput, LoanUncheckedCreateWithoutAssignmentHistoryInput>
  }

  export type UserCreateWithoutOldLoanAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutOldLoanAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutOldLoanAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOldLoanAssignmentsInput, UserUncheckedCreateWithoutOldLoanAssignmentsInput>
  }

  export type UserCreateWithoutNewLoanAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutNewLoanAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutNewLoanAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNewLoanAssignmentsInput, UserUncheckedCreateWithoutNewLoanAssignmentsInput>
  }

  export type BranchCreateWithoutOldLoanBranchesInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    manager?: UserCreateNestedOneWithoutManagedBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    loans?: LoanCreateNestedManyWithoutBranchInput
    newLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutNewBranchInput
    oldCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutOldBranchInput
    newCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutNewBranchInput
  }

  export type BranchUncheckedCreateWithoutOldLoanBranchesInput = {
    id?: string
    name: string
    code: string
    managerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBranchInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewBranchInput
    oldCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldBranchInput
    newCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewBranchInput
  }

  export type BranchCreateOrConnectWithoutOldLoanBranchesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutOldLoanBranchesInput, BranchUncheckedCreateWithoutOldLoanBranchesInput>
  }

  export type BranchCreateWithoutNewLoanBranchesInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    manager?: UserCreateNestedOneWithoutManagedBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    loans?: LoanCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutOldBranchInput
    oldCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutOldBranchInput
    newCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutNewBranchInput
  }

  export type BranchUncheckedCreateWithoutNewLoanBranchesInput = {
    id?: string
    name: string
    code: string
    managerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldBranchInput
    oldCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldBranchInput
    newCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewBranchInput
  }

  export type BranchCreateOrConnectWithoutNewLoanBranchesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutNewLoanBranchesInput, BranchUncheckedCreateWithoutNewLoanBranchesInput>
  }

  export type UserCreateWithoutChangedLoanAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutChangedLoanAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutChangedLoanAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChangedLoanAssignmentsInput, UserUncheckedCreateWithoutChangedLoanAssignmentsInput>
  }

  export type LoanUpsertWithoutAssignmentHistoryInput = {
    update: XOR<LoanUpdateWithoutAssignmentHistoryInput, LoanUncheckedUpdateWithoutAssignmentHistoryInput>
    create: XOR<LoanCreateWithoutAssignmentHistoryInput, LoanUncheckedCreateWithoutAssignmentHistoryInput>
    where?: LoanWhereInput
  }

  export type LoanUpdateToOneWithWhereWithoutAssignmentHistoryInput = {
    where?: LoanWhereInput
    data: XOR<LoanUpdateWithoutAssignmentHistoryInput, LoanUncheckedUpdateWithoutAssignmentHistoryInput>
  }

  export type LoanUpdateWithoutAssignmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneRequiredWithoutLoansNestedInput
    branch?: BranchUpdateOneRequiredWithoutLoansNestedInput
    loanType?: LoanTypeUpdateOneWithoutLoansNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedLoansNestedInput
    assignedOfficer?: UserUpdateOneRequiredWithoutAssignedLoansNestedInput
    scheduleItems?: RepaymentScheduleItemUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutAssignmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    loanTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    createdByUserId?: StringFieldUpdateOperationsInput | string
    assignedOfficerId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type UserUpsertWithoutOldLoanAssignmentsInput = {
    update: XOR<UserUpdateWithoutOldLoanAssignmentsInput, UserUncheckedUpdateWithoutOldLoanAssignmentsInput>
    create: XOR<UserCreateWithoutOldLoanAssignmentsInput, UserUncheckedCreateWithoutOldLoanAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOldLoanAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOldLoanAssignmentsInput, UserUncheckedUpdateWithoutOldLoanAssignmentsInput>
  }

  export type UserUpdateWithoutOldLoanAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutOldLoanAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type UserUpsertWithoutNewLoanAssignmentsInput = {
    update: XOR<UserUpdateWithoutNewLoanAssignmentsInput, UserUncheckedUpdateWithoutNewLoanAssignmentsInput>
    create: XOR<UserCreateWithoutNewLoanAssignmentsInput, UserUncheckedCreateWithoutNewLoanAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNewLoanAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNewLoanAssignmentsInput, UserUncheckedUpdateWithoutNewLoanAssignmentsInput>
  }

  export type UserUpdateWithoutNewLoanAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutNewLoanAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type BranchUpsertWithoutOldLoanBranchesInput = {
    update: XOR<BranchUpdateWithoutOldLoanBranchesInput, BranchUncheckedUpdateWithoutOldLoanBranchesInput>
    create: XOR<BranchCreateWithoutOldLoanBranchesInput, BranchUncheckedCreateWithoutOldLoanBranchesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutOldLoanBranchesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutOldLoanBranchesInput, BranchUncheckedUpdateWithoutOldLoanBranchesInput>
  }

  export type BranchUpdateWithoutOldLoanBranchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manager?: UserUpdateOneWithoutManagedBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    loans?: LoanUpdateManyWithoutBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutNewBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUpdateManyWithoutOldBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUpdateManyWithoutNewBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutOldLoanBranchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutOldBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutNewBranchNestedInput
  }

  export type BranchUpsertWithoutNewLoanBranchesInput = {
    update: XOR<BranchUpdateWithoutNewLoanBranchesInput, BranchUncheckedUpdateWithoutNewLoanBranchesInput>
    create: XOR<BranchCreateWithoutNewLoanBranchesInput, BranchUncheckedCreateWithoutNewLoanBranchesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutNewLoanBranchesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutNewLoanBranchesInput, BranchUncheckedUpdateWithoutNewLoanBranchesInput>
  }

  export type BranchUpdateWithoutNewLoanBranchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manager?: UserUpdateOneWithoutManagedBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    loans?: LoanUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutOldBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUpdateManyWithoutOldBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUpdateManyWithoutNewBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutNewLoanBranchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutOldBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutNewBranchNestedInput
  }

  export type UserUpsertWithoutChangedLoanAssignmentsInput = {
    update: XOR<UserUpdateWithoutChangedLoanAssignmentsInput, UserUncheckedUpdateWithoutChangedLoanAssignmentsInput>
    create: XOR<UserCreateWithoutChangedLoanAssignmentsInput, UserUncheckedCreateWithoutChangedLoanAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChangedLoanAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChangedLoanAssignmentsInput, UserUncheckedUpdateWithoutChangedLoanAssignmentsInput>
  }

  export type UserUpdateWithoutChangedLoanAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutChangedLoanAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type CustomerCreateWithoutReassignmentsInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutCustomersInput
    currentOfficer?: UserCreateNestedOneWithoutCurrentCustomersInput
    documents?: CustomerDocumentCreateNestedManyWithoutCustomerInput
    loans?: LoanCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutReassignmentsInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    branchId: string
    currentOfficerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    documents?: CustomerDocumentUncheckedCreateNestedManyWithoutCustomerInput
    loans?: LoanUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutReassignmentsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutReassignmentsInput, CustomerUncheckedCreateWithoutReassignmentsInput>
  }

  export type BranchCreateWithoutOldCustomerBranchesInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    manager?: UserCreateNestedOneWithoutManagedBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    loans?: LoanCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutOldBranchInput
    newLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutNewBranchInput
    newCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutNewBranchInput
  }

  export type BranchUncheckedCreateWithoutOldCustomerBranchesInput = {
    id?: string
    name: string
    code: string
    managerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldBranchInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewBranchInput
    newCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewBranchInput
  }

  export type BranchCreateOrConnectWithoutOldCustomerBranchesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutOldCustomerBranchesInput, BranchUncheckedCreateWithoutOldCustomerBranchesInput>
  }

  export type BranchCreateWithoutNewCustomerBranchesInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    manager?: UserCreateNestedOneWithoutManagedBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    loans?: LoanCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutOldBranchInput
    newLoanBranches?: LoanAssignmentHistoryCreateNestedManyWithoutNewBranchInput
    oldCustomerBranches?: CustomerReassignmentCreateNestedManyWithoutOldBranchInput
  }

  export type BranchUncheckedCreateWithoutNewCustomerBranchesInput = {
    id?: string
    name: string
    code: string
    managerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBranchInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldBranchInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewBranchInput
    oldCustomerBranches?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldBranchInput
  }

  export type BranchCreateOrConnectWithoutNewCustomerBranchesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutNewCustomerBranchesInput, BranchUncheckedCreateWithoutNewCustomerBranchesInput>
  }

  export type UserCreateWithoutOldCustomerAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutOldCustomerAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutOldCustomerAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOldCustomerAssignmentsInput, UserUncheckedCreateWithoutOldCustomerAssignmentsInput>
  }

  export type UserCreateWithoutNewCustomerAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutNewCustomerAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutNewCustomerAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNewCustomerAssignmentsInput, UserUncheckedCreateWithoutNewCustomerAssignmentsInput>
  }

  export type UserCreateWithoutChangedCustomerAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
  }

  export type UserUncheckedCreateWithoutChangedCustomerAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
  }

  export type UserCreateOrConnectWithoutChangedCustomerAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChangedCustomerAssignmentsInput, UserUncheckedCreateWithoutChangedCustomerAssignmentsInput>
  }

  export type CustomerUpsertWithoutReassignmentsInput = {
    update: XOR<CustomerUpdateWithoutReassignmentsInput, CustomerUncheckedUpdateWithoutReassignmentsInput>
    create: XOR<CustomerCreateWithoutReassignmentsInput, CustomerUncheckedCreateWithoutReassignmentsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutReassignmentsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutReassignmentsInput, CustomerUncheckedUpdateWithoutReassignmentsInput>
  }

  export type CustomerUpdateWithoutReassignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutCustomersNestedInput
    currentOfficer?: UserUpdateOneWithoutCurrentCustomersNestedInput
    documents?: CustomerDocumentUpdateManyWithoutCustomerNestedInput
    loans?: LoanUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutReassignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    currentOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documents?: CustomerDocumentUncheckedUpdateManyWithoutCustomerNestedInput
    loans?: LoanUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type BranchUpsertWithoutOldCustomerBranchesInput = {
    update: XOR<BranchUpdateWithoutOldCustomerBranchesInput, BranchUncheckedUpdateWithoutOldCustomerBranchesInput>
    create: XOR<BranchCreateWithoutOldCustomerBranchesInput, BranchUncheckedCreateWithoutOldCustomerBranchesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutOldCustomerBranchesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutOldCustomerBranchesInput, BranchUncheckedUpdateWithoutOldCustomerBranchesInput>
  }

  export type BranchUpdateWithoutOldCustomerBranchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manager?: UserUpdateOneWithoutManagedBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    loans?: LoanUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutOldBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutNewBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUpdateManyWithoutNewBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutOldCustomerBranchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewBranchNestedInput
    newCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutNewBranchNestedInput
  }

  export type BranchUpsertWithoutNewCustomerBranchesInput = {
    update: XOR<BranchUpdateWithoutNewCustomerBranchesInput, BranchUncheckedUpdateWithoutNewCustomerBranchesInput>
    create: XOR<BranchCreateWithoutNewCustomerBranchesInput, BranchUncheckedCreateWithoutNewCustomerBranchesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutNewCustomerBranchesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutNewCustomerBranchesInput, BranchUncheckedUpdateWithoutNewCustomerBranchesInput>
  }

  export type BranchUpdateWithoutNewCustomerBranchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manager?: UserUpdateOneWithoutManagedBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    loans?: LoanUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutOldBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUpdateManyWithoutNewBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUpdateManyWithoutOldBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutNewCustomerBranchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBranchNestedInput
    oldLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldBranchNestedInput
    newLoanBranches?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewBranchNestedInput
    oldCustomerBranches?: CustomerReassignmentUncheckedUpdateManyWithoutOldBranchNestedInput
  }

  export type UserUpsertWithoutOldCustomerAssignmentsInput = {
    update: XOR<UserUpdateWithoutOldCustomerAssignmentsInput, UserUncheckedUpdateWithoutOldCustomerAssignmentsInput>
    create: XOR<UserCreateWithoutOldCustomerAssignmentsInput, UserUncheckedCreateWithoutOldCustomerAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOldCustomerAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOldCustomerAssignmentsInput, UserUncheckedUpdateWithoutOldCustomerAssignmentsInput>
  }

  export type UserUpdateWithoutOldCustomerAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutOldCustomerAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type UserUpsertWithoutNewCustomerAssignmentsInput = {
    update: XOR<UserUpdateWithoutNewCustomerAssignmentsInput, UserUncheckedUpdateWithoutNewCustomerAssignmentsInput>
    create: XOR<UserCreateWithoutNewCustomerAssignmentsInput, UserUncheckedCreateWithoutNewCustomerAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNewCustomerAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNewCustomerAssignmentsInput, UserUncheckedUpdateWithoutNewCustomerAssignmentsInput>
  }

  export type UserUpdateWithoutNewCustomerAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutNewCustomerAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type UserUpsertWithoutChangedCustomerAssignmentsInput = {
    update: XOR<UserUpdateWithoutChangedCustomerAssignmentsInput, UserUncheckedUpdateWithoutChangedCustomerAssignmentsInput>
    create: XOR<UserCreateWithoutChangedCustomerAssignmentsInput, UserUncheckedCreateWithoutChangedCustomerAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChangedCustomerAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChangedCustomerAssignmentsInput, UserUncheckedUpdateWithoutChangedCustomerAssignmentsInput>
  }

  export type UserUpdateWithoutChangedCustomerAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
  }

  export type UserUncheckedUpdateWithoutChangedCustomerAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
  }

  export type CustomerDocumentCreateWithoutDocumentTypeInput = {
    id?: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
    customer: CustomerCreateNestedOneWithoutDocumentsInput
    uploadedBy: UserCreateNestedOneWithoutUploadedCustDocsInput
  }

  export type CustomerDocumentUncheckedCreateWithoutDocumentTypeInput = {
    id?: string
    customerId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedByUserId: string
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type CustomerDocumentCreateOrConnectWithoutDocumentTypeInput = {
    where: CustomerDocumentWhereUniqueInput
    create: XOR<CustomerDocumentCreateWithoutDocumentTypeInput, CustomerDocumentUncheckedCreateWithoutDocumentTypeInput>
  }

  export type CustomerDocumentCreateManyDocumentTypeInputEnvelope = {
    data: CustomerDocumentCreateManyDocumentTypeInput | CustomerDocumentCreateManyDocumentTypeInput[]
    skipDuplicates?: boolean
  }

  export type LoanDocumentCreateWithoutDocumentTypeInput = {
    id?: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
    loan: LoanCreateNestedOneWithoutDocumentsInput
    uploadedBy: UserCreateNestedOneWithoutUploadedLoanDocsInput
  }

  export type LoanDocumentUncheckedCreateWithoutDocumentTypeInput = {
    id?: string
    loanId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedByUserId: string
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanDocumentCreateOrConnectWithoutDocumentTypeInput = {
    where: LoanDocumentWhereUniqueInput
    create: XOR<LoanDocumentCreateWithoutDocumentTypeInput, LoanDocumentUncheckedCreateWithoutDocumentTypeInput>
  }

  export type LoanDocumentCreateManyDocumentTypeInputEnvelope = {
    data: LoanDocumentCreateManyDocumentTypeInput | LoanDocumentCreateManyDocumentTypeInput[]
    skipDuplicates?: boolean
  }

  export type CustomerDocumentUpsertWithWhereUniqueWithoutDocumentTypeInput = {
    where: CustomerDocumentWhereUniqueInput
    update: XOR<CustomerDocumentUpdateWithoutDocumentTypeInput, CustomerDocumentUncheckedUpdateWithoutDocumentTypeInput>
    create: XOR<CustomerDocumentCreateWithoutDocumentTypeInput, CustomerDocumentUncheckedCreateWithoutDocumentTypeInput>
  }

  export type CustomerDocumentUpdateWithWhereUniqueWithoutDocumentTypeInput = {
    where: CustomerDocumentWhereUniqueInput
    data: XOR<CustomerDocumentUpdateWithoutDocumentTypeInput, CustomerDocumentUncheckedUpdateWithoutDocumentTypeInput>
  }

  export type CustomerDocumentUpdateManyWithWhereWithoutDocumentTypeInput = {
    where: CustomerDocumentScalarWhereInput
    data: XOR<CustomerDocumentUpdateManyMutationInput, CustomerDocumentUncheckedUpdateManyWithoutDocumentTypeInput>
  }

  export type LoanDocumentUpsertWithWhereUniqueWithoutDocumentTypeInput = {
    where: LoanDocumentWhereUniqueInput
    update: XOR<LoanDocumentUpdateWithoutDocumentTypeInput, LoanDocumentUncheckedUpdateWithoutDocumentTypeInput>
    create: XOR<LoanDocumentCreateWithoutDocumentTypeInput, LoanDocumentUncheckedCreateWithoutDocumentTypeInput>
  }

  export type LoanDocumentUpdateWithWhereUniqueWithoutDocumentTypeInput = {
    where: LoanDocumentWhereUniqueInput
    data: XOR<LoanDocumentUpdateWithoutDocumentTypeInput, LoanDocumentUncheckedUpdateWithoutDocumentTypeInput>
  }

  export type LoanDocumentUpdateManyWithWhereWithoutDocumentTypeInput = {
    where: LoanDocumentScalarWhereInput
    data: XOR<LoanDocumentUpdateManyMutationInput, LoanDocumentUncheckedUpdateManyWithoutDocumentTypeInput>
  }

  export type CustomerCreateWithoutDocumentsInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutCustomersInput
    currentOfficer?: UserCreateNestedOneWithoutCurrentCustomersInput
    loans?: LoanCreateNestedManyWithoutCustomerInput
    reassignments?: CustomerReassignmentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutDocumentsInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    branchId: string
    currentOfficerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    loans?: LoanUncheckedCreateNestedManyWithoutCustomerInput
    reassignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutDocumentsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutDocumentsInput, CustomerUncheckedCreateWithoutDocumentsInput>
  }

  export type DocumentTypeCreateWithoutCustomerDocsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    loanDocs?: LoanDocumentCreateNestedManyWithoutDocumentTypeInput
  }

  export type DocumentTypeUncheckedCreateWithoutCustomerDocsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    loanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutDocumentTypeInput
  }

  export type DocumentTypeCreateOrConnectWithoutCustomerDocsInput = {
    where: DocumentTypeWhereUniqueInput
    create: XOR<DocumentTypeCreateWithoutCustomerDocsInput, DocumentTypeUncheckedCreateWithoutCustomerDocsInput>
  }

  export type UserCreateWithoutUploadedCustDocsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutUploadedCustDocsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutUploadedCustDocsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUploadedCustDocsInput, UserUncheckedCreateWithoutUploadedCustDocsInput>
  }

  export type CustomerUpsertWithoutDocumentsInput = {
    update: XOR<CustomerUpdateWithoutDocumentsInput, CustomerUncheckedUpdateWithoutDocumentsInput>
    create: XOR<CustomerCreateWithoutDocumentsInput, CustomerUncheckedCreateWithoutDocumentsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutDocumentsInput, CustomerUncheckedUpdateWithoutDocumentsInput>
  }

  export type CustomerUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutCustomersNestedInput
    currentOfficer?: UserUpdateOneWithoutCurrentCustomersNestedInput
    loans?: LoanUpdateManyWithoutCustomerNestedInput
    reassignments?: CustomerReassignmentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    currentOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loans?: LoanUncheckedUpdateManyWithoutCustomerNestedInput
    reassignments?: CustomerReassignmentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type DocumentTypeUpsertWithoutCustomerDocsInput = {
    update: XOR<DocumentTypeUpdateWithoutCustomerDocsInput, DocumentTypeUncheckedUpdateWithoutCustomerDocsInput>
    create: XOR<DocumentTypeCreateWithoutCustomerDocsInput, DocumentTypeUncheckedCreateWithoutCustomerDocsInput>
    where?: DocumentTypeWhereInput
  }

  export type DocumentTypeUpdateToOneWithWhereWithoutCustomerDocsInput = {
    where?: DocumentTypeWhereInput
    data: XOR<DocumentTypeUpdateWithoutCustomerDocsInput, DocumentTypeUncheckedUpdateWithoutCustomerDocsInput>
  }

  export type DocumentTypeUpdateWithoutCustomerDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanDocs?: LoanDocumentUpdateManyWithoutDocumentTypeNestedInput
  }

  export type DocumentTypeUncheckedUpdateWithoutCustomerDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanDocs?: LoanDocumentUncheckedUpdateManyWithoutDocumentTypeNestedInput
  }

  export type UserUpsertWithoutUploadedCustDocsInput = {
    update: XOR<UserUpdateWithoutUploadedCustDocsInput, UserUncheckedUpdateWithoutUploadedCustDocsInput>
    create: XOR<UserCreateWithoutUploadedCustDocsInput, UserUncheckedCreateWithoutUploadedCustDocsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUploadedCustDocsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUploadedCustDocsInput, UserUncheckedUpdateWithoutUploadedCustDocsInput>
  }

  export type UserUpdateWithoutUploadedCustDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUploadedCustDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type LoanCreateWithoutDocumentsInput = {
    id?: string
    loanNumber: string
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    customer: CustomerCreateNestedOneWithoutLoansInput
    branch: BranchCreateNestedOneWithoutLoansInput
    loanType?: LoanTypeCreateNestedOneWithoutLoansInput
    createdBy: UserCreateNestedOneWithoutCreatedLoansInput
    assignedOfficer: UserCreateNestedOneWithoutAssignedLoansInput
    scheduleItems?: RepaymentScheduleItemCreateNestedManyWithoutLoanInput
    repayments?: RepaymentCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutDocumentsInput = {
    id?: string
    loanNumber: string
    customerId: string
    branchId: string
    loanTypeId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    createdByUserId: string
    assignedOfficerId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedCreateNestedManyWithoutLoanInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutLoanInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutDocumentsInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutDocumentsInput, LoanUncheckedCreateWithoutDocumentsInput>
  }

  export type DocumentTypeCreateWithoutLoanDocsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    customerDocs?: CustomerDocumentCreateNestedManyWithoutDocumentTypeInput
  }

  export type DocumentTypeUncheckedCreateWithoutLoanDocsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    customerDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutDocumentTypeInput
  }

  export type DocumentTypeCreateOrConnectWithoutLoanDocsInput = {
    where: DocumentTypeWhereUniqueInput
    create: XOR<DocumentTypeCreateWithoutLoanDocsInput, DocumentTypeUncheckedCreateWithoutLoanDocsInput>
  }

  export type UserCreateWithoutUploadedLoanDocsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutUploadedLoanDocsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutUploadedLoanDocsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUploadedLoanDocsInput, UserUncheckedCreateWithoutUploadedLoanDocsInput>
  }

  export type LoanUpsertWithoutDocumentsInput = {
    update: XOR<LoanUpdateWithoutDocumentsInput, LoanUncheckedUpdateWithoutDocumentsInput>
    create: XOR<LoanCreateWithoutDocumentsInput, LoanUncheckedCreateWithoutDocumentsInput>
    where?: LoanWhereInput
  }

  export type LoanUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: LoanWhereInput
    data: XOR<LoanUpdateWithoutDocumentsInput, LoanUncheckedUpdateWithoutDocumentsInput>
  }

  export type LoanUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneRequiredWithoutLoansNestedInput
    branch?: BranchUpdateOneRequiredWithoutLoansNestedInput
    loanType?: LoanTypeUpdateOneWithoutLoansNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedLoansNestedInput
    assignedOfficer?: UserUpdateOneRequiredWithoutAssignedLoansNestedInput
    scheduleItems?: RepaymentScheduleItemUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    loanTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    createdByUserId?: StringFieldUpdateOperationsInput | string
    assignedOfficerId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type DocumentTypeUpsertWithoutLoanDocsInput = {
    update: XOR<DocumentTypeUpdateWithoutLoanDocsInput, DocumentTypeUncheckedUpdateWithoutLoanDocsInput>
    create: XOR<DocumentTypeCreateWithoutLoanDocsInput, DocumentTypeUncheckedCreateWithoutLoanDocsInput>
    where?: DocumentTypeWhereInput
  }

  export type DocumentTypeUpdateToOneWithWhereWithoutLoanDocsInput = {
    where?: DocumentTypeWhereInput
    data: XOR<DocumentTypeUpdateWithoutLoanDocsInput, DocumentTypeUncheckedUpdateWithoutLoanDocsInput>
  }

  export type DocumentTypeUpdateWithoutLoanDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customerDocs?: CustomerDocumentUpdateManyWithoutDocumentTypeNestedInput
  }

  export type DocumentTypeUncheckedUpdateWithoutLoanDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customerDocs?: CustomerDocumentUncheckedUpdateManyWithoutDocumentTypeNestedInput
  }

  export type UserUpsertWithoutUploadedLoanDocsInput = {
    update: XOR<UserUpdateWithoutUploadedLoanDocsInput, UserUncheckedUpdateWithoutUploadedLoanDocsInput>
    create: XOR<UserCreateWithoutUploadedLoanDocsInput, UserUncheckedCreateWithoutUploadedLoanDocsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUploadedLoanDocsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUploadedLoanDocsInput, UserUncheckedUpdateWithoutUploadedLoanDocsInput>
  }

  export type UserUpdateWithoutUploadedLoanDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUploadedLoanDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    managedBranch?: BranchCreateNestedOneWithoutManagerInput
    createdLoans?: LoanCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionCreateNestedManyWithoutUserInput
    uploadedCustDocs?: CustomerDocumentCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentCreateNestedManyWithoutChangedByInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    branchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    managedBranch?: BranchUncheckedCreateNestedOneWithoutManagerInput
    createdLoans?: LoanUncheckedCreateNestedManyWithoutCreatedByInput
    assignedLoans?: LoanUncheckedCreateNestedManyWithoutAssignedOfficerInput
    currentCustomers?: CustomerUncheckedCreateNestedManyWithoutCurrentOfficerInput
    repayments?: RepaymentUncheckedCreateNestedManyWithoutReceivedByInput
    sessions?: StaffSessionUncheckedCreateNestedManyWithoutUserInput
    uploadedCustDocs?: CustomerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    uploadedLoanDocs?: LoanDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutOldOfficerInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutNewOfficerInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedCreateNestedManyWithoutChangedByInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutOldOfficerInput
    newCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutNewOfficerInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedCreateNestedManyWithoutChangedByInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type UserCreateManyBranchInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type CustomerCreateManyBranchInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    currentOfficerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanCreateManyBranchInput = {
    id?: string
    loanNumber: string
    customerId: string
    loanTypeId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    createdByUserId: string
    assignedOfficerId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanAssignmentHistoryCreateManyOldBranchInput = {
    id?: string
    loanId: string
    oldOfficerId?: string | null
    newOfficerId: string
    newBranchId?: string | null
    changedByUserId: string
    reason?: string | null
    changedAt?: Date | string
  }

  export type LoanAssignmentHistoryCreateManyNewBranchInput = {
    id?: string
    loanId: string
    oldOfficerId?: string | null
    newOfficerId: string
    oldBranchId?: string | null
    changedByUserId: string
    reason?: string | null
    changedAt?: Date | string
  }

  export type CustomerReassignmentCreateManyOldBranchInput = {
    id?: string
    customerId: string
    newBranchId: string
    oldOfficerId?: string | null
    newOfficerId?: string | null
    changedByUserId: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
  }

  export type CustomerReassignmentCreateManyNewBranchInput = {
    id?: string
    customerId: string
    oldBranchId?: string | null
    oldOfficerId?: string | null
    newOfficerId?: string | null
    changedByUserId: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
  }

  export type UserUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedBranch?: BranchUncheckedUpdateOneWithoutManagerNestedInput
    createdLoans?: LoanUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedLoans?: LoanUncheckedUpdateManyWithoutAssignedOfficerNestedInput
    currentCustomers?: CustomerUncheckedUpdateManyWithoutCurrentOfficerNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    sessions?: StaffSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    uploadedCustDocs?: CustomerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    uploadedLoanDocs?: LoanDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    oldLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerNestedInput
    newLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedLoanAssignments?: LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByNestedInput
    oldCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerNestedInput
    newCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerNestedInput
    changedCustomerAssignments?: CustomerReassignmentUncheckedUpdateManyWithoutChangedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CustomerUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentOfficer?: UserUpdateOneWithoutCurrentCustomersNestedInput
    documents?: CustomerDocumentUpdateManyWithoutCustomerNestedInput
    loans?: LoanUpdateManyWithoutCustomerNestedInput
    reassignments?: CustomerReassignmentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    currentOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documents?: CustomerDocumentUncheckedUpdateManyWithoutCustomerNestedInput
    loans?: LoanUncheckedUpdateManyWithoutCustomerNestedInput
    reassignments?: CustomerReassignmentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    currentOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneRequiredWithoutLoansNestedInput
    loanType?: LoanTypeUpdateOneWithoutLoansNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedLoansNestedInput
    assignedOfficer?: UserUpdateOneRequiredWithoutAssignedLoansNestedInput
    scheduleItems?: RepaymentScheduleItemUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    loanTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    createdByUserId?: StringFieldUpdateOperationsInput | string
    assignedOfficerId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUncheckedUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    loanTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    createdByUserId?: StringFieldUpdateOperationsInput | string
    assignedOfficerId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanAssignmentHistoryUpdateWithoutOldBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loan?: LoanUpdateOneRequiredWithoutAssignmentHistoryNestedInput
    oldOfficer?: UserUpdateOneWithoutOldLoanAssignmentsNestedInput
    newOfficer?: UserUpdateOneRequiredWithoutNewLoanAssignmentsNestedInput
    newBranch?: BranchUpdateOneWithoutNewLoanBranchesNestedInput
    changedBy?: UserUpdateOneRequiredWithoutChangedLoanAssignmentsNestedInput
  }

  export type LoanAssignmentHistoryUncheckedUpdateWithoutOldBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: StringFieldUpdateOperationsInput | string
    newBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanAssignmentHistoryUncheckedUpdateManyWithoutOldBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: StringFieldUpdateOperationsInput | string
    newBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanAssignmentHistoryUpdateWithoutNewBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loan?: LoanUpdateOneRequiredWithoutAssignmentHistoryNestedInput
    oldOfficer?: UserUpdateOneWithoutOldLoanAssignmentsNestedInput
    newOfficer?: UserUpdateOneRequiredWithoutNewLoanAssignmentsNestedInput
    oldBranch?: BranchUpdateOneWithoutOldLoanBranchesNestedInput
    changedBy?: UserUpdateOneRequiredWithoutChangedLoanAssignmentsNestedInput
  }

  export type LoanAssignmentHistoryUncheckedUpdateWithoutNewBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanAssignmentHistoryUncheckedUpdateManyWithoutNewBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerReassignmentUpdateWithoutOldBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutReassignmentsNestedInput
    newBranch?: BranchUpdateOneRequiredWithoutNewCustomerBranchesNestedInput
    oldOfficer?: UserUpdateOneWithoutOldCustomerAssignmentsNestedInput
    newOfficer?: UserUpdateOneWithoutNewCustomerAssignmentsNestedInput
    changedBy?: UserUpdateOneRequiredWithoutChangedCustomerAssignmentsNestedInput
  }

  export type CustomerReassignmentUncheckedUpdateWithoutOldBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    newBranchId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerReassignmentUncheckedUpdateManyWithoutOldBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    newBranchId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerReassignmentUpdateWithoutNewBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutReassignmentsNestedInput
    oldBranch?: BranchUpdateOneWithoutOldCustomerBranchesNestedInput
    oldOfficer?: UserUpdateOneWithoutOldCustomerAssignmentsNestedInput
    newOfficer?: UserUpdateOneWithoutNewCustomerAssignmentsNestedInput
    changedBy?: UserUpdateOneRequiredWithoutChangedCustomerAssignmentsNestedInput
  }

  export type CustomerReassignmentUncheckedUpdateWithoutNewBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerReassignmentUncheckedUpdateManyWithoutNewBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanCreateManyCreatedByInput = {
    id?: string
    loanNumber: string
    customerId: string
    branchId: string
    loanTypeId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    assignedOfficerId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanCreateManyAssignedOfficerInput = {
    id?: string
    loanNumber: string
    customerId: string
    branchId: string
    loanTypeId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    createdByUserId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type CustomerCreateManyCurrentOfficerInput = {
    id?: string
    code?: string | null
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    address?: string | null
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type RepaymentCreateManyReceivedByInput = {
    id?: string
    loanId: string
    amount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    paidAt: Date | string
    method: $Enums.RepaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type StaffSessionCreateManyUserInput = {
    id?: string
    jwtId: string
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    revokedAt?: Date | string | null
  }

  export type AuditLogCreateManyActorInput = {
    id?: string
    action: string
    entityName: string
    entityId: string
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type CustomerDocumentCreateManyUploadedByInput = {
    id?: string
    customerId: string
    documentTypeId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanDocumentCreateManyUploadedByInput = {
    id?: string
    loanId: string
    documentTypeId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanAssignmentHistoryCreateManyOldOfficerInput = {
    id?: string
    loanId: string
    newOfficerId: string
    oldBranchId?: string | null
    newBranchId?: string | null
    changedByUserId: string
    reason?: string | null
    changedAt?: Date | string
  }

  export type LoanAssignmentHistoryCreateManyNewOfficerInput = {
    id?: string
    loanId: string
    oldOfficerId?: string | null
    oldBranchId?: string | null
    newBranchId?: string | null
    changedByUserId: string
    reason?: string | null
    changedAt?: Date | string
  }

  export type LoanAssignmentHistoryCreateManyChangedByInput = {
    id?: string
    loanId: string
    oldOfficerId?: string | null
    newOfficerId: string
    oldBranchId?: string | null
    newBranchId?: string | null
    reason?: string | null
    changedAt?: Date | string
  }

  export type CustomerReassignmentCreateManyOldOfficerInput = {
    id?: string
    customerId: string
    oldBranchId?: string | null
    newBranchId: string
    newOfficerId?: string | null
    changedByUserId: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
  }

  export type CustomerReassignmentCreateManyNewOfficerInput = {
    id?: string
    customerId: string
    oldBranchId?: string | null
    newBranchId: string
    oldOfficerId?: string | null
    changedByUserId: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
  }

  export type CustomerReassignmentCreateManyChangedByInput = {
    id?: string
    customerId: string
    oldBranchId?: string | null
    newBranchId: string
    oldOfficerId?: string | null
    newOfficerId?: string | null
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
  }

  export type LoanUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneRequiredWithoutLoansNestedInput
    branch?: BranchUpdateOneRequiredWithoutLoansNestedInput
    loanType?: LoanTypeUpdateOneWithoutLoansNestedInput
    assignedOfficer?: UserUpdateOneRequiredWithoutAssignedLoansNestedInput
    scheduleItems?: RepaymentScheduleItemUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    loanTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    assignedOfficerId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUncheckedUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    loanTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    assignedOfficerId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanUpdateWithoutAssignedOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneRequiredWithoutLoansNestedInput
    branch?: BranchUpdateOneRequiredWithoutLoansNestedInput
    loanType?: LoanTypeUpdateOneWithoutLoansNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedLoansNestedInput
    scheduleItems?: RepaymentScheduleItemUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutAssignedOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    loanTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    createdByUserId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUncheckedUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateManyWithoutAssignedOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    loanTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    createdByUserId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CustomerUpdateWithoutCurrentOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutCustomersNestedInput
    documents?: CustomerDocumentUpdateManyWithoutCustomerNestedInput
    loans?: LoanUpdateManyWithoutCustomerNestedInput
    reassignments?: CustomerReassignmentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutCurrentOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documents?: CustomerDocumentUncheckedUpdateManyWithoutCustomerNestedInput
    loans?: LoanUncheckedUpdateManyWithoutCustomerNestedInput
    reassignments?: CustomerReassignmentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutCurrentOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RepaymentUpdateWithoutReceivedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: EnumRepaymentMethodFieldUpdateOperationsInput | $Enums.RepaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loan?: LoanUpdateOneRequiredWithoutRepaymentsNestedInput
    allocations?: RepaymentAllocationUpdateManyWithoutRepaymentNestedInput
  }

  export type RepaymentUncheckedUpdateWithoutReceivedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: EnumRepaymentMethodFieldUpdateOperationsInput | $Enums.RepaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocations?: RepaymentAllocationUncheckedUpdateManyWithoutRepaymentNestedInput
  }

  export type RepaymentUncheckedUpdateManyWithoutReceivedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: EnumRepaymentMethodFieldUpdateOperationsInput | $Enums.RepaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StaffSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    jwtId?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StaffSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    jwtId?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StaffSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    jwtId?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuditLogUpdateWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerDocumentUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneRequiredWithoutDocumentsNestedInput
    documentType?: DocumentTypeUpdateOneRequiredWithoutCustomerDocsNestedInput
  }

  export type CustomerDocumentUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CustomerDocumentUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanDocumentUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loan?: LoanUpdateOneRequiredWithoutDocumentsNestedInput
    documentType?: DocumentTypeUpdateOneRequiredWithoutLoanDocsNestedInput
  }

  export type LoanDocumentUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanDocumentUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanAssignmentHistoryUpdateWithoutOldOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loan?: LoanUpdateOneRequiredWithoutAssignmentHistoryNestedInput
    newOfficer?: UserUpdateOneRequiredWithoutNewLoanAssignmentsNestedInput
    oldBranch?: BranchUpdateOneWithoutOldLoanBranchesNestedInput
    newBranch?: BranchUpdateOneWithoutNewLoanBranchesNestedInput
    changedBy?: UserUpdateOneRequiredWithoutChangedLoanAssignmentsNestedInput
  }

  export type LoanAssignmentHistoryUncheckedUpdateWithoutOldOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    newOfficerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanAssignmentHistoryUncheckedUpdateManyWithoutOldOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    newOfficerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanAssignmentHistoryUpdateWithoutNewOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loan?: LoanUpdateOneRequiredWithoutAssignmentHistoryNestedInput
    oldOfficer?: UserUpdateOneWithoutOldLoanAssignmentsNestedInput
    oldBranch?: BranchUpdateOneWithoutOldLoanBranchesNestedInput
    newBranch?: BranchUpdateOneWithoutNewLoanBranchesNestedInput
    changedBy?: UserUpdateOneRequiredWithoutChangedLoanAssignmentsNestedInput
  }

  export type LoanAssignmentHistoryUncheckedUpdateWithoutNewOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanAssignmentHistoryUncheckedUpdateManyWithoutNewOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanAssignmentHistoryUpdateWithoutChangedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loan?: LoanUpdateOneRequiredWithoutAssignmentHistoryNestedInput
    oldOfficer?: UserUpdateOneWithoutOldLoanAssignmentsNestedInput
    newOfficer?: UserUpdateOneRequiredWithoutNewLoanAssignmentsNestedInput
    oldBranch?: BranchUpdateOneWithoutOldLoanBranchesNestedInput
    newBranch?: BranchUpdateOneWithoutNewLoanBranchesNestedInput
  }

  export type LoanAssignmentHistoryUncheckedUpdateWithoutChangedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanAssignmentHistoryUncheckedUpdateManyWithoutChangedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerReassignmentUpdateWithoutOldOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutReassignmentsNestedInput
    oldBranch?: BranchUpdateOneWithoutOldCustomerBranchesNestedInput
    newBranch?: BranchUpdateOneRequiredWithoutNewCustomerBranchesNestedInput
    newOfficer?: UserUpdateOneWithoutNewCustomerAssignmentsNestedInput
    changedBy?: UserUpdateOneRequiredWithoutChangedCustomerAssignmentsNestedInput
  }

  export type CustomerReassignmentUncheckedUpdateWithoutOldOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: StringFieldUpdateOperationsInput | string
    newOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerReassignmentUncheckedUpdateManyWithoutOldOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: StringFieldUpdateOperationsInput | string
    newOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerReassignmentUpdateWithoutNewOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutReassignmentsNestedInput
    oldBranch?: BranchUpdateOneWithoutOldCustomerBranchesNestedInput
    newBranch?: BranchUpdateOneRequiredWithoutNewCustomerBranchesNestedInput
    oldOfficer?: UserUpdateOneWithoutOldCustomerAssignmentsNestedInput
    changedBy?: UserUpdateOneRequiredWithoutChangedCustomerAssignmentsNestedInput
  }

  export type CustomerReassignmentUncheckedUpdateWithoutNewOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerReassignmentUncheckedUpdateManyWithoutNewOfficerInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerReassignmentUpdateWithoutChangedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutReassignmentsNestedInput
    oldBranch?: BranchUpdateOneWithoutOldCustomerBranchesNestedInput
    newBranch?: BranchUpdateOneRequiredWithoutNewCustomerBranchesNestedInput
    oldOfficer?: UserUpdateOneWithoutOldCustomerAssignmentsNestedInput
    newOfficer?: UserUpdateOneWithoutNewCustomerAssignmentsNestedInput
  }

  export type CustomerReassignmentUncheckedUpdateWithoutChangedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerReassignmentUncheckedUpdateManyWithoutChangedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerDocumentCreateManyCustomerInput = {
    id?: string
    documentTypeId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedByUserId: string
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanCreateManyCustomerInput = {
    id?: string
    loanNumber: string
    branchId: string
    loanTypeId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    createdByUserId: string
    assignedOfficerId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type CustomerReassignmentCreateManyCustomerInput = {
    id?: string
    oldBranchId?: string | null
    newBranchId: string
    oldOfficerId?: string | null
    newOfficerId?: string | null
    changedByUserId: string
    reason?: string | null
    previousOfficerEndAt?: Date | string | null
    newOfficerStartAt?: Date | string | null
    changedAt?: Date | string
  }

  export type CustomerDocumentUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutCustomerDocsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedCustDocsNestedInput
  }

  export type CustomerDocumentUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedByUserId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CustomerDocumentUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedByUserId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutLoansNestedInput
    loanType?: LoanTypeUpdateOneWithoutLoansNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedLoansNestedInput
    assignedOfficer?: UserUpdateOneRequiredWithoutAssignedLoansNestedInput
    scheduleItems?: RepaymentScheduleItemUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    loanTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    createdByUserId?: StringFieldUpdateOperationsInput | string
    assignedOfficerId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUncheckedUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    loanTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    createdByUserId?: StringFieldUpdateOperationsInput | string
    assignedOfficerId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CustomerReassignmentUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldBranch?: BranchUpdateOneWithoutOldCustomerBranchesNestedInput
    newBranch?: BranchUpdateOneRequiredWithoutNewCustomerBranchesNestedInput
    oldOfficer?: UserUpdateOneWithoutOldCustomerAssignmentsNestedInput
    newOfficer?: UserUpdateOneWithoutNewCustomerAssignmentsNestedInput
    changedBy?: UserUpdateOneRequiredWithoutChangedCustomerAssignmentsNestedInput
  }

  export type CustomerReassignmentUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerReassignmentUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    previousOfficerEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newOfficerStartAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanCreateManyLoanTypeInput = {
    id?: string
    loanNumber: string
    customerId: string
    branchId: string
    principalAmount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    termCount: number
    termUnit: $Enums.TermUnit
    startDate: Date | string
    endDate?: Date | string | null
    processingFeeAmount: Decimal | DecimalJsLike | number | string
    processingFeeCollected?: boolean
    penaltyFeePerDayAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.LoanStatus
    createdByUserId: string
    assignedOfficerId: string
    disbursedAt?: Date | string | null
    closedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanUpdateWithoutLoanTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneRequiredWithoutLoansNestedInput
    branch?: BranchUpdateOneRequiredWithoutLoansNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedLoansNestedInput
    assignedOfficer?: UserUpdateOneRequiredWithoutAssignedLoansNestedInput
    scheduleItems?: RepaymentScheduleItemUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutLoanTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    createdByUserId?: StringFieldUpdateOperationsInput | string
    assignedOfficerId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduleItems?: RepaymentScheduleItemUncheckedUpdateManyWithoutLoanNestedInput
    repayments?: RepaymentUncheckedUpdateManyWithoutLoanNestedInput
    documents?: LoanDocumentUncheckedUpdateManyWithoutLoanNestedInput
    assignmentHistory?: LoanAssignmentHistoryUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateManyWithoutLoanTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    termCount?: IntFieldUpdateOperationsInput | number
    termUnit?: EnumTermUnitFieldUpdateOperationsInput | $Enums.TermUnit
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingFeeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    processingFeeCollected?: BoolFieldUpdateOperationsInput | boolean
    penaltyFeePerDayAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    createdByUserId?: StringFieldUpdateOperationsInput | string
    assignedOfficerId?: StringFieldUpdateOperationsInput | string
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RepaymentScheduleItemCreateManyLoanInput = {
    id?: string
    sequence: number
    dueDate: Date | string
    principalDue: Decimal | DecimalJsLike | number | string
    interestDue?: Decimal | DecimalJsLike | number | string
    feeDue?: Decimal | DecimalJsLike | number | string
    totalDue: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    status?: $Enums.ScheduleStatus
    closedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type RepaymentCreateManyLoanInput = {
    id?: string
    receivedByUserId: string
    amount: Decimal | DecimalJsLike | number | string
    currencyCode?: string
    paidAt: Date | string
    method: $Enums.RepaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanDocumentCreateManyLoanInput = {
    id?: string
    documentTypeId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedByUserId: string
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanAssignmentHistoryCreateManyLoanInput = {
    id?: string
    oldOfficerId?: string | null
    newOfficerId: string
    oldBranchId?: string | null
    newBranchId?: string | null
    changedByUserId: string
    reason?: string | null
    changedAt?: Date | string
  }

  export type RepaymentScheduleItemUpdateWithoutLoanInput = {
    id?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    interestDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocations?: RepaymentAllocationUpdateManyWithoutScheduleItemNestedInput
  }

  export type RepaymentScheduleItemUncheckedUpdateWithoutLoanInput = {
    id?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    interestDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocations?: RepaymentAllocationUncheckedUpdateManyWithoutScheduleItemNestedInput
  }

  export type RepaymentScheduleItemUncheckedUpdateManyWithoutLoanInput = {
    id?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    interestDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalDue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RepaymentUpdateWithoutLoanInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: EnumRepaymentMethodFieldUpdateOperationsInput | $Enums.RepaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedBy?: UserUpdateOneRequiredWithoutRepaymentsNestedInput
    allocations?: RepaymentAllocationUpdateManyWithoutRepaymentNestedInput
  }

  export type RepaymentUncheckedUpdateWithoutLoanInput = {
    id?: StringFieldUpdateOperationsInput | string
    receivedByUserId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: EnumRepaymentMethodFieldUpdateOperationsInput | $Enums.RepaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocations?: RepaymentAllocationUncheckedUpdateManyWithoutRepaymentNestedInput
  }

  export type RepaymentUncheckedUpdateManyWithoutLoanInput = {
    id?: StringFieldUpdateOperationsInput | string
    receivedByUserId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currencyCode?: StringFieldUpdateOperationsInput | string
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: EnumRepaymentMethodFieldUpdateOperationsInput | $Enums.RepaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanDocumentUpdateWithoutLoanInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutLoanDocsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedLoanDocsNestedInput
  }

  export type LoanDocumentUncheckedUpdateWithoutLoanInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedByUserId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanDocumentUncheckedUpdateManyWithoutLoanInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedByUserId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanAssignmentHistoryUpdateWithoutLoanInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldOfficer?: UserUpdateOneWithoutOldLoanAssignmentsNestedInput
    newOfficer?: UserUpdateOneRequiredWithoutNewLoanAssignmentsNestedInput
    oldBranch?: BranchUpdateOneWithoutOldLoanBranchesNestedInput
    newBranch?: BranchUpdateOneWithoutNewLoanBranchesNestedInput
    changedBy?: UserUpdateOneRequiredWithoutChangedLoanAssignmentsNestedInput
  }

  export type LoanAssignmentHistoryUncheckedUpdateWithoutLoanInput = {
    id?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanAssignmentHistoryUncheckedUpdateManyWithoutLoanInput = {
    id?: StringFieldUpdateOperationsInput | string
    oldOfficerId?: NullableStringFieldUpdateOperationsInput | string | null
    newOfficerId?: StringFieldUpdateOperationsInput | string
    oldBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    newBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    changedByUserId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepaymentAllocationCreateManyScheduleItemInput = {
    id?: string
    repaymentId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type RepaymentAllocationUpdateWithoutScheduleItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    repayment?: RepaymentUpdateOneRequiredWithoutAllocationsNestedInput
  }

  export type RepaymentAllocationUncheckedUpdateWithoutScheduleItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    repaymentId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepaymentAllocationUncheckedUpdateManyWithoutScheduleItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    repaymentId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepaymentAllocationCreateManyRepaymentInput = {
    id?: string
    scheduleItemId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type RepaymentAllocationUpdateWithoutRepaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduleItem?: RepaymentScheduleItemUpdateOneRequiredWithoutAllocationsNestedInput
  }

  export type RepaymentAllocationUncheckedUpdateWithoutRepaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduleItemId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepaymentAllocationUncheckedUpdateManyWithoutRepaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduleItemId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerDocumentCreateManyDocumentTypeInput = {
    id?: string
    customerId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedByUserId: string
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoanDocumentCreateManyDocumentTypeInput = {
    id?: string
    loanId: string
    fileUrl: string
    issuingAuthority?: string | null
    issueDate?: Date | string | null
    expiryDate?: Date | string | null
    verified?: boolean
    verificationNotes?: string | null
    uploadedByUserId: string
    uploadedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type CustomerDocumentUpdateWithoutDocumentTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneRequiredWithoutDocumentsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedCustDocsNestedInput
  }

  export type CustomerDocumentUncheckedUpdateWithoutDocumentTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedByUserId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CustomerDocumentUncheckedUpdateManyWithoutDocumentTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedByUserId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanDocumentUpdateWithoutDocumentTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loan?: LoanUpdateOneRequiredWithoutDocumentsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedLoanDocsNestedInput
  }

  export type LoanDocumentUncheckedUpdateWithoutDocumentTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedByUserId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoanDocumentUncheckedUpdateManyWithoutDocumentTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuingAuthority?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedByUserId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}