
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BranchScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  managerId: 'managerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  isActive: 'isActive',
  branchId: 'branchId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  code: 'code',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  email: 'email',
  address: 'address',
  branchId: 'branchId',
  currentOfficerId: 'currentOfficerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.LoanTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  minAmount: 'minAmount',
  maxAmount: 'maxAmount',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.LoanScalarFieldEnum = {
  id: 'id',
  loanNumber: 'loanNumber',
  customerId: 'customerId',
  branchId: 'branchId',
  loanTypeId: 'loanTypeId',
  principalAmount: 'principalAmount',
  currencyCode: 'currencyCode',
  termCount: 'termCount',
  termUnit: 'termUnit',
  startDate: 'startDate',
  endDate: 'endDate',
  processingFeeAmount: 'processingFeeAmount',
  processingFeeCollected: 'processingFeeCollected',
  penaltyFeePerDayAmount: 'penaltyFeePerDayAmount',
  status: 'status',
  createdByUserId: 'createdByUserId',
  assignedOfficerId: 'assignedOfficerId',
  disbursedAt: 'disbursedAt',
  closedAt: 'closedAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.RepaymentScheduleItemScalarFieldEnum = {
  id: 'id',
  loanId: 'loanId',
  sequence: 'sequence',
  dueDate: 'dueDate',
  principalDue: 'principalDue',
  interestDue: 'interestDue',
  feeDue: 'feeDue',
  totalDue: 'totalDue',
  paidAmount: 'paidAmount',
  status: 'status',
  closedAt: 'closedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.RepaymentScalarFieldEnum = {
  id: 'id',
  loanId: 'loanId',
  receivedByUserId: 'receivedByUserId',
  amount: 'amount',
  currencyCode: 'currencyCode',
  paidAt: 'paidAt',
  method: 'method',
  reference: 'reference',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.RepaymentAllocationScalarFieldEnum = {
  id: 'id',
  repaymentId: 'repaymentId',
  scheduleItemId: 'scheduleItemId',
  amount: 'amount',
  createdAt: 'createdAt'
};

exports.Prisma.LoanAssignmentHistoryScalarFieldEnum = {
  id: 'id',
  loanId: 'loanId',
  oldOfficerId: 'oldOfficerId',
  newOfficerId: 'newOfficerId',
  oldBranchId: 'oldBranchId',
  newBranchId: 'newBranchId',
  changedByUserId: 'changedByUserId',
  reason: 'reason',
  changedAt: 'changedAt'
};

exports.Prisma.CustomerReassignmentScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  oldBranchId: 'oldBranchId',
  newBranchId: 'newBranchId',
  oldOfficerId: 'oldOfficerId',
  newOfficerId: 'newOfficerId',
  changedByUserId: 'changedByUserId',
  reason: 'reason',
  previousOfficerEndAt: 'previousOfficerEndAt',
  newOfficerStartAt: 'newOfficerStartAt',
  changedAt: 'changedAt'
};

exports.Prisma.DocumentTypeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CustomerDocumentScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  documentTypeId: 'documentTypeId',
  fileUrl: 'fileUrl',
  issuingAuthority: 'issuingAuthority',
  issueDate: 'issueDate',
  expiryDate: 'expiryDate',
  verified: 'verified',
  verificationNotes: 'verificationNotes',
  uploadedByUserId: 'uploadedByUserId',
  uploadedAt: 'uploadedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.LoanDocumentScalarFieldEnum = {
  id: 'id',
  loanId: 'loanId',
  documentTypeId: 'documentTypeId',
  fileUrl: 'fileUrl',
  issuingAuthority: 'issuingAuthority',
  issueDate: 'issueDate',
  expiryDate: 'expiryDate',
  verified: 'verified',
  verificationNotes: 'verificationNotes',
  uploadedByUserId: 'uploadedByUserId',
  uploadedAt: 'uploadedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.StaffSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jwtId: 'jwtId',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  revokedAt: 'revokedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  actorUserId: 'actorUserId',
  action: 'action',
  entityName: 'entityName',
  entityId: 'entityId',
  before: 'before',
  after: 'after',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  BRANCH_MANAGER: 'BRANCH_MANAGER',
  CREDIT_OFFICER: 'CREDIT_OFFICER'
};

exports.TermUnit = exports.$Enums.TermUnit = {
  DAY: 'DAY',
  WEEK: 'WEEK',
  MONTH: 'MONTH'
};

exports.LoanStatus = exports.$Enums.LoanStatus = {
  DRAFT: 'DRAFT',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  APPROVED: 'APPROVED',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  DEFAULTED: 'DEFAULTED',
  WRITTEN_OFF: 'WRITTEN_OFF',
  CANCELED: 'CANCELED'
};

exports.ScheduleStatus = exports.$Enums.ScheduleStatus = {
  PENDING: 'PENDING',
  PARTIAL: 'PARTIAL',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE'
};

exports.RepaymentMethod = exports.$Enums.RepaymentMethod = {
  CASH: 'CASH',
  TRANSFER: 'TRANSFER',
  POS: 'POS',
  MOBILE: 'MOBILE',
  USSD: 'USSD',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  Branch: 'Branch',
  User: 'User',
  Customer: 'Customer',
  LoanType: 'LoanType',
  Loan: 'Loan',
  RepaymentScheduleItem: 'RepaymentScheduleItem',
  Repayment: 'Repayment',
  RepaymentAllocation: 'RepaymentAllocation',
  LoanAssignmentHistory: 'LoanAssignmentHistory',
  CustomerReassignment: 'CustomerReassignment',
  DocumentType: 'DocumentType',
  CustomerDocument: 'CustomerDocument',
  LoanDocument: 'LoanDocument',
  StaffSession: 'StaffSession',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
